# automatically generated by tiger.raku; do not edit
unit module Glarkum;
use NativeCall;
sub SDL_GL_GetProcAddress(Str --> Pointer) is native('SDL2') {*}
constant c_uchar = uint8;
constant c_ushort = uint16;
constant c_int = int32;
constant c_uint = uint32;

constant GLenum is export = c_uint;
constant GLboolean is export = c_uchar;
constant GLbitfield is export = c_uint;
constant GLbyte is export = int8;
constant GLubyte is export = uint8;
constant GLshort is export = int16;
constant GLushort is export = uint16;
constant GLint is export = c_int;
constant GLuint is export = c_uint;
constant GLclampx is export = int32;
constant GLsizei is export = c_int;
constant GLfloat is export = num32;
constant GLclampf is export = num32;
constant GLdouble is export = num64;
constant GLclampd is export = num64;
class GLeglClientBufferEXT is repr('CPointer') is export {}
class GLeglImageOES is repr('CPointer') is export {}
#GLchar
#GLcharARB
constant GLhandleARB = $*DISTRO.name eq 'macosx' ?? Pointer !! c_uint;

constant GLhalf is export = uint16;
constant GLhalfARB is export = uint16;
constant GLfixed is export = int32;
constant GLintptr is export = size_t; #actually intptr_t
constant GLintptrARB is export = size_t; #actually intptr_t
constant GLsizeiptr is export = ssize_t;
constant GLsizeiptrARB is export = ssize_t;
constant GLint64 is export = int64;
constant GLint64EXT is export = int64;
constant GLuint64 is export = uint64;
constant GLuint64EXT is export = uint64;
class GLsync is repr('CPointer') is export {}
# compiler apparently doesn't like these
#constant GLDEBUGPROC    is export = :(GLenum $source, GLenum $type, GLuint $id, GLenum $severity, GLsizei $length, Str $message, Pointer $userParam);
#constant GLDEBUGPROCARB is export = :(GLenum $source, GLenum $type, GLuint $id, GLenum $severity, GLsizei $length, Str $message, Pointer $userParam);
#constant GLDEBUGPROCKHR is export = :(GLenum $source, GLenum $type, GLuint $id, GLenum $severity, GLsizei $length, Str $message, Pointer $userParam);

#constant GLDEBUGPROCAMD is export = :(GLuint $id, GLenum $category, GLenum $severity, GLsizei $length, Str $message, Pointer $userParam);
constant GLhalfNV is export = c_ushort;
constant GLvdpauSurfaceNV is export = GLintptr;
#constant GLVULKANPROCNV is export = :();
constant GL_CURRENT_BIT is export = 0x00000001;
constant GL_POINT_BIT is export = 0x00000002;
constant GL_LINE_BIT is export = 0x00000004;
constant GL_POLYGON_BIT is export = 0x00000008;
constant GL_POLYGON_STIPPLE_BIT is export = 0x00000010;
constant GL_PIXEL_MODE_BIT is export = 0x00000020;
constant GL_LIGHTING_BIT is export = 0x00000040;
constant GL_FOG_BIT is export = 0x00000080;
constant GL_DEPTH_BUFFER_BIT is export = 0x00000100;
constant GL_ACCUM_BUFFER_BIT is export = 0x00000200;
constant GL_STENCIL_BUFFER_BIT is export = 0x00000400;
constant GL_VIEWPORT_BIT is export = 0x00000800;
constant GL_TRANSFORM_BIT is export = 0x00001000;
constant GL_ENABLE_BIT is export = 0x00002000;
constant GL_COLOR_BUFFER_BIT is export = 0x00004000;
constant GL_HINT_BIT is export = 0x00008000;
constant GL_EVAL_BIT is export = 0x00010000;
constant GL_LIST_BIT is export = 0x00020000;
constant GL_TEXTURE_BIT is export = 0x00040000;
constant GL_SCISSOR_BIT is export = 0x00080000;
constant GL_MULTISAMPLE_BIT is export = 0x20000000;
constant GL_ALL_ATTRIB_BITS is export = 0xFFFFFFFF;
constant GL_DYNAMIC_STORAGE_BIT is export = 0x0100;
constant GL_CLIENT_STORAGE_BIT is export = 0x0200;
constant GL_CLIENT_PIXEL_STORE_BIT is export = 0x00000001;
constant GL_CLIENT_VERTEX_ARRAY_BIT is export = 0x00000002;
constant GL_CLIENT_ALL_ATTRIB_BITS is export = 0xFFFFFFFF;
constant GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT is export = 0x00000001;
constant GL_CONTEXT_FLAG_DEBUG_BIT is export = 0x00000002;
constant GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT is export = 0x00000004;
constant GL_CONTEXT_FLAG_NO_ERROR_BIT is export = 0x00000008;
constant GL_CONTEXT_CORE_PROFILE_BIT is export = 0x00000001;
constant GL_CONTEXT_COMPATIBILITY_PROFILE_BIT is export = 0x00000002;
constant GL_MAP_READ_BIT is export = 0x0001;
constant GL_MAP_WRITE_BIT is export = 0x0002;
constant GL_MAP_INVALIDATE_RANGE_BIT is export = 0x0004;
constant GL_MAP_INVALIDATE_BUFFER_BIT is export = 0x0008;
constant GL_MAP_FLUSH_EXPLICIT_BIT is export = 0x0010;
constant GL_MAP_UNSYNCHRONIZED_BIT is export = 0x0020;
constant GL_MAP_PERSISTENT_BIT is export = 0x0040;
constant GL_MAP_COHERENT_BIT is export = 0x0080;
constant GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT is export = 0x00000001;
constant GL_ELEMENT_ARRAY_BARRIER_BIT is export = 0x00000002;
constant GL_UNIFORM_BARRIER_BIT is export = 0x00000004;
constant GL_TEXTURE_FETCH_BARRIER_BIT is export = 0x00000008;
constant GL_SHADER_IMAGE_ACCESS_BARRIER_BIT is export = 0x00000020;
constant GL_COMMAND_BARRIER_BIT is export = 0x00000040;
constant GL_PIXEL_BUFFER_BARRIER_BIT is export = 0x00000080;
constant GL_TEXTURE_UPDATE_BARRIER_BIT is export = 0x00000100;
constant GL_BUFFER_UPDATE_BARRIER_BIT is export = 0x00000200;
constant GL_FRAMEBUFFER_BARRIER_BIT is export = 0x00000400;
constant GL_TRANSFORM_FEEDBACK_BARRIER_BIT is export = 0x00000800;
constant GL_ATOMIC_COUNTER_BARRIER_BIT is export = 0x00001000;
constant GL_SHADER_STORAGE_BARRIER_BIT is export = 0x00002000;
constant GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT is export = 0x00004000;
constant GL_QUERY_BUFFER_BARRIER_BIT is export = 0x00008000;
constant GL_ALL_BARRIER_BITS is export = 0xFFFFFFFF;
constant GL_SYNC_FLUSH_COMMANDS_BIT is export = 0x00000001;
constant GL_VERTEX_SHADER_BIT is export = 0x00000001;
constant GL_FRAGMENT_SHADER_BIT is export = 0x00000002;
constant GL_GEOMETRY_SHADER_BIT is export = 0x00000004;
constant GL_TESS_CONTROL_SHADER_BIT is export = 0x00000008;
constant GL_TESS_EVALUATION_SHADER_BIT is export = 0x00000010;
constant GL_COMPUTE_SHADER_BIT is export = 0x00000020;
constant GL_ALL_SHADER_BITS is export = 0xFFFFFFFF;
constant GL_FALSE is export = 0;
constant GL_NO_ERROR is export = 0;
constant GL_ZERO is export = 0;
constant GL_NONE is export = 0;
constant GL_TRUE is export = 1;
constant GL_ONE is export = 1;
constant GL_INVALID_INDEX is export = 0xFFFFFFFF;
constant GL_TIMEOUT_IGNORED is export = 0xFFFFFFFFFFFFFFFF;
constant GL_POINTS is export = 0x0000;
constant GL_LINES is export = 0x0001;
constant GL_LINE_LOOP is export = 0x0002;
constant GL_LINE_STRIP is export = 0x0003;
constant GL_TRIANGLES is export = 0x0004;
constant GL_TRIANGLE_STRIP is export = 0x0005;
constant GL_TRIANGLE_FAN is export = 0x0006;
constant GL_QUADS is export = 0x0007;
constant GL_QUAD_STRIP is export = 0x0008;
constant GL_POLYGON is export = 0x0009;
constant GL_LINES_ADJACENCY is export = 0x000A;
constant GL_LINE_STRIP_ADJACENCY is export = 0x000B;
constant GL_TRIANGLES_ADJACENCY is export = 0x000C;
constant GL_TRIANGLE_STRIP_ADJACENCY is export = 0x000D;
constant GL_PATCHES is export = 0x000E;
constant GL_ACCUM is export = 0x0100;
constant GL_LOAD is export = 0x0101;
constant GL_RETURN is export = 0x0102;
constant GL_MULT is export = 0x0103;
constant GL_ADD is export = 0x0104;
constant GL_NEVER is export = 0x0200;
constant GL_LESS is export = 0x0201;
constant GL_EQUAL is export = 0x0202;
constant GL_LEQUAL is export = 0x0203;
constant GL_GREATER is export = 0x0204;
constant GL_NOTEQUAL is export = 0x0205;
constant GL_GEQUAL is export = 0x0206;
constant GL_ALWAYS is export = 0x0207;
constant GL_SRC_COLOR is export = 0x0300;
constant GL_ONE_MINUS_SRC_COLOR is export = 0x0301;
constant GL_SRC_ALPHA is export = 0x0302;
constant GL_ONE_MINUS_SRC_ALPHA is export = 0x0303;
constant GL_DST_ALPHA is export = 0x0304;
constant GL_ONE_MINUS_DST_ALPHA is export = 0x0305;
constant GL_DST_COLOR is export = 0x0306;
constant GL_ONE_MINUS_DST_COLOR is export = 0x0307;
constant GL_SRC_ALPHA_SATURATE is export = 0x0308;
constant GL_FRONT_LEFT is export = 0x0400;
constant GL_FRONT_RIGHT is export = 0x0401;
constant GL_BACK_LEFT is export = 0x0402;
constant GL_BACK_RIGHT is export = 0x0403;
constant GL_FRONT is export = 0x0404;
constant GL_BACK is export = 0x0405;
constant GL_LEFT is export = 0x0406;
constant GL_RIGHT is export = 0x0407;
constant GL_FRONT_AND_BACK is export = 0x0408;
constant GL_AUX0 is export = 0x0409;
constant GL_AUX1 is export = 0x040A;
constant GL_AUX2 is export = 0x040B;
constant GL_AUX3 is export = 0x040C;
constant GL_INVALID_ENUM is export = 0x0500;
constant GL_INVALID_VALUE is export = 0x0501;
constant GL_INVALID_OPERATION is export = 0x0502;
constant GL_STACK_OVERFLOW is export = 0x0503;
constant GL_STACK_UNDERFLOW is export = 0x0504;
constant GL_OUT_OF_MEMORY is export = 0x0505;
constant GL_INVALID_FRAMEBUFFER_OPERATION is export = 0x0506;
constant GL_CONTEXT_LOST is export = 0x0507;
constant GL_2D is export = 0x0600;
constant GL_3D is export = 0x0601;
constant GL_3D_COLOR is export = 0x0602;
constant GL_3D_COLOR_TEXTURE is export = 0x0603;
constant GL_4D_COLOR_TEXTURE is export = 0x0604;
constant GL_PASS_THROUGH_TOKEN is export = 0x0700;
constant GL_POINT_TOKEN is export = 0x0701;
constant GL_LINE_TOKEN is export = 0x0702;
constant GL_POLYGON_TOKEN is export = 0x0703;
constant GL_BITMAP_TOKEN is export = 0x0704;
constant GL_DRAW_PIXEL_TOKEN is export = 0x0705;
constant GL_COPY_PIXEL_TOKEN is export = 0x0706;
constant GL_LINE_RESET_TOKEN is export = 0x0707;
constant GL_EXP is export = 0x0800;
constant GL_EXP2 is export = 0x0801;
constant GL_CW is export = 0x0900;
constant GL_CCW is export = 0x0901;
constant GL_COEFF is export = 0x0A00;
constant GL_ORDER is export = 0x0A01;
constant GL_DOMAIN is export = 0x0A02;
constant GL_CURRENT_COLOR is export = 0x0B00;
constant GL_CURRENT_INDEX is export = 0x0B01;
constant GL_CURRENT_NORMAL is export = 0x0B02;
constant GL_CURRENT_TEXTURE_COORDS is export = 0x0B03;
constant GL_CURRENT_RASTER_COLOR is export = 0x0B04;
constant GL_CURRENT_RASTER_INDEX is export = 0x0B05;
constant GL_CURRENT_RASTER_TEXTURE_COORDS is export = 0x0B06;
constant GL_CURRENT_RASTER_POSITION is export = 0x0B07;
constant GL_CURRENT_RASTER_POSITION_VALID is export = 0x0B08;
constant GL_CURRENT_RASTER_DISTANCE is export = 0x0B09;
constant GL_POINT_SMOOTH is export = 0x0B10;
constant GL_POINT_SIZE is export = 0x0B11;
constant GL_POINT_SIZE_RANGE is export = 0x0B12;
constant GL_SMOOTH_POINT_SIZE_RANGE is export = 0x0B12;
constant GL_POINT_SIZE_GRANULARITY is export = 0x0B13;
constant GL_SMOOTH_POINT_SIZE_GRANULARITY is export = 0x0B13;
constant GL_LINE_SMOOTH is export = 0x0B20;
constant GL_LINE_WIDTH is export = 0x0B21;
constant GL_LINE_WIDTH_RANGE is export = 0x0B22;
constant GL_SMOOTH_LINE_WIDTH_RANGE is export = 0x0B22;
constant GL_LINE_WIDTH_GRANULARITY is export = 0x0B23;
constant GL_SMOOTH_LINE_WIDTH_GRANULARITY is export = 0x0B23;
constant GL_LINE_STIPPLE is export = 0x0B24;
constant GL_LINE_STIPPLE_PATTERN is export = 0x0B25;
constant GL_LINE_STIPPLE_REPEAT is export = 0x0B26;
constant GL_LIST_MODE is export = 0x0B30;
constant GL_MAX_LIST_NESTING is export = 0x0B31;
constant GL_LIST_BASE is export = 0x0B32;
constant GL_LIST_INDEX is export = 0x0B33;
constant GL_POLYGON_MODE is export = 0x0B40;
constant GL_POLYGON_SMOOTH is export = 0x0B41;
constant GL_POLYGON_STIPPLE is export = 0x0B42;
constant GL_EDGE_FLAG is export = 0x0B43;
constant GL_CULL_FACE is export = 0x0B44;
constant GL_CULL_FACE_MODE is export = 0x0B45;
constant GL_FRONT_FACE is export = 0x0B46;
constant GL_LIGHTING is export = 0x0B50;
constant GL_LIGHT_MODEL_LOCAL_VIEWER is export = 0x0B51;
constant GL_LIGHT_MODEL_TWO_SIDE is export = 0x0B52;
constant GL_LIGHT_MODEL_AMBIENT is export = 0x0B53;
constant GL_SHADE_MODEL is export = 0x0B54;
constant GL_COLOR_MATERIAL_FACE is export = 0x0B55;
constant GL_COLOR_MATERIAL_PARAMETER is export = 0x0B56;
constant GL_COLOR_MATERIAL is export = 0x0B57;
constant GL_FOG is export = 0x0B60;
constant GL_FOG_INDEX is export = 0x0B61;
constant GL_FOG_DENSITY is export = 0x0B62;
constant GL_FOG_START is export = 0x0B63;
constant GL_FOG_END is export = 0x0B64;
constant GL_FOG_MODE is export = 0x0B65;
constant GL_FOG_COLOR is export = 0x0B66;
constant GL_DEPTH_RANGE is export = 0x0B70;
constant GL_DEPTH_TEST is export = 0x0B71;
constant GL_DEPTH_WRITEMASK is export = 0x0B72;
constant GL_DEPTH_CLEAR_VALUE is export = 0x0B73;
constant GL_DEPTH_FUNC is export = 0x0B74;
constant GL_ACCUM_CLEAR_VALUE is export = 0x0B80;
constant GL_STENCIL_TEST is export = 0x0B90;
constant GL_STENCIL_CLEAR_VALUE is export = 0x0B91;
constant GL_STENCIL_FUNC is export = 0x0B92;
constant GL_STENCIL_VALUE_MASK is export = 0x0B93;
constant GL_STENCIL_FAIL is export = 0x0B94;
constant GL_STENCIL_PASS_DEPTH_FAIL is export = 0x0B95;
constant GL_STENCIL_PASS_DEPTH_PASS is export = 0x0B96;
constant GL_STENCIL_REF is export = 0x0B97;
constant GL_STENCIL_WRITEMASK is export = 0x0B98;
constant GL_MATRIX_MODE is export = 0x0BA0;
constant GL_NORMALIZE is export = 0x0BA1;
constant GL_VIEWPORT is export = 0x0BA2;
constant GL_MODELVIEW_STACK_DEPTH is export = 0x0BA3;
constant GL_PROJECTION_STACK_DEPTH is export = 0x0BA4;
constant GL_TEXTURE_STACK_DEPTH is export = 0x0BA5;
constant GL_MODELVIEW_MATRIX is export = 0x0BA6;
constant GL_PROJECTION_MATRIX is export = 0x0BA7;
constant GL_TEXTURE_MATRIX is export = 0x0BA8;
constant GL_ATTRIB_STACK_DEPTH is export = 0x0BB0;
constant GL_CLIENT_ATTRIB_STACK_DEPTH is export = 0x0BB1;
constant GL_ALPHA_TEST is export = 0x0BC0;
constant GL_ALPHA_TEST_FUNC is export = 0x0BC1;
constant GL_ALPHA_TEST_REF is export = 0x0BC2;
constant GL_DITHER is export = 0x0BD0;
constant GL_BLEND_DST is export = 0x0BE0;
constant GL_BLEND_SRC is export = 0x0BE1;
constant GL_BLEND is export = 0x0BE2;
constant GL_LOGIC_OP_MODE is export = 0x0BF0;
constant GL_INDEX_LOGIC_OP is export = 0x0BF1;
constant GL_LOGIC_OP is export = 0x0BF1;
constant GL_COLOR_LOGIC_OP is export = 0x0BF2;
constant GL_AUX_BUFFERS is export = 0x0C00;
constant GL_DRAW_BUFFER is export = 0x0C01;
constant GL_READ_BUFFER is export = 0x0C02;
constant GL_SCISSOR_BOX is export = 0x0C10;
constant GL_SCISSOR_TEST is export = 0x0C11;
constant GL_INDEX_CLEAR_VALUE is export = 0x0C20;
constant GL_INDEX_WRITEMASK is export = 0x0C21;
constant GL_COLOR_CLEAR_VALUE is export = 0x0C22;
constant GL_COLOR_WRITEMASK is export = 0x0C23;
constant GL_INDEX_MODE is export = 0x0C30;
constant GL_RGBA_MODE is export = 0x0C31;
constant GL_DOUBLEBUFFER is export = 0x0C32;
constant GL_STEREO is export = 0x0C33;
constant GL_RENDER_MODE is export = 0x0C40;
constant GL_PERSPECTIVE_CORRECTION_HINT is export = 0x0C50;
constant GL_POINT_SMOOTH_HINT is export = 0x0C51;
constant GL_LINE_SMOOTH_HINT is export = 0x0C52;
constant GL_POLYGON_SMOOTH_HINT is export = 0x0C53;
constant GL_FOG_HINT is export = 0x0C54;
constant GL_TEXTURE_GEN_S is export = 0x0C60;
constant GL_TEXTURE_GEN_T is export = 0x0C61;
constant GL_TEXTURE_GEN_R is export = 0x0C62;
constant GL_TEXTURE_GEN_Q is export = 0x0C63;
constant GL_PIXEL_MAP_I_TO_I is export = 0x0C70;
constant GL_PIXEL_MAP_S_TO_S is export = 0x0C71;
constant GL_PIXEL_MAP_I_TO_R is export = 0x0C72;
constant GL_PIXEL_MAP_I_TO_G is export = 0x0C73;
constant GL_PIXEL_MAP_I_TO_B is export = 0x0C74;
constant GL_PIXEL_MAP_I_TO_A is export = 0x0C75;
constant GL_PIXEL_MAP_R_TO_R is export = 0x0C76;
constant GL_PIXEL_MAP_G_TO_G is export = 0x0C77;
constant GL_PIXEL_MAP_B_TO_B is export = 0x0C78;
constant GL_PIXEL_MAP_A_TO_A is export = 0x0C79;
constant GL_PIXEL_MAP_I_TO_I_SIZE is export = 0x0CB0;
constant GL_PIXEL_MAP_S_TO_S_SIZE is export = 0x0CB1;
constant GL_PIXEL_MAP_I_TO_R_SIZE is export = 0x0CB2;
constant GL_PIXEL_MAP_I_TO_G_SIZE is export = 0x0CB3;
constant GL_PIXEL_MAP_I_TO_B_SIZE is export = 0x0CB4;
constant GL_PIXEL_MAP_I_TO_A_SIZE is export = 0x0CB5;
constant GL_PIXEL_MAP_R_TO_R_SIZE is export = 0x0CB6;
constant GL_PIXEL_MAP_G_TO_G_SIZE is export = 0x0CB7;
constant GL_PIXEL_MAP_B_TO_B_SIZE is export = 0x0CB8;
constant GL_PIXEL_MAP_A_TO_A_SIZE is export = 0x0CB9;
constant GL_UNPACK_SWAP_BYTES is export = 0x0CF0;
constant GL_UNPACK_LSB_FIRST is export = 0x0CF1;
constant GL_UNPACK_ROW_LENGTH is export = 0x0CF2;
constant GL_UNPACK_SKIP_ROWS is export = 0x0CF3;
constant GL_UNPACK_SKIP_PIXELS is export = 0x0CF4;
constant GL_UNPACK_ALIGNMENT is export = 0x0CF5;
constant GL_PACK_SWAP_BYTES is export = 0x0D00;
constant GL_PACK_LSB_FIRST is export = 0x0D01;
constant GL_PACK_ROW_LENGTH is export = 0x0D02;
constant GL_PACK_SKIP_ROWS is export = 0x0D03;
constant GL_PACK_SKIP_PIXELS is export = 0x0D04;
constant GL_PACK_ALIGNMENT is export = 0x0D05;
constant GL_MAP_COLOR is export = 0x0D10;
constant GL_MAP_STENCIL is export = 0x0D11;
constant GL_INDEX_SHIFT is export = 0x0D12;
constant GL_INDEX_OFFSET is export = 0x0D13;
constant GL_RED_SCALE is export = 0x0D14;
constant GL_RED_BIAS is export = 0x0D15;
constant GL_ZOOM_X is export = 0x0D16;
constant GL_ZOOM_Y is export = 0x0D17;
constant GL_GREEN_SCALE is export = 0x0D18;
constant GL_GREEN_BIAS is export = 0x0D19;
constant GL_BLUE_SCALE is export = 0x0D1A;
constant GL_BLUE_BIAS is export = 0x0D1B;
constant GL_ALPHA_SCALE is export = 0x0D1C;
constant GL_ALPHA_BIAS is export = 0x0D1D;
constant GL_DEPTH_SCALE is export = 0x0D1E;
constant GL_DEPTH_BIAS is export = 0x0D1F;
constant GL_MAX_EVAL_ORDER is export = 0x0D30;
constant GL_MAX_LIGHTS is export = 0x0D31;
constant GL_MAX_CLIP_PLANES is export = 0x0D32;
constant GL_MAX_CLIP_DISTANCES is export = 0x0D32;
constant GL_MAX_TEXTURE_SIZE is export = 0x0D33;
constant GL_MAX_PIXEL_MAP_TABLE is export = 0x0D34;
constant GL_MAX_ATTRIB_STACK_DEPTH is export = 0x0D35;
constant GL_MAX_MODELVIEW_STACK_DEPTH is export = 0x0D36;
constant GL_MAX_NAME_STACK_DEPTH is export = 0x0D37;
constant GL_MAX_PROJECTION_STACK_DEPTH is export = 0x0D38;
constant GL_MAX_TEXTURE_STACK_DEPTH is export = 0x0D39;
constant GL_MAX_VIEWPORT_DIMS is export = 0x0D3A;
constant GL_MAX_CLIENT_ATTRIB_STACK_DEPTH is export = 0x0D3B;
constant GL_SUBPIXEL_BITS is export = 0x0D50;
constant GL_INDEX_BITS is export = 0x0D51;
constant GL_RED_BITS is export = 0x0D52;
constant GL_GREEN_BITS is export = 0x0D53;
constant GL_BLUE_BITS is export = 0x0D54;
constant GL_ALPHA_BITS is export = 0x0D55;
constant GL_DEPTH_BITS is export = 0x0D56;
constant GL_STENCIL_BITS is export = 0x0D57;
constant GL_ACCUM_RED_BITS is export = 0x0D58;
constant GL_ACCUM_GREEN_BITS is export = 0x0D59;
constant GL_ACCUM_BLUE_BITS is export = 0x0D5A;
constant GL_ACCUM_ALPHA_BITS is export = 0x0D5B;
constant GL_NAME_STACK_DEPTH is export = 0x0D70;
constant GL_AUTO_NORMAL is export = 0x0D80;
constant GL_MAP1_COLOR_4 is export = 0x0D90;
constant GL_MAP1_INDEX is export = 0x0D91;
constant GL_MAP1_NORMAL is export = 0x0D92;
constant GL_MAP1_TEXTURE_COORD_1 is export = 0x0D93;
constant GL_MAP1_TEXTURE_COORD_2 is export = 0x0D94;
constant GL_MAP1_TEXTURE_COORD_3 is export = 0x0D95;
constant GL_MAP1_TEXTURE_COORD_4 is export = 0x0D96;
constant GL_MAP1_VERTEX_3 is export = 0x0D97;
constant GL_MAP1_VERTEX_4 is export = 0x0D98;
constant GL_MAP2_COLOR_4 is export = 0x0DB0;
constant GL_MAP2_INDEX is export = 0x0DB1;
constant GL_MAP2_NORMAL is export = 0x0DB2;
constant GL_MAP2_TEXTURE_COORD_1 is export = 0x0DB3;
constant GL_MAP2_TEXTURE_COORD_2 is export = 0x0DB4;
constant GL_MAP2_TEXTURE_COORD_3 is export = 0x0DB5;
constant GL_MAP2_TEXTURE_COORD_4 is export = 0x0DB6;
constant GL_MAP2_VERTEX_3 is export = 0x0DB7;
constant GL_MAP2_VERTEX_4 is export = 0x0DB8;
constant GL_MAP1_GRID_DOMAIN is export = 0x0DD0;
constant GL_MAP1_GRID_SEGMENTS is export = 0x0DD1;
constant GL_MAP2_GRID_DOMAIN is export = 0x0DD2;
constant GL_MAP2_GRID_SEGMENTS is export = 0x0DD3;
constant GL_TEXTURE_1D is export = 0x0DE0;
constant GL_TEXTURE_2D is export = 0x0DE1;
constant GL_FEEDBACK_BUFFER_POINTER is export = 0x0DF0;
constant GL_FEEDBACK_BUFFER_SIZE is export = 0x0DF1;
constant GL_FEEDBACK_BUFFER_TYPE is export = 0x0DF2;
constant GL_SELECTION_BUFFER_POINTER is export = 0x0DF3;
constant GL_SELECTION_BUFFER_SIZE is export = 0x0DF4;
constant GL_TEXTURE_WIDTH is export = 0x1000;
constant GL_TEXTURE_HEIGHT is export = 0x1001;
constant GL_TEXTURE_INTERNAL_FORMAT is export = 0x1003;
constant GL_TEXTURE_COMPONENTS is export = 0x1003;
constant GL_TEXTURE_BORDER_COLOR is export = 0x1004;
constant GL_TEXTURE_BORDER is export = 0x1005;
constant GL_TEXTURE_TARGET is export = 0x1006;
constant GL_DONT_CARE is export = 0x1100;
constant GL_FASTEST is export = 0x1101;
constant GL_NICEST is export = 0x1102;
constant GL_AMBIENT is export = 0x1200;
constant GL_DIFFUSE is export = 0x1201;
constant GL_SPECULAR is export = 0x1202;
constant GL_POSITION is export = 0x1203;
constant GL_SPOT_DIRECTION is export = 0x1204;
constant GL_SPOT_EXPONENT is export = 0x1205;
constant GL_SPOT_CUTOFF is export = 0x1206;
constant GL_CONSTANT_ATTENUATION is export = 0x1207;
constant GL_LINEAR_ATTENUATION is export = 0x1208;
constant GL_QUADRATIC_ATTENUATION is export = 0x1209;
constant GL_COMPILE is export = 0x1300;
constant GL_COMPILE_AND_EXECUTE is export = 0x1301;
constant GL_BYTE is export = 0x1400;
constant GL_UNSIGNED_BYTE is export = 0x1401;
constant GL_SHORT is export = 0x1402;
constant GL_UNSIGNED_SHORT is export = 0x1403;
constant GL_INT is export = 0x1404;
constant GL_UNSIGNED_INT is export = 0x1405;
constant GL_FLOAT is export = 0x1406;
constant GL_2_BYTES is export = 0x1407;
constant GL_3_BYTES is export = 0x1408;
constant GL_4_BYTES is export = 0x1409;
constant GL_DOUBLE is export = 0x140A;
constant GL_HALF_FLOAT is export = 0x140B;
constant GL_FIXED is export = 0x140C;
constant GL_CLEAR is export = 0x1500;
constant GL_AND is export = 0x1501;
constant GL_AND_REVERSE is export = 0x1502;
constant GL_COPY is export = 0x1503;
constant GL_AND_INVERTED is export = 0x1504;
constant GL_NOOP is export = 0x1505;
constant GL_XOR is export = 0x1506;
constant GL_OR is export = 0x1507;
constant GL_NOR is export = 0x1508;
constant GL_EQUIV is export = 0x1509;
constant GL_INVERT is export = 0x150A;
constant GL_OR_REVERSE is export = 0x150B;
constant GL_COPY_INVERTED is export = 0x150C;
constant GL_OR_INVERTED is export = 0x150D;
constant GL_NAND is export = 0x150E;
constant GL_SET is export = 0x150F;
constant GL_EMISSION is export = 0x1600;
constant GL_SHININESS is export = 0x1601;
constant GL_AMBIENT_AND_DIFFUSE is export = 0x1602;
constant GL_COLOR_INDEXES is export = 0x1603;
constant GL_MODELVIEW is export = 0x1700;
constant GL_PROJECTION is export = 0x1701;
constant GL_TEXTURE is export = 0x1702;
constant GL_COLOR is export = 0x1800;
constant GL_DEPTH is export = 0x1801;
constant GL_STENCIL is export = 0x1802;
constant GL_COLOR_INDEX is export = 0x1900;
constant GL_STENCIL_INDEX is export = 0x1901;
constant GL_DEPTH_COMPONENT is export = 0x1902;
constant GL_RED is export = 0x1903;
constant GL_GREEN is export = 0x1904;
constant GL_BLUE is export = 0x1905;
constant GL_ALPHA is export = 0x1906;
constant GL_RGB is export = 0x1907;
constant GL_RGBA is export = 0x1908;
constant GL_LUMINANCE is export = 0x1909;
constant GL_LUMINANCE_ALPHA is export = 0x190A;
constant GL_BITMAP is export = 0x1A00;
constant GL_POINT is export = 0x1B00;
constant GL_LINE is export = 0x1B01;
constant GL_FILL is export = 0x1B02;
constant GL_RENDER is export = 0x1C00;
constant GL_FEEDBACK is export = 0x1C01;
constant GL_SELECT is export = 0x1C02;
constant GL_FLAT is export = 0x1D00;
constant GL_SMOOTH is export = 0x1D01;
constant GL_KEEP is export = 0x1E00;
constant GL_REPLACE is export = 0x1E01;
constant GL_INCR is export = 0x1E02;
constant GL_DECR is export = 0x1E03;
constant GL_VENDOR is export = 0x1F00;
constant GL_RENDERER is export = 0x1F01;
constant GL_VERSION is export = 0x1F02;
constant GL_EXTENSIONS is export = 0x1F03;
constant GL_S is export = 0x2000;
constant GL_T is export = 0x2001;
constant GL_R is export = 0x2002;
constant GL_Q is export = 0x2003;
constant GL_MODULATE is export = 0x2100;
constant GL_DECAL is export = 0x2101;
constant GL_TEXTURE_ENV_MODE is export = 0x2200;
constant GL_TEXTURE_ENV_COLOR is export = 0x2201;
constant GL_TEXTURE_ENV is export = 0x2300;
constant GL_EYE_LINEAR is export = 0x2400;
constant GL_OBJECT_LINEAR is export = 0x2401;
constant GL_SPHERE_MAP is export = 0x2402;
constant GL_TEXTURE_GEN_MODE is export = 0x2500;
constant GL_OBJECT_PLANE is export = 0x2501;
constant GL_EYE_PLANE is export = 0x2502;
constant GL_NEAREST is export = 0x2600;
constant GL_LINEAR is export = 0x2601;
constant GL_NEAREST_MIPMAP_NEAREST is export = 0x2700;
constant GL_LINEAR_MIPMAP_NEAREST is export = 0x2701;
constant GL_NEAREST_MIPMAP_LINEAR is export = 0x2702;
constant GL_LINEAR_MIPMAP_LINEAR is export = 0x2703;
constant GL_TEXTURE_MAG_FILTER is export = 0x2800;
constant GL_TEXTURE_MIN_FILTER is export = 0x2801;
constant GL_TEXTURE_WRAP_S is export = 0x2802;
constant GL_TEXTURE_WRAP_T is export = 0x2803;
constant GL_CLAMP is export = 0x2900;
constant GL_REPEAT is export = 0x2901;
constant GL_POLYGON_OFFSET_UNITS is export = 0x2A00;
constant GL_POLYGON_OFFSET_POINT is export = 0x2A01;
constant GL_POLYGON_OFFSET_LINE is export = 0x2A02;
constant GL_R3_G3_B2 is export = 0x2A10;
constant GL_V2F is export = 0x2A20;
constant GL_V3F is export = 0x2A21;
constant GL_C4UB_V2F is export = 0x2A22;
constant GL_C4UB_V3F is export = 0x2A23;
constant GL_C3F_V3F is export = 0x2A24;
constant GL_N3F_V3F is export = 0x2A25;
constant GL_C4F_N3F_V3F is export = 0x2A26;
constant GL_T2F_V3F is export = 0x2A27;
constant GL_T4F_V4F is export = 0x2A28;
constant GL_T2F_C4UB_V3F is export = 0x2A29;
constant GL_T2F_C3F_V3F is export = 0x2A2A;
constant GL_T2F_N3F_V3F is export = 0x2A2B;
constant GL_T2F_C4F_N3F_V3F is export = 0x2A2C;
constant GL_T4F_C4F_N3F_V4F is export = 0x2A2D;
constant GL_CLIP_PLANE0 is export = 0x3000;
constant GL_CLIP_DISTANCE0 is export = 0x3000;
constant GL_CLIP_PLANE1 is export = 0x3001;
constant GL_CLIP_DISTANCE1 is export = 0x3001;
constant GL_CLIP_PLANE2 is export = 0x3002;
constant GL_CLIP_DISTANCE2 is export = 0x3002;
constant GL_CLIP_PLANE3 is export = 0x3003;
constant GL_CLIP_DISTANCE3 is export = 0x3003;
constant GL_CLIP_PLANE4 is export = 0x3004;
constant GL_CLIP_DISTANCE4 is export = 0x3004;
constant GL_CLIP_PLANE5 is export = 0x3005;
constant GL_CLIP_DISTANCE5 is export = 0x3005;
constant GL_CLIP_DISTANCE6 is export = 0x3006;
constant GL_CLIP_DISTANCE7 is export = 0x3007;
constant GL_LIGHT0 is export = 0x4000;
constant GL_LIGHT1 is export = 0x4001;
constant GL_LIGHT2 is export = 0x4002;
constant GL_LIGHT3 is export = 0x4003;
constant GL_LIGHT4 is export = 0x4004;
constant GL_LIGHT5 is export = 0x4005;
constant GL_LIGHT6 is export = 0x4006;
constant GL_LIGHT7 is export = 0x4007;
constant GL_CONSTANT_COLOR is export = 0x8001;
constant GL_ONE_MINUS_CONSTANT_COLOR is export = 0x8002;
constant GL_CONSTANT_ALPHA is export = 0x8003;
constant GL_ONE_MINUS_CONSTANT_ALPHA is export = 0x8004;
constant GL_BLEND_COLOR is export = 0x8005;
constant GL_FUNC_ADD is export = 0x8006;
constant GL_MIN is export = 0x8007;
constant GL_MAX is export = 0x8008;
constant GL_BLEND_EQUATION is export = 0x8009;
constant GL_BLEND_EQUATION_RGB is export = 0x8009;
constant GL_FUNC_SUBTRACT is export = 0x800A;
constant GL_FUNC_REVERSE_SUBTRACT is export = 0x800B;
constant GL_CONVOLUTION_1D is export = 0x8010;
constant GL_CONVOLUTION_2D is export = 0x8011;
constant GL_SEPARABLE_2D is export = 0x8012;
constant GL_HISTOGRAM is export = 0x8024;
constant GL_PROXY_HISTOGRAM is export = 0x8025;
constant GL_MINMAX is export = 0x802E;
constant GL_UNSIGNED_BYTE_3_3_2 is export = 0x8032;
constant GL_UNSIGNED_SHORT_4_4_4_4 is export = 0x8033;
constant GL_UNSIGNED_SHORT_5_5_5_1 is export = 0x8034;
constant GL_UNSIGNED_INT_8_8_8_8 is export = 0x8035;
constant GL_UNSIGNED_INT_10_10_10_2 is export = 0x8036;
constant GL_POLYGON_OFFSET_FILL is export = 0x8037;
constant GL_POLYGON_OFFSET_FACTOR is export = 0x8038;
constant GL_RESCALE_NORMAL is export = 0x803A;
constant GL_ALPHA4 is export = 0x803B;
constant GL_ALPHA8 is export = 0x803C;
constant GL_ALPHA12 is export = 0x803D;
constant GL_ALPHA16 is export = 0x803E;
constant GL_LUMINANCE4 is export = 0x803F;
constant GL_LUMINANCE8 is export = 0x8040;
constant GL_LUMINANCE12 is export = 0x8041;
constant GL_LUMINANCE16 is export = 0x8042;
constant GL_LUMINANCE4_ALPHA4 is export = 0x8043;
constant GL_LUMINANCE6_ALPHA2 is export = 0x8044;
constant GL_LUMINANCE8_ALPHA8 is export = 0x8045;
constant GL_LUMINANCE12_ALPHA4 is export = 0x8046;
constant GL_LUMINANCE12_ALPHA12 is export = 0x8047;
constant GL_LUMINANCE16_ALPHA16 is export = 0x8048;
constant GL_INTENSITY is export = 0x8049;
constant GL_INTENSITY4 is export = 0x804A;
constant GL_INTENSITY8 is export = 0x804B;
constant GL_INTENSITY12 is export = 0x804C;
constant GL_INTENSITY16 is export = 0x804D;
constant GL_RGB4 is export = 0x804F;
constant GL_RGB5 is export = 0x8050;
constant GL_RGB8 is export = 0x8051;
constant GL_RGB10 is export = 0x8052;
constant GL_RGB12 is export = 0x8053;
constant GL_RGB16 is export = 0x8054;
constant GL_RGBA2 is export = 0x8055;
constant GL_RGBA4 is export = 0x8056;
constant GL_RGB5_A1 is export = 0x8057;
constant GL_RGBA8 is export = 0x8058;
constant GL_RGB10_A2 is export = 0x8059;
constant GL_RGBA12 is export = 0x805A;
constant GL_RGBA16 is export = 0x805B;
constant GL_TEXTURE_RED_SIZE is export = 0x805C;
constant GL_TEXTURE_GREEN_SIZE is export = 0x805D;
constant GL_TEXTURE_BLUE_SIZE is export = 0x805E;
constant GL_TEXTURE_ALPHA_SIZE is export = 0x805F;
constant GL_TEXTURE_LUMINANCE_SIZE is export = 0x8060;
constant GL_TEXTURE_INTENSITY_SIZE is export = 0x8061;
constant GL_PROXY_TEXTURE_1D is export = 0x8063;
constant GL_PROXY_TEXTURE_2D is export = 0x8064;
constant GL_TEXTURE_PRIORITY is export = 0x8066;
constant GL_TEXTURE_RESIDENT is export = 0x8067;
constant GL_TEXTURE_BINDING_1D is export = 0x8068;
constant GL_TEXTURE_BINDING_2D is export = 0x8069;
constant GL_TEXTURE_BINDING_3D is export = 0x806A;
constant GL_PACK_SKIP_IMAGES is export = 0x806B;
constant GL_PACK_IMAGE_HEIGHT is export = 0x806C;
constant GL_UNPACK_SKIP_IMAGES is export = 0x806D;
constant GL_UNPACK_IMAGE_HEIGHT is export = 0x806E;
constant GL_TEXTURE_3D is export = 0x806F;
constant GL_PROXY_TEXTURE_3D is export = 0x8070;
constant GL_TEXTURE_DEPTH is export = 0x8071;
constant GL_TEXTURE_WRAP_R is export = 0x8072;
constant GL_MAX_3D_TEXTURE_SIZE is export = 0x8073;
constant GL_VERTEX_ARRAY is export = 0x8074;
constant GL_NORMAL_ARRAY is export = 0x8075;
constant GL_COLOR_ARRAY is export = 0x8076;
constant GL_INDEX_ARRAY is export = 0x8077;
constant GL_TEXTURE_COORD_ARRAY is export = 0x8078;
constant GL_EDGE_FLAG_ARRAY is export = 0x8079;
constant GL_VERTEX_ARRAY_SIZE is export = 0x807A;
constant GL_VERTEX_ARRAY_TYPE is export = 0x807B;
constant GL_VERTEX_ARRAY_STRIDE is export = 0x807C;
constant GL_NORMAL_ARRAY_TYPE is export = 0x807E;
constant GL_NORMAL_ARRAY_STRIDE is export = 0x807F;
constant GL_COLOR_ARRAY_SIZE is export = 0x8081;
constant GL_COLOR_ARRAY_TYPE is export = 0x8082;
constant GL_COLOR_ARRAY_STRIDE is export = 0x8083;
constant GL_INDEX_ARRAY_TYPE is export = 0x8085;
constant GL_INDEX_ARRAY_STRIDE is export = 0x8086;
constant GL_TEXTURE_COORD_ARRAY_SIZE is export = 0x8088;
constant GL_TEXTURE_COORD_ARRAY_TYPE is export = 0x8089;
constant GL_TEXTURE_COORD_ARRAY_STRIDE is export = 0x808A;
constant GL_EDGE_FLAG_ARRAY_STRIDE is export = 0x808C;
constant GL_VERTEX_ARRAY_POINTER is export = 0x808E;
constant GL_NORMAL_ARRAY_POINTER is export = 0x808F;
constant GL_COLOR_ARRAY_POINTER is export = 0x8090;
constant GL_INDEX_ARRAY_POINTER is export = 0x8091;
constant GL_TEXTURE_COORD_ARRAY_POINTER is export = 0x8092;
constant GL_EDGE_FLAG_ARRAY_POINTER is export = 0x8093;
constant GL_MULTISAMPLE is export = 0x809D;
constant GL_SAMPLE_ALPHA_TO_COVERAGE is export = 0x809E;
constant GL_SAMPLE_ALPHA_TO_ONE is export = 0x809F;
constant GL_SAMPLE_COVERAGE is export = 0x80A0;
constant GL_SAMPLE_BUFFERS is export = 0x80A8;
constant GL_SAMPLES is export = 0x80A9;
constant GL_SAMPLE_COVERAGE_VALUE is export = 0x80AA;
constant GL_SAMPLE_COVERAGE_INVERT is export = 0x80AB;
constant GL_BLEND_DST_RGB is export = 0x80C8;
constant GL_BLEND_SRC_RGB is export = 0x80C9;
constant GL_BLEND_DST_ALPHA is export = 0x80CA;
constant GL_BLEND_SRC_ALPHA is export = 0x80CB;
constant GL_COLOR_TABLE is export = 0x80D0;
constant GL_POST_CONVOLUTION_COLOR_TABLE is export = 0x80D1;
constant GL_POST_COLOR_MATRIX_COLOR_TABLE is export = 0x80D2;
constant GL_PROXY_COLOR_TABLE is export = 0x80D3;
constant GL_PROXY_POST_CONVOLUTION_COLOR_TABLE is export = 0x80D4;
constant GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE is export = 0x80D5;
constant GL_BGR is export = 0x80E0;
constant GL_BGRA is export = 0x80E1;
constant GL_MAX_ELEMENTS_VERTICES is export = 0x80E8;
constant GL_MAX_ELEMENTS_INDICES is export = 0x80E9;
constant GL_PARAMETER_BUFFER is export = 0x80EE;
constant GL_PARAMETER_BUFFER_BINDING is export = 0x80EF;
constant GL_POINT_SIZE_MIN is export = 0x8126;
constant GL_POINT_SIZE_MAX is export = 0x8127;
constant GL_POINT_FADE_THRESHOLD_SIZE is export = 0x8128;
constant GL_POINT_DISTANCE_ATTENUATION is export = 0x8129;
constant GL_CLAMP_TO_BORDER is export = 0x812D;
constant GL_CLAMP_TO_EDGE is export = 0x812F;
constant GL_TEXTURE_MIN_LOD is export = 0x813A;
constant GL_TEXTURE_MAX_LOD is export = 0x813B;
constant GL_TEXTURE_BASE_LEVEL is export = 0x813C;
constant GL_TEXTURE_MAX_LEVEL is export = 0x813D;
constant GL_GENERATE_MIPMAP is export = 0x8191;
constant GL_GENERATE_MIPMAP_HINT is export = 0x8192;
constant GL_DEPTH_COMPONENT16 is export = 0x81A5;
constant GL_DEPTH_COMPONENT24 is export = 0x81A6;
constant GL_DEPTH_COMPONENT32 is export = 0x81A7;
constant GL_LIGHT_MODEL_COLOR_CONTROL is export = 0x81F8;
constant GL_SINGLE_COLOR is export = 0x81F9;
constant GL_SEPARATE_SPECULAR_COLOR is export = 0x81FA;
constant GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING is export = 0x8210;
constant GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE is export = 0x8211;
constant GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE is export = 0x8212;
constant GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE is export = 0x8213;
constant GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE is export = 0x8214;
constant GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE is export = 0x8215;
constant GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE is export = 0x8216;
constant GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE is export = 0x8217;
constant GL_FRAMEBUFFER_DEFAULT is export = 0x8218;
constant GL_FRAMEBUFFER_UNDEFINED is export = 0x8219;
constant GL_DEPTH_STENCIL_ATTACHMENT is export = 0x821A;
constant GL_MAJOR_VERSION is export = 0x821B;
constant GL_MINOR_VERSION is export = 0x821C;
constant GL_NUM_EXTENSIONS is export = 0x821D;
constant GL_CONTEXT_FLAGS is export = 0x821E;
constant GL_BUFFER_IMMUTABLE_STORAGE is export = 0x821F;
constant GL_BUFFER_STORAGE_FLAGS is export = 0x8220;
constant GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED is export = 0x8221;
constant GL_INDEX is export = 0x8222;
constant GL_COMPRESSED_RED is export = 0x8225;
constant GL_COMPRESSED_RG is export = 0x8226;
constant GL_RG is export = 0x8227;
constant GL_RG_INTEGER is export = 0x8228;
constant GL_R8 is export = 0x8229;
constant GL_R16 is export = 0x822A;
constant GL_RG8 is export = 0x822B;
constant GL_RG16 is export = 0x822C;
constant GL_R16F is export = 0x822D;
constant GL_R32F is export = 0x822E;
constant GL_RG16F is export = 0x822F;
constant GL_RG32F is export = 0x8230;
constant GL_R8I is export = 0x8231;
constant GL_R8UI is export = 0x8232;
constant GL_R16I is export = 0x8233;
constant GL_R16UI is export = 0x8234;
constant GL_R32I is export = 0x8235;
constant GL_R32UI is export = 0x8236;
constant GL_RG8I is export = 0x8237;
constant GL_RG8UI is export = 0x8238;
constant GL_RG16I is export = 0x8239;
constant GL_RG16UI is export = 0x823A;
constant GL_RG32I is export = 0x823B;
constant GL_RG32UI is export = 0x823C;
constant GL_DEBUG_OUTPUT_SYNCHRONOUS is export = 0x8242;
constant GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH is export = 0x8243;
constant GL_DEBUG_CALLBACK_FUNCTION is export = 0x8244;
constant GL_DEBUG_CALLBACK_USER_PARAM is export = 0x8245;
constant GL_DEBUG_SOURCE_API is export = 0x8246;
constant GL_DEBUG_SOURCE_WINDOW_SYSTEM is export = 0x8247;
constant GL_DEBUG_SOURCE_SHADER_COMPILER is export = 0x8248;
constant GL_DEBUG_SOURCE_THIRD_PARTY is export = 0x8249;
constant GL_DEBUG_SOURCE_APPLICATION is export = 0x824A;
constant GL_DEBUG_SOURCE_OTHER is export = 0x824B;
constant GL_DEBUG_TYPE_ERROR is export = 0x824C;
constant GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR is export = 0x824D;
constant GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR is export = 0x824E;
constant GL_DEBUG_TYPE_PORTABILITY is export = 0x824F;
constant GL_DEBUG_TYPE_PERFORMANCE is export = 0x8250;
constant GL_DEBUG_TYPE_OTHER is export = 0x8251;
constant GL_LOSE_CONTEXT_ON_RESET is export = 0x8252;
constant GL_GUILTY_CONTEXT_RESET is export = 0x8253;
constant GL_INNOCENT_CONTEXT_RESET is export = 0x8254;
constant GL_UNKNOWN_CONTEXT_RESET is export = 0x8255;
constant GL_RESET_NOTIFICATION_STRATEGY is export = 0x8256;
constant GL_PROGRAM_BINARY_RETRIEVABLE_HINT is export = 0x8257;
constant GL_PROGRAM_SEPARABLE is export = 0x8258;
constant GL_ACTIVE_PROGRAM is export = 0x8259;
constant GL_PROGRAM_PIPELINE_BINDING is export = 0x825A;
constant GL_MAX_VIEWPORTS is export = 0x825B;
constant GL_VIEWPORT_SUBPIXEL_BITS is export = 0x825C;
constant GL_VIEWPORT_BOUNDS_RANGE is export = 0x825D;
constant GL_LAYER_PROVOKING_VERTEX is export = 0x825E;
constant GL_VIEWPORT_INDEX_PROVOKING_VERTEX is export = 0x825F;
constant GL_UNDEFINED_VERTEX is export = 0x8260;
constant GL_NO_RESET_NOTIFICATION is export = 0x8261;
constant GL_MAX_COMPUTE_SHARED_MEMORY_SIZE is export = 0x8262;
constant GL_MAX_COMPUTE_UNIFORM_COMPONENTS is export = 0x8263;
constant GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS is export = 0x8264;
constant GL_MAX_COMPUTE_ATOMIC_COUNTERS is export = 0x8265;
constant GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS is export = 0x8266;
constant GL_COMPUTE_WORK_GROUP_SIZE is export = 0x8267;
constant GL_DEBUG_TYPE_MARKER is export = 0x8268;
constant GL_DEBUG_TYPE_PUSH_GROUP is export = 0x8269;
constant GL_DEBUG_TYPE_POP_GROUP is export = 0x826A;
constant GL_DEBUG_SEVERITY_NOTIFICATION is export = 0x826B;
constant GL_MAX_DEBUG_GROUP_STACK_DEPTH is export = 0x826C;
constant GL_DEBUG_GROUP_STACK_DEPTH is export = 0x826D;
constant GL_MAX_UNIFORM_LOCATIONS is export = 0x826E;
constant GL_INTERNALFORMAT_SUPPORTED is export = 0x826F;
constant GL_INTERNALFORMAT_PREFERRED is export = 0x8270;
constant GL_INTERNALFORMAT_RED_SIZE is export = 0x8271;
constant GL_INTERNALFORMAT_GREEN_SIZE is export = 0x8272;
constant GL_INTERNALFORMAT_BLUE_SIZE is export = 0x8273;
constant GL_INTERNALFORMAT_ALPHA_SIZE is export = 0x8274;
constant GL_INTERNALFORMAT_DEPTH_SIZE is export = 0x8275;
constant GL_INTERNALFORMAT_STENCIL_SIZE is export = 0x8276;
constant GL_INTERNALFORMAT_SHARED_SIZE is export = 0x8277;
constant GL_INTERNALFORMAT_RED_TYPE is export = 0x8278;
constant GL_INTERNALFORMAT_GREEN_TYPE is export = 0x8279;
constant GL_INTERNALFORMAT_BLUE_TYPE is export = 0x827A;
constant GL_INTERNALFORMAT_ALPHA_TYPE is export = 0x827B;
constant GL_INTERNALFORMAT_DEPTH_TYPE is export = 0x827C;
constant GL_INTERNALFORMAT_STENCIL_TYPE is export = 0x827D;
constant GL_MAX_WIDTH is export = 0x827E;
constant GL_MAX_HEIGHT is export = 0x827F;
constant GL_MAX_DEPTH is export = 0x8280;
constant GL_MAX_LAYERS is export = 0x8281;
constant GL_MAX_COMBINED_DIMENSIONS is export = 0x8282;
constant GL_COLOR_COMPONENTS is export = 0x8283;
constant GL_DEPTH_COMPONENTS is export = 0x8284;
constant GL_STENCIL_COMPONENTS is export = 0x8285;
constant GL_COLOR_RENDERABLE is export = 0x8286;
constant GL_DEPTH_RENDERABLE is export = 0x8287;
constant GL_STENCIL_RENDERABLE is export = 0x8288;
constant GL_FRAMEBUFFER_RENDERABLE is export = 0x8289;
constant GL_FRAMEBUFFER_RENDERABLE_LAYERED is export = 0x828A;
constant GL_FRAMEBUFFER_BLEND is export = 0x828B;
constant GL_READ_PIXELS is export = 0x828C;
constant GL_READ_PIXELS_FORMAT is export = 0x828D;
constant GL_READ_PIXELS_TYPE is export = 0x828E;
constant GL_TEXTURE_IMAGE_FORMAT is export = 0x828F;
constant GL_TEXTURE_IMAGE_TYPE is export = 0x8290;
constant GL_GET_TEXTURE_IMAGE_FORMAT is export = 0x8291;
constant GL_GET_TEXTURE_IMAGE_TYPE is export = 0x8292;
constant GL_MIPMAP is export = 0x8293;
constant GL_MANUAL_GENERATE_MIPMAP is export = 0x8294;
constant GL_AUTO_GENERATE_MIPMAP is export = 0x8295;
constant GL_COLOR_ENCODING is export = 0x8296;
constant GL_SRGB_READ is export = 0x8297;
constant GL_SRGB_WRITE is export = 0x8298;
constant GL_FILTER is export = 0x829A;
constant GL_VERTEX_TEXTURE is export = 0x829B;
constant GL_TESS_CONTROL_TEXTURE is export = 0x829C;
constant GL_TESS_EVALUATION_TEXTURE is export = 0x829D;
constant GL_GEOMETRY_TEXTURE is export = 0x829E;
constant GL_FRAGMENT_TEXTURE is export = 0x829F;
constant GL_COMPUTE_TEXTURE is export = 0x82A0;
constant GL_TEXTURE_SHADOW is export = 0x82A1;
constant GL_TEXTURE_GATHER is export = 0x82A2;
constant GL_TEXTURE_GATHER_SHADOW is export = 0x82A3;
constant GL_SHADER_IMAGE_LOAD is export = 0x82A4;
constant GL_SHADER_IMAGE_STORE is export = 0x82A5;
constant GL_SHADER_IMAGE_ATOMIC is export = 0x82A6;
constant GL_IMAGE_TEXEL_SIZE is export = 0x82A7;
constant GL_IMAGE_COMPATIBILITY_CLASS is export = 0x82A8;
constant GL_IMAGE_PIXEL_FORMAT is export = 0x82A9;
constant GL_IMAGE_PIXEL_TYPE is export = 0x82AA;
constant GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST is export = 0x82AC;
constant GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST is export = 0x82AD;
constant GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE is export = 0x82AE;
constant GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE is export = 0x82AF;
constant GL_TEXTURE_COMPRESSED_BLOCK_WIDTH is export = 0x82B1;
constant GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT is export = 0x82B2;
constant GL_TEXTURE_COMPRESSED_BLOCK_SIZE is export = 0x82B3;
constant GL_CLEAR_BUFFER is export = 0x82B4;
constant GL_TEXTURE_VIEW is export = 0x82B5;
constant GL_VIEW_COMPATIBILITY_CLASS is export = 0x82B6;
constant GL_FULL_SUPPORT is export = 0x82B7;
constant GL_CAVEAT_SUPPORT is export = 0x82B8;
constant GL_IMAGE_CLASS_4_X_32 is export = 0x82B9;
constant GL_IMAGE_CLASS_2_X_32 is export = 0x82BA;
constant GL_IMAGE_CLASS_1_X_32 is export = 0x82BB;
constant GL_IMAGE_CLASS_4_X_16 is export = 0x82BC;
constant GL_IMAGE_CLASS_2_X_16 is export = 0x82BD;
constant GL_IMAGE_CLASS_1_X_16 is export = 0x82BE;
constant GL_IMAGE_CLASS_4_X_8 is export = 0x82BF;
constant GL_IMAGE_CLASS_2_X_8 is export = 0x82C0;
constant GL_IMAGE_CLASS_1_X_8 is export = 0x82C1;
constant GL_IMAGE_CLASS_11_11_10 is export = 0x82C2;
constant GL_IMAGE_CLASS_10_10_10_2 is export = 0x82C3;
constant GL_VIEW_CLASS_128_BITS is export = 0x82C4;
constant GL_VIEW_CLASS_96_BITS is export = 0x82C5;
constant GL_VIEW_CLASS_64_BITS is export = 0x82C6;
constant GL_VIEW_CLASS_48_BITS is export = 0x82C7;
constant GL_VIEW_CLASS_32_BITS is export = 0x82C8;
constant GL_VIEW_CLASS_24_BITS is export = 0x82C9;
constant GL_VIEW_CLASS_16_BITS is export = 0x82CA;
constant GL_VIEW_CLASS_8_BITS is export = 0x82CB;
constant GL_VIEW_CLASS_S3TC_DXT1_RGB is export = 0x82CC;
constant GL_VIEW_CLASS_S3TC_DXT1_RGBA is export = 0x82CD;
constant GL_VIEW_CLASS_S3TC_DXT3_RGBA is export = 0x82CE;
constant GL_VIEW_CLASS_S3TC_DXT5_RGBA is export = 0x82CF;
constant GL_VIEW_CLASS_RGTC1_RED is export = 0x82D0;
constant GL_VIEW_CLASS_RGTC2_RG is export = 0x82D1;
constant GL_VIEW_CLASS_BPTC_UNORM is export = 0x82D2;
constant GL_VIEW_CLASS_BPTC_FLOAT is export = 0x82D3;
constant GL_VERTEX_ATTRIB_BINDING is export = 0x82D4;
constant GL_VERTEX_ATTRIB_RELATIVE_OFFSET is export = 0x82D5;
constant GL_VERTEX_BINDING_DIVISOR is export = 0x82D6;
constant GL_VERTEX_BINDING_OFFSET is export = 0x82D7;
constant GL_VERTEX_BINDING_STRIDE is export = 0x82D8;
constant GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET is export = 0x82D9;
constant GL_MAX_VERTEX_ATTRIB_BINDINGS is export = 0x82DA;
constant GL_TEXTURE_VIEW_MIN_LEVEL is export = 0x82DB;
constant GL_TEXTURE_VIEW_NUM_LEVELS is export = 0x82DC;
constant GL_TEXTURE_VIEW_MIN_LAYER is export = 0x82DD;
constant GL_TEXTURE_VIEW_NUM_LAYERS is export = 0x82DE;
constant GL_TEXTURE_IMMUTABLE_LEVELS is export = 0x82DF;
constant GL_BUFFER is export = 0x82E0;
constant GL_SHADER is export = 0x82E1;
constant GL_PROGRAM is export = 0x82E2;
constant GL_QUERY is export = 0x82E3;
constant GL_PROGRAM_PIPELINE is export = 0x82E4;
constant GL_MAX_VERTEX_ATTRIB_STRIDE is export = 0x82E5;
constant GL_SAMPLER is export = 0x82E6;
constant GL_DISPLAY_LIST is export = 0x82E7;
constant GL_MAX_LABEL_LENGTH is export = 0x82E8;
constant GL_NUM_SHADING_LANGUAGE_VERSIONS is export = 0x82E9;
constant GL_QUERY_TARGET is export = 0x82EA;
constant GL_TRANSFORM_FEEDBACK_OVERFLOW is export = 0x82EC;
constant GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW is export = 0x82ED;
constant GL_VERTICES_SUBMITTED is export = 0x82EE;
constant GL_PRIMITIVES_SUBMITTED is export = 0x82EF;
constant GL_VERTEX_SHADER_INVOCATIONS is export = 0x82F0;
constant GL_TESS_CONTROL_SHADER_PATCHES is export = 0x82F1;
constant GL_TESS_EVALUATION_SHADER_INVOCATIONS is export = 0x82F2;
constant GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED is export = 0x82F3;
constant GL_FRAGMENT_SHADER_INVOCATIONS is export = 0x82F4;
constant GL_COMPUTE_SHADER_INVOCATIONS is export = 0x82F5;
constant GL_CLIPPING_INPUT_PRIMITIVES is export = 0x82F6;
constant GL_CLIPPING_OUTPUT_PRIMITIVES is export = 0x82F7;
constant GL_MAX_CULL_DISTANCES is export = 0x82F9;
constant GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES is export = 0x82FA;
constant GL_CONTEXT_RELEASE_BEHAVIOR is export = 0x82FB;
constant GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH is export = 0x82FC;
constant GL_UNSIGNED_BYTE_2_3_3_REV is export = 0x8362;
constant GL_UNSIGNED_SHORT_5_6_5 is export = 0x8363;
constant GL_UNSIGNED_SHORT_5_6_5_REV is export = 0x8364;
constant GL_UNSIGNED_SHORT_4_4_4_4_REV is export = 0x8365;
constant GL_UNSIGNED_SHORT_1_5_5_5_REV is export = 0x8366;
constant GL_UNSIGNED_INT_8_8_8_8_REV is export = 0x8367;
constant GL_UNSIGNED_INT_2_10_10_10_REV is export = 0x8368;
constant GL_MIRRORED_REPEAT is export = 0x8370;
constant GL_FOG_COORDINATE_SOURCE is export = 0x8450;
constant GL_FOG_COORD_SRC is export = 0x8450;
constant GL_FOG_COORDINATE is export = 0x8451;
constant GL_FOG_COORD is export = 0x8451;
constant GL_FRAGMENT_DEPTH is export = 0x8452;
constant GL_CURRENT_FOG_COORDINATE is export = 0x8453;
constant GL_CURRENT_FOG_COORD is export = 0x8453;
constant GL_FOG_COORDINATE_ARRAY_TYPE is export = 0x8454;
constant GL_FOG_COORD_ARRAY_TYPE is export = 0x8454;
constant GL_FOG_COORDINATE_ARRAY_STRIDE is export = 0x8455;
constant GL_FOG_COORD_ARRAY_STRIDE is export = 0x8455;
constant GL_FOG_COORDINATE_ARRAY_POINTER is export = 0x8456;
constant GL_FOG_COORD_ARRAY_POINTER is export = 0x8456;
constant GL_FOG_COORDINATE_ARRAY is export = 0x8457;
constant GL_FOG_COORD_ARRAY is export = 0x8457;
constant GL_COLOR_SUM is export = 0x8458;
constant GL_CURRENT_SECONDARY_COLOR is export = 0x8459;
constant GL_SECONDARY_COLOR_ARRAY_SIZE is export = 0x845A;
constant GL_SECONDARY_COLOR_ARRAY_TYPE is export = 0x845B;
constant GL_SECONDARY_COLOR_ARRAY_STRIDE is export = 0x845C;
constant GL_SECONDARY_COLOR_ARRAY_POINTER is export = 0x845D;
constant GL_SECONDARY_COLOR_ARRAY is export = 0x845E;
constant GL_CURRENT_RASTER_SECONDARY_COLOR is export = 0x845F;
constant GL_ALIASED_POINT_SIZE_RANGE is export = 0x846D;
constant GL_ALIASED_LINE_WIDTH_RANGE is export = 0x846E;
constant GL_TEXTURE0 is export = 0x84C0;
constant GL_TEXTURE1 is export = 0x84C1;
constant GL_TEXTURE2 is export = 0x84C2;
constant GL_TEXTURE3 is export = 0x84C3;
constant GL_TEXTURE4 is export = 0x84C4;
constant GL_TEXTURE5 is export = 0x84C5;
constant GL_TEXTURE6 is export = 0x84C6;
constant GL_TEXTURE7 is export = 0x84C7;
constant GL_TEXTURE8 is export = 0x84C8;
constant GL_TEXTURE9 is export = 0x84C9;
constant GL_TEXTURE10 is export = 0x84CA;
constant GL_TEXTURE11 is export = 0x84CB;
constant GL_TEXTURE12 is export = 0x84CC;
constant GL_TEXTURE13 is export = 0x84CD;
constant GL_TEXTURE14 is export = 0x84CE;
constant GL_TEXTURE15 is export = 0x84CF;
constant GL_TEXTURE16 is export = 0x84D0;
constant GL_TEXTURE17 is export = 0x84D1;
constant GL_TEXTURE18 is export = 0x84D2;
constant GL_TEXTURE19 is export = 0x84D3;
constant GL_TEXTURE20 is export = 0x84D4;
constant GL_TEXTURE21 is export = 0x84D5;
constant GL_TEXTURE22 is export = 0x84D6;
constant GL_TEXTURE23 is export = 0x84D7;
constant GL_TEXTURE24 is export = 0x84D8;
constant GL_TEXTURE25 is export = 0x84D9;
constant GL_TEXTURE26 is export = 0x84DA;
constant GL_TEXTURE27 is export = 0x84DB;
constant GL_TEXTURE28 is export = 0x84DC;
constant GL_TEXTURE29 is export = 0x84DD;
constant GL_TEXTURE30 is export = 0x84DE;
constant GL_TEXTURE31 is export = 0x84DF;
constant GL_ACTIVE_TEXTURE is export = 0x84E0;
constant GL_CLIENT_ACTIVE_TEXTURE is export = 0x84E1;
constant GL_MAX_TEXTURE_UNITS is export = 0x84E2;
constant GL_TRANSPOSE_MODELVIEW_MATRIX is export = 0x84E3;
constant GL_TRANSPOSE_PROJECTION_MATRIX is export = 0x84E4;
constant GL_TRANSPOSE_TEXTURE_MATRIX is export = 0x84E5;
constant GL_TRANSPOSE_COLOR_MATRIX is export = 0x84E6;
constant GL_SUBTRACT is export = 0x84E7;
constant GL_MAX_RENDERBUFFER_SIZE is export = 0x84E8;
constant GL_COMPRESSED_ALPHA is export = 0x84E9;
constant GL_COMPRESSED_LUMINANCE is export = 0x84EA;
constant GL_COMPRESSED_LUMINANCE_ALPHA is export = 0x84EB;
constant GL_COMPRESSED_INTENSITY is export = 0x84EC;
constant GL_COMPRESSED_RGB is export = 0x84ED;
constant GL_COMPRESSED_RGBA is export = 0x84EE;
constant GL_TEXTURE_COMPRESSION_HINT is export = 0x84EF;
constant GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER is export = 0x84F0;
constant GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER is export = 0x84F1;
constant GL_TEXTURE_RECTANGLE is export = 0x84F5;
constant GL_TEXTURE_BINDING_RECTANGLE is export = 0x84F6;
constant GL_PROXY_TEXTURE_RECTANGLE is export = 0x84F7;
constant GL_MAX_RECTANGLE_TEXTURE_SIZE is export = 0x84F8;
constant GL_DEPTH_STENCIL is export = 0x84F9;
constant GL_UNSIGNED_INT_24_8 is export = 0x84FA;
constant GL_MAX_TEXTURE_LOD_BIAS is export = 0x84FD;
constant GL_TEXTURE_MAX_ANISOTROPY is export = 0x84FE;
constant GL_MAX_TEXTURE_MAX_ANISOTROPY is export = 0x84FF;
constant GL_TEXTURE_FILTER_CONTROL is export = 0x8500;
constant GL_TEXTURE_LOD_BIAS is export = 0x8501;
constant GL_INCR_WRAP is export = 0x8507;
constant GL_DECR_WRAP is export = 0x8508;
constant GL_NORMAL_MAP is export = 0x8511;
constant GL_REFLECTION_MAP is export = 0x8512;
constant GL_TEXTURE_CUBE_MAP is export = 0x8513;
constant GL_TEXTURE_BINDING_CUBE_MAP is export = 0x8514;
constant GL_TEXTURE_CUBE_MAP_POSITIVE_X is export = 0x8515;
constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X is export = 0x8516;
constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y is export = 0x8517;
constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y is export = 0x8518;
constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z is export = 0x8519;
constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z is export = 0x851A;
constant GL_PROXY_TEXTURE_CUBE_MAP is export = 0x851B;
constant GL_MAX_CUBE_MAP_TEXTURE_SIZE is export = 0x851C;
constant GL_COMBINE is export = 0x8570;
constant GL_COMBINE_RGB is export = 0x8571;
constant GL_COMBINE_ALPHA is export = 0x8572;
constant GL_RGB_SCALE is export = 0x8573;
constant GL_ADD_SIGNED is export = 0x8574;
constant GL_INTERPOLATE is export = 0x8575;
constant GL_CONSTANT is export = 0x8576;
constant GL_PRIMARY_COLOR is export = 0x8577;
constant GL_PREVIOUS is export = 0x8578;
constant GL_SOURCE0_RGB is export = 0x8580;
constant GL_SRC0_RGB is export = 0x8580;
constant GL_SOURCE1_RGB is export = 0x8581;
constant GL_SRC1_RGB is export = 0x8581;
constant GL_SOURCE2_RGB is export = 0x8582;
constant GL_SRC2_RGB is export = 0x8582;
constant GL_SOURCE0_ALPHA is export = 0x8588;
constant GL_SRC0_ALPHA is export = 0x8588;
constant GL_SOURCE1_ALPHA is export = 0x8589;
constant GL_SRC1_ALPHA is export = 0x8589;
constant GL_SOURCE2_ALPHA is export = 0x858A;
constant GL_SRC2_ALPHA is export = 0x858A;
constant GL_OPERAND0_RGB is export = 0x8590;
constant GL_OPERAND1_RGB is export = 0x8591;
constant GL_OPERAND2_RGB is export = 0x8592;
constant GL_OPERAND0_ALPHA is export = 0x8598;
constant GL_OPERAND1_ALPHA is export = 0x8599;
constant GL_OPERAND2_ALPHA is export = 0x859A;
constant GL_VERTEX_ARRAY_BINDING is export = 0x85B5;
constant GL_VERTEX_ATTRIB_ARRAY_ENABLED is export = 0x8622;
constant GL_VERTEX_ATTRIB_ARRAY_SIZE is export = 0x8623;
constant GL_VERTEX_ATTRIB_ARRAY_STRIDE is export = 0x8624;
constant GL_VERTEX_ATTRIB_ARRAY_TYPE is export = 0x8625;
constant GL_CURRENT_VERTEX_ATTRIB is export = 0x8626;
constant GL_VERTEX_PROGRAM_POINT_SIZE is export = 0x8642;
constant GL_PROGRAM_POINT_SIZE is export = 0x8642;
constant GL_VERTEX_PROGRAM_TWO_SIDE is export = 0x8643;
constant GL_VERTEX_ATTRIB_ARRAY_POINTER is export = 0x8645;
constant GL_DEPTH_CLAMP is export = 0x864F;
constant GL_TEXTURE_COMPRESSED_IMAGE_SIZE is export = 0x86A0;
constant GL_TEXTURE_COMPRESSED is export = 0x86A1;
constant GL_NUM_COMPRESSED_TEXTURE_FORMATS is export = 0x86A2;
constant GL_COMPRESSED_TEXTURE_FORMATS is export = 0x86A3;
constant GL_DOT3_RGB is export = 0x86AE;
constant GL_DOT3_RGBA is export = 0x86AF;
constant GL_PROGRAM_BINARY_LENGTH is export = 0x8741;
constant GL_MIRROR_CLAMP_TO_EDGE is export = 0x8743;
constant GL_VERTEX_ATTRIB_ARRAY_LONG is export = 0x874E;
constant GL_BUFFER_SIZE is export = 0x8764;
constant GL_BUFFER_USAGE is export = 0x8765;
constant GL_NUM_PROGRAM_BINARY_FORMATS is export = 0x87FE;
constant GL_PROGRAM_BINARY_FORMATS is export = 0x87FF;
constant GL_STENCIL_BACK_FUNC is export = 0x8800;
constant GL_STENCIL_BACK_FAIL is export = 0x8801;
constant GL_STENCIL_BACK_PASS_DEPTH_FAIL is export = 0x8802;
constant GL_STENCIL_BACK_PASS_DEPTH_PASS is export = 0x8803;
constant GL_RGBA32F is export = 0x8814;
constant GL_RGB32F is export = 0x8815;
constant GL_RGBA16F is export = 0x881A;
constant GL_RGB16F is export = 0x881B;
constant GL_MAX_DRAW_BUFFERS is export = 0x8824;
constant GL_DRAW_BUFFER0 is export = 0x8825;
constant GL_DRAW_BUFFER1 is export = 0x8826;
constant GL_DRAW_BUFFER2 is export = 0x8827;
constant GL_DRAW_BUFFER3 is export = 0x8828;
constant GL_DRAW_BUFFER4 is export = 0x8829;
constant GL_DRAW_BUFFER5 is export = 0x882A;
constant GL_DRAW_BUFFER6 is export = 0x882B;
constant GL_DRAW_BUFFER7 is export = 0x882C;
constant GL_DRAW_BUFFER8 is export = 0x882D;
constant GL_DRAW_BUFFER9 is export = 0x882E;
constant GL_DRAW_BUFFER10 is export = 0x882F;
constant GL_DRAW_BUFFER11 is export = 0x8830;
constant GL_DRAW_BUFFER12 is export = 0x8831;
constant GL_DRAW_BUFFER13 is export = 0x8832;
constant GL_DRAW_BUFFER14 is export = 0x8833;
constant GL_DRAW_BUFFER15 is export = 0x8834;
constant GL_BLEND_EQUATION_ALPHA is export = 0x883D;
constant GL_TEXTURE_DEPTH_SIZE is export = 0x884A;
constant GL_DEPTH_TEXTURE_MODE is export = 0x884B;
constant GL_TEXTURE_COMPARE_MODE is export = 0x884C;
constant GL_TEXTURE_COMPARE_FUNC is export = 0x884D;
constant GL_COMPARE_R_TO_TEXTURE is export = 0x884E;
constant GL_COMPARE_REF_TO_TEXTURE is export = 0x884E;
constant GL_TEXTURE_CUBE_MAP_SEAMLESS is export = 0x884F;
constant GL_POINT_SPRITE is export = 0x8861;
constant GL_COORD_REPLACE is export = 0x8862;
constant GL_QUERY_COUNTER_BITS is export = 0x8864;
constant GL_CURRENT_QUERY is export = 0x8865;
constant GL_QUERY_RESULT is export = 0x8866;
constant GL_QUERY_RESULT_AVAILABLE is export = 0x8867;
constant GL_MAX_VERTEX_ATTRIBS is export = 0x8869;
constant GL_VERTEX_ATTRIB_ARRAY_NORMALIZED is export = 0x886A;
constant GL_MAX_TESS_CONTROL_INPUT_COMPONENTS is export = 0x886C;
constant GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS is export = 0x886D;
constant GL_MAX_TEXTURE_COORDS is export = 0x8871;
constant GL_MAX_TEXTURE_IMAGE_UNITS is export = 0x8872;
constant GL_GEOMETRY_SHADER_INVOCATIONS is export = 0x887F;
constant GL_ARRAY_BUFFER is export = 0x8892;
constant GL_ELEMENT_ARRAY_BUFFER is export = 0x8893;
constant GL_ARRAY_BUFFER_BINDING is export = 0x8894;
constant GL_ELEMENT_ARRAY_BUFFER_BINDING is export = 0x8895;
constant GL_VERTEX_ARRAY_BUFFER_BINDING is export = 0x8896;
constant GL_NORMAL_ARRAY_BUFFER_BINDING is export = 0x8897;
constant GL_COLOR_ARRAY_BUFFER_BINDING is export = 0x8898;
constant GL_INDEX_ARRAY_BUFFER_BINDING is export = 0x8899;
constant GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING is export = 0x889A;
constant GL_EDGE_FLAG_ARRAY_BUFFER_BINDING is export = 0x889B;
constant GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING is export = 0x889C;
constant GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING is export = 0x889D;
constant GL_FOG_COORD_ARRAY_BUFFER_BINDING is export = 0x889D;
constant GL_WEIGHT_ARRAY_BUFFER_BINDING is export = 0x889E;
constant GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING is export = 0x889F;
constant GL_READ_ONLY is export = 0x88B8;
constant GL_WRITE_ONLY is export = 0x88B9;
constant GL_READ_WRITE is export = 0x88BA;
constant GL_BUFFER_ACCESS is export = 0x88BB;
constant GL_BUFFER_MAPPED is export = 0x88BC;
constant GL_BUFFER_MAP_POINTER is export = 0x88BD;
constant GL_TIME_ELAPSED is export = 0x88BF;
constant GL_STREAM_DRAW is export = 0x88E0;
constant GL_STREAM_READ is export = 0x88E1;
constant GL_STREAM_COPY is export = 0x88E2;
constant GL_STATIC_DRAW is export = 0x88E4;
constant GL_STATIC_READ is export = 0x88E5;
constant GL_STATIC_COPY is export = 0x88E6;
constant GL_DYNAMIC_DRAW is export = 0x88E8;
constant GL_DYNAMIC_READ is export = 0x88E9;
constant GL_DYNAMIC_COPY is export = 0x88EA;
constant GL_PIXEL_PACK_BUFFER is export = 0x88EB;
constant GL_PIXEL_UNPACK_BUFFER is export = 0x88EC;
constant GL_PIXEL_PACK_BUFFER_BINDING is export = 0x88ED;
constant GL_PIXEL_UNPACK_BUFFER_BINDING is export = 0x88EF;
constant GL_DEPTH24_STENCIL8 is export = 0x88F0;
constant GL_TEXTURE_STENCIL_SIZE is export = 0x88F1;
constant GL_SRC1_COLOR is export = 0x88F9;
constant GL_ONE_MINUS_SRC1_COLOR is export = 0x88FA;
constant GL_ONE_MINUS_SRC1_ALPHA is export = 0x88FB;
constant GL_MAX_DUAL_SOURCE_DRAW_BUFFERS is export = 0x88FC;
constant GL_VERTEX_ATTRIB_ARRAY_INTEGER is export = 0x88FD;
constant GL_VERTEX_ATTRIB_ARRAY_DIVISOR is export = 0x88FE;
constant GL_MAX_ARRAY_TEXTURE_LAYERS is export = 0x88FF;
constant GL_MIN_PROGRAM_TEXEL_OFFSET is export = 0x8904;
constant GL_MAX_PROGRAM_TEXEL_OFFSET is export = 0x8905;
constant GL_SAMPLES_PASSED is export = 0x8914;
constant GL_GEOMETRY_VERTICES_OUT is export = 0x8916;
constant GL_GEOMETRY_INPUT_TYPE is export = 0x8917;
constant GL_GEOMETRY_OUTPUT_TYPE is export = 0x8918;
constant GL_SAMPLER_BINDING is export = 0x8919;
constant GL_CLAMP_VERTEX_COLOR is export = 0x891A;
constant GL_CLAMP_FRAGMENT_COLOR is export = 0x891B;
constant GL_CLAMP_READ_COLOR is export = 0x891C;
constant GL_FIXED_ONLY is export = 0x891D;
constant GL_UNIFORM_BUFFER is export = 0x8A11;
constant GL_UNIFORM_BUFFER_BINDING is export = 0x8A28;
constant GL_UNIFORM_BUFFER_START is export = 0x8A29;
constant GL_UNIFORM_BUFFER_SIZE is export = 0x8A2A;
constant GL_MAX_VERTEX_UNIFORM_BLOCKS is export = 0x8A2B;
constant GL_MAX_GEOMETRY_UNIFORM_BLOCKS is export = 0x8A2C;
constant GL_MAX_FRAGMENT_UNIFORM_BLOCKS is export = 0x8A2D;
constant GL_MAX_COMBINED_UNIFORM_BLOCKS is export = 0x8A2E;
constant GL_MAX_UNIFORM_BUFFER_BINDINGS is export = 0x8A2F;
constant GL_MAX_UNIFORM_BLOCK_SIZE is export = 0x8A30;
constant GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS is export = 0x8A31;
constant GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS is export = 0x8A32;
constant GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS is export = 0x8A33;
constant GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT is export = 0x8A34;
constant GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH is export = 0x8A35;
constant GL_ACTIVE_UNIFORM_BLOCKS is export = 0x8A36;
constant GL_UNIFORM_TYPE is export = 0x8A37;
constant GL_UNIFORM_SIZE is export = 0x8A38;
constant GL_UNIFORM_NAME_LENGTH is export = 0x8A39;
constant GL_UNIFORM_BLOCK_INDEX is export = 0x8A3A;
constant GL_UNIFORM_OFFSET is export = 0x8A3B;
constant GL_UNIFORM_ARRAY_STRIDE is export = 0x8A3C;
constant GL_UNIFORM_MATRIX_STRIDE is export = 0x8A3D;
constant GL_UNIFORM_IS_ROW_MAJOR is export = 0x8A3E;
constant GL_UNIFORM_BLOCK_BINDING is export = 0x8A3F;
constant GL_UNIFORM_BLOCK_DATA_SIZE is export = 0x8A40;
constant GL_UNIFORM_BLOCK_NAME_LENGTH is export = 0x8A41;
constant GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS is export = 0x8A42;
constant GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES is export = 0x8A43;
constant GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER is export = 0x8A44;
constant GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER is export = 0x8A45;
constant GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER is export = 0x8A46;
constant GL_FRAGMENT_SHADER is export = 0x8B30;
constant GL_VERTEX_SHADER is export = 0x8B31;
constant GL_MAX_FRAGMENT_UNIFORM_COMPONENTS is export = 0x8B49;
constant GL_MAX_VERTEX_UNIFORM_COMPONENTS is export = 0x8B4A;
constant GL_MAX_VARYING_FLOATS is export = 0x8B4B;
constant GL_MAX_VARYING_COMPONENTS is export = 0x8B4B;
constant GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS is export = 0x8B4C;
constant GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS is export = 0x8B4D;
constant GL_SHADER_TYPE is export = 0x8B4F;
constant GL_FLOAT_VEC2 is export = 0x8B50;
constant GL_FLOAT_VEC3 is export = 0x8B51;
constant GL_FLOAT_VEC4 is export = 0x8B52;
constant GL_INT_VEC2 is export = 0x8B53;
constant GL_INT_VEC3 is export = 0x8B54;
constant GL_INT_VEC4 is export = 0x8B55;
constant GL_BOOL is export = 0x8B56;
constant GL_BOOL_VEC2 is export = 0x8B57;
constant GL_BOOL_VEC3 is export = 0x8B58;
constant GL_BOOL_VEC4 is export = 0x8B59;
constant GL_FLOAT_MAT2 is export = 0x8B5A;
constant GL_FLOAT_MAT3 is export = 0x8B5B;
constant GL_FLOAT_MAT4 is export = 0x8B5C;
constant GL_SAMPLER_1D is export = 0x8B5D;
constant GL_SAMPLER_2D is export = 0x8B5E;
constant GL_SAMPLER_3D is export = 0x8B5F;
constant GL_SAMPLER_CUBE is export = 0x8B60;
constant GL_SAMPLER_1D_SHADOW is export = 0x8B61;
constant GL_SAMPLER_2D_SHADOW is export = 0x8B62;
constant GL_SAMPLER_2D_RECT is export = 0x8B63;
constant GL_SAMPLER_2D_RECT_SHADOW is export = 0x8B64;
constant GL_FLOAT_MAT2x3 is export = 0x8B65;
constant GL_FLOAT_MAT2x4 is export = 0x8B66;
constant GL_FLOAT_MAT3x2 is export = 0x8B67;
constant GL_FLOAT_MAT3x4 is export = 0x8B68;
constant GL_FLOAT_MAT4x2 is export = 0x8B69;
constant GL_FLOAT_MAT4x3 is export = 0x8B6A;
constant GL_DELETE_STATUS is export = 0x8B80;
constant GL_COMPILE_STATUS is export = 0x8B81;
constant GL_LINK_STATUS is export = 0x8B82;
constant GL_VALIDATE_STATUS is export = 0x8B83;
constant GL_INFO_LOG_LENGTH is export = 0x8B84;
constant GL_ATTACHED_SHADERS is export = 0x8B85;
constant GL_ACTIVE_UNIFORMS is export = 0x8B86;
constant GL_ACTIVE_UNIFORM_MAX_LENGTH is export = 0x8B87;
constant GL_SHADER_SOURCE_LENGTH is export = 0x8B88;
constant GL_ACTIVE_ATTRIBUTES is export = 0x8B89;
constant GL_ACTIVE_ATTRIBUTE_MAX_LENGTH is export = 0x8B8A;
constant GL_FRAGMENT_SHADER_DERIVATIVE_HINT is export = 0x8B8B;
constant GL_SHADING_LANGUAGE_VERSION is export = 0x8B8C;
constant GL_CURRENT_PROGRAM is export = 0x8B8D;
constant GL_IMPLEMENTATION_COLOR_READ_TYPE is export = 0x8B9A;
constant GL_IMPLEMENTATION_COLOR_READ_FORMAT is export = 0x8B9B;
constant GL_TEXTURE_RED_TYPE is export = 0x8C10;
constant GL_TEXTURE_GREEN_TYPE is export = 0x8C11;
constant GL_TEXTURE_BLUE_TYPE is export = 0x8C12;
constant GL_TEXTURE_ALPHA_TYPE is export = 0x8C13;
constant GL_TEXTURE_LUMINANCE_TYPE is export = 0x8C14;
constant GL_TEXTURE_INTENSITY_TYPE is export = 0x8C15;
constant GL_TEXTURE_DEPTH_TYPE is export = 0x8C16;
constant GL_UNSIGNED_NORMALIZED is export = 0x8C17;
constant GL_TEXTURE_1D_ARRAY is export = 0x8C18;
constant GL_PROXY_TEXTURE_1D_ARRAY is export = 0x8C19;
constant GL_TEXTURE_2D_ARRAY is export = 0x8C1A;
constant GL_PROXY_TEXTURE_2D_ARRAY is export = 0x8C1B;
constant GL_TEXTURE_BINDING_1D_ARRAY is export = 0x8C1C;
constant GL_TEXTURE_BINDING_2D_ARRAY is export = 0x8C1D;
constant GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS is export = 0x8C29;
constant GL_TEXTURE_BUFFER is export = 0x8C2A;
constant GL_TEXTURE_BUFFER_BINDING is export = 0x8C2A;
constant GL_MAX_TEXTURE_BUFFER_SIZE is export = 0x8C2B;
constant GL_TEXTURE_BINDING_BUFFER is export = 0x8C2C;
constant GL_TEXTURE_BUFFER_DATA_STORE_BINDING is export = 0x8C2D;
constant GL_ANY_SAMPLES_PASSED is export = 0x8C2F;
constant GL_SAMPLE_SHADING is export = 0x8C36;
constant GL_MIN_SAMPLE_SHADING_VALUE is export = 0x8C37;
constant GL_R11F_G11F_B10F is export = 0x8C3A;
constant GL_UNSIGNED_INT_10F_11F_11F_REV is export = 0x8C3B;
constant GL_RGB9_E5 is export = 0x8C3D;
constant GL_UNSIGNED_INT_5_9_9_9_REV is export = 0x8C3E;
constant GL_TEXTURE_SHARED_SIZE is export = 0x8C3F;
constant GL_SRGB is export = 0x8C40;
constant GL_SRGB8 is export = 0x8C41;
constant GL_SRGB_ALPHA is export = 0x8C42;
constant GL_SRGB8_ALPHA8 is export = 0x8C43;
constant GL_SLUMINANCE_ALPHA is export = 0x8C44;
constant GL_SLUMINANCE8_ALPHA8 is export = 0x8C45;
constant GL_SLUMINANCE is export = 0x8C46;
constant GL_SLUMINANCE8 is export = 0x8C47;
constant GL_COMPRESSED_SRGB is export = 0x8C48;
constant GL_COMPRESSED_SRGB_ALPHA is export = 0x8C49;
constant GL_COMPRESSED_SLUMINANCE is export = 0x8C4A;
constant GL_COMPRESSED_SLUMINANCE_ALPHA is export = 0x8C4B;
constant GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH is export = 0x8C76;
constant GL_TRANSFORM_FEEDBACK_BUFFER_MODE is export = 0x8C7F;
constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS is export = 0x8C80;
constant GL_TRANSFORM_FEEDBACK_VARYINGS is export = 0x8C83;
constant GL_TRANSFORM_FEEDBACK_BUFFER_START is export = 0x8C84;
constant GL_TRANSFORM_FEEDBACK_BUFFER_SIZE is export = 0x8C85;
constant GL_PRIMITIVES_GENERATED is export = 0x8C87;
constant GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN is export = 0x8C88;
constant GL_RASTERIZER_DISCARD is export = 0x8C89;
constant GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS is export = 0x8C8A;
constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS is export = 0x8C8B;
constant GL_INTERLEAVED_ATTRIBS is export = 0x8C8C;
constant GL_SEPARATE_ATTRIBS is export = 0x8C8D;
constant GL_TRANSFORM_FEEDBACK_BUFFER is export = 0x8C8E;
constant GL_TRANSFORM_FEEDBACK_BUFFER_BINDING is export = 0x8C8F;
constant GL_POINT_SPRITE_COORD_ORIGIN is export = 0x8CA0;
constant GL_LOWER_LEFT is export = 0x8CA1;
constant GL_UPPER_LEFT is export = 0x8CA2;
constant GL_STENCIL_BACK_REF is export = 0x8CA3;
constant GL_STENCIL_BACK_VALUE_MASK is export = 0x8CA4;
constant GL_STENCIL_BACK_WRITEMASK is export = 0x8CA5;
constant GL_DRAW_FRAMEBUFFER_BINDING is export = 0x8CA6;
constant GL_FRAMEBUFFER_BINDING is export = 0x8CA6;
constant GL_RENDERBUFFER_BINDING is export = 0x8CA7;
constant GL_READ_FRAMEBUFFER is export = 0x8CA8;
constant GL_DRAW_FRAMEBUFFER is export = 0x8CA9;
constant GL_READ_FRAMEBUFFER_BINDING is export = 0x8CAA;
constant GL_RENDERBUFFER_SAMPLES is export = 0x8CAB;
constant GL_DEPTH_COMPONENT32F is export = 0x8CAC;
constant GL_DEPTH32F_STENCIL8 is export = 0x8CAD;
constant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is export = 0x8CD0;
constant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME is export = 0x8CD1;
constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL is export = 0x8CD2;
constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE is export = 0x8CD3;
constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER is export = 0x8CD4;
constant GL_FRAMEBUFFER_COMPLETE is export = 0x8CD5;
constant GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT is export = 0x8CD6;
constant GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT is export = 0x8CD7;
constant GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER is export = 0x8CDB;
constant GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER is export = 0x8CDC;
constant GL_FRAMEBUFFER_UNSUPPORTED is export = 0x8CDD;
constant GL_MAX_COLOR_ATTACHMENTS is export = 0x8CDF;
constant GL_COLOR_ATTACHMENT0 is export = 0x8CE0;
constant GL_COLOR_ATTACHMENT1 is export = 0x8CE1;
constant GL_COLOR_ATTACHMENT2 is export = 0x8CE2;
constant GL_COLOR_ATTACHMENT3 is export = 0x8CE3;
constant GL_COLOR_ATTACHMENT4 is export = 0x8CE4;
constant GL_COLOR_ATTACHMENT5 is export = 0x8CE5;
constant GL_COLOR_ATTACHMENT6 is export = 0x8CE6;
constant GL_COLOR_ATTACHMENT7 is export = 0x8CE7;
constant GL_COLOR_ATTACHMENT8 is export = 0x8CE8;
constant GL_COLOR_ATTACHMENT9 is export = 0x8CE9;
constant GL_COLOR_ATTACHMENT10 is export = 0x8CEA;
constant GL_COLOR_ATTACHMENT11 is export = 0x8CEB;
constant GL_COLOR_ATTACHMENT12 is export = 0x8CEC;
constant GL_COLOR_ATTACHMENT13 is export = 0x8CED;
constant GL_COLOR_ATTACHMENT14 is export = 0x8CEE;
constant GL_COLOR_ATTACHMENT15 is export = 0x8CEF;
constant GL_COLOR_ATTACHMENT16 is export = 0x8CF0;
constant GL_COLOR_ATTACHMENT17 is export = 0x8CF1;
constant GL_COLOR_ATTACHMENT18 is export = 0x8CF2;
constant GL_COLOR_ATTACHMENT19 is export = 0x8CF3;
constant GL_COLOR_ATTACHMENT20 is export = 0x8CF4;
constant GL_COLOR_ATTACHMENT21 is export = 0x8CF5;
constant GL_COLOR_ATTACHMENT22 is export = 0x8CF6;
constant GL_COLOR_ATTACHMENT23 is export = 0x8CF7;
constant GL_COLOR_ATTACHMENT24 is export = 0x8CF8;
constant GL_COLOR_ATTACHMENT25 is export = 0x8CF9;
constant GL_COLOR_ATTACHMENT26 is export = 0x8CFA;
constant GL_COLOR_ATTACHMENT27 is export = 0x8CFB;
constant GL_COLOR_ATTACHMENT28 is export = 0x8CFC;
constant GL_COLOR_ATTACHMENT29 is export = 0x8CFD;
constant GL_COLOR_ATTACHMENT30 is export = 0x8CFE;
constant GL_COLOR_ATTACHMENT31 is export = 0x8CFF;
constant GL_DEPTH_ATTACHMENT is export = 0x8D00;
constant GL_STENCIL_ATTACHMENT is export = 0x8D20;
constant GL_FRAMEBUFFER is export = 0x8D40;
constant GL_RENDERBUFFER is export = 0x8D41;
constant GL_RENDERBUFFER_WIDTH is export = 0x8D42;
constant GL_RENDERBUFFER_HEIGHT is export = 0x8D43;
constant GL_RENDERBUFFER_INTERNAL_FORMAT is export = 0x8D44;
constant GL_STENCIL_INDEX1 is export = 0x8D46;
constant GL_STENCIL_INDEX4 is export = 0x8D47;
constant GL_STENCIL_INDEX8 is export = 0x8D48;
constant GL_STENCIL_INDEX16 is export = 0x8D49;
constant GL_RENDERBUFFER_RED_SIZE is export = 0x8D50;
constant GL_RENDERBUFFER_GREEN_SIZE is export = 0x8D51;
constant GL_RENDERBUFFER_BLUE_SIZE is export = 0x8D52;
constant GL_RENDERBUFFER_ALPHA_SIZE is export = 0x8D53;
constant GL_RENDERBUFFER_DEPTH_SIZE is export = 0x8D54;
constant GL_RENDERBUFFER_STENCIL_SIZE is export = 0x8D55;
constant GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE is export = 0x8D56;
constant GL_MAX_SAMPLES is export = 0x8D57;
constant GL_RGB565 is export = 0x8D62;
constant GL_PRIMITIVE_RESTART_FIXED_INDEX is export = 0x8D69;
constant GL_ANY_SAMPLES_PASSED_CONSERVATIVE is export = 0x8D6A;
constant GL_MAX_ELEMENT_INDEX is export = 0x8D6B;
constant GL_RGBA32UI is export = 0x8D70;
constant GL_RGB32UI is export = 0x8D71;
constant GL_RGBA16UI is export = 0x8D76;
constant GL_RGB16UI is export = 0x8D77;
constant GL_RGBA8UI is export = 0x8D7C;
constant GL_RGB8UI is export = 0x8D7D;
constant GL_RGBA32I is export = 0x8D82;
constant GL_RGB32I is export = 0x8D83;
constant GL_RGBA16I is export = 0x8D88;
constant GL_RGB16I is export = 0x8D89;
constant GL_RGBA8I is export = 0x8D8E;
constant GL_RGB8I is export = 0x8D8F;
constant GL_RED_INTEGER is export = 0x8D94;
constant GL_GREEN_INTEGER is export = 0x8D95;
constant GL_BLUE_INTEGER is export = 0x8D96;
constant GL_ALPHA_INTEGER is export = 0x8D97;
constant GL_RGB_INTEGER is export = 0x8D98;
constant GL_RGBA_INTEGER is export = 0x8D99;
constant GL_BGR_INTEGER is export = 0x8D9A;
constant GL_BGRA_INTEGER is export = 0x8D9B;
constant GL_INT_2_10_10_10_REV is export = 0x8D9F;
constant GL_FRAMEBUFFER_ATTACHMENT_LAYERED is export = 0x8DA7;
constant GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS is export = 0x8DA8;
constant GL_FLOAT_32_UNSIGNED_INT_24_8_REV is export = 0x8DAD;
constant GL_FRAMEBUFFER_SRGB is export = 0x8DB9;
constant GL_COMPRESSED_RED_RGTC1 is export = 0x8DBB;
constant GL_COMPRESSED_SIGNED_RED_RGTC1 is export = 0x8DBC;
constant GL_COMPRESSED_RG_RGTC2 is export = 0x8DBD;
constant GL_COMPRESSED_SIGNED_RG_RGTC2 is export = 0x8DBE;
constant GL_SAMPLER_1D_ARRAY is export = 0x8DC0;
constant GL_SAMPLER_2D_ARRAY is export = 0x8DC1;
constant GL_SAMPLER_BUFFER is export = 0x8DC2;
constant GL_SAMPLER_1D_ARRAY_SHADOW is export = 0x8DC3;
constant GL_SAMPLER_2D_ARRAY_SHADOW is export = 0x8DC4;
constant GL_SAMPLER_CUBE_SHADOW is export = 0x8DC5;
constant GL_UNSIGNED_INT_VEC2 is export = 0x8DC6;
constant GL_UNSIGNED_INT_VEC3 is export = 0x8DC7;
constant GL_UNSIGNED_INT_VEC4 is export = 0x8DC8;
constant GL_INT_SAMPLER_1D is export = 0x8DC9;
constant GL_INT_SAMPLER_2D is export = 0x8DCA;
constant GL_INT_SAMPLER_3D is export = 0x8DCB;
constant GL_INT_SAMPLER_CUBE is export = 0x8DCC;
constant GL_INT_SAMPLER_2D_RECT is export = 0x8DCD;
constant GL_INT_SAMPLER_1D_ARRAY is export = 0x8DCE;
constant GL_INT_SAMPLER_2D_ARRAY is export = 0x8DCF;
constant GL_INT_SAMPLER_BUFFER is export = 0x8DD0;
constant GL_UNSIGNED_INT_SAMPLER_1D is export = 0x8DD1;
constant GL_UNSIGNED_INT_SAMPLER_2D is export = 0x8DD2;
constant GL_UNSIGNED_INT_SAMPLER_3D is export = 0x8DD3;
constant GL_UNSIGNED_INT_SAMPLER_CUBE is export = 0x8DD4;
constant GL_UNSIGNED_INT_SAMPLER_2D_RECT is export = 0x8DD5;
constant GL_UNSIGNED_INT_SAMPLER_1D_ARRAY is export = 0x8DD6;
constant GL_UNSIGNED_INT_SAMPLER_2D_ARRAY is export = 0x8DD7;
constant GL_UNSIGNED_INT_SAMPLER_BUFFER is export = 0x8DD8;
constant GL_GEOMETRY_SHADER is export = 0x8DD9;
constant GL_MAX_GEOMETRY_UNIFORM_COMPONENTS is export = 0x8DDF;
constant GL_MAX_GEOMETRY_OUTPUT_VERTICES is export = 0x8DE0;
constant GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS is export = 0x8DE1;
constant GL_ACTIVE_SUBROUTINES is export = 0x8DE5;
constant GL_ACTIVE_SUBROUTINE_UNIFORMS is export = 0x8DE6;
constant GL_MAX_SUBROUTINES is export = 0x8DE7;
constant GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS is export = 0x8DE8;
constant GL_LOW_FLOAT is export = 0x8DF0;
constant GL_MEDIUM_FLOAT is export = 0x8DF1;
constant GL_HIGH_FLOAT is export = 0x8DF2;
constant GL_LOW_INT is export = 0x8DF3;
constant GL_MEDIUM_INT is export = 0x8DF4;
constant GL_HIGH_INT is export = 0x8DF5;
constant GL_SHADER_BINARY_FORMATS is export = 0x8DF8;
constant GL_NUM_SHADER_BINARY_FORMATS is export = 0x8DF9;
constant GL_SHADER_COMPILER is export = 0x8DFA;
constant GL_MAX_VERTEX_UNIFORM_VECTORS is export = 0x8DFB;
constant GL_MAX_VARYING_VECTORS is export = 0x8DFC;
constant GL_MAX_FRAGMENT_UNIFORM_VECTORS is export = 0x8DFD;
constant GL_QUERY_WAIT is export = 0x8E13;
constant GL_QUERY_NO_WAIT is export = 0x8E14;
constant GL_QUERY_BY_REGION_WAIT is export = 0x8E15;
constant GL_QUERY_BY_REGION_NO_WAIT is export = 0x8E16;
constant GL_QUERY_WAIT_INVERTED is export = 0x8E17;
constant GL_QUERY_NO_WAIT_INVERTED is export = 0x8E18;
constant GL_QUERY_BY_REGION_WAIT_INVERTED is export = 0x8E19;
constant GL_QUERY_BY_REGION_NO_WAIT_INVERTED is export = 0x8E1A;
constant GL_POLYGON_OFFSET_CLAMP is export = 0x8E1B;
constant GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS is export = 0x8E1E;
constant GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS is export = 0x8E1F;
constant GL_TRANSFORM_FEEDBACK is export = 0x8E22;
constant GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED is export = 0x8E23;
constant GL_TRANSFORM_FEEDBACK_PAUSED is export = 0x8E23;
constant GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE is export = 0x8E24;
constant GL_TRANSFORM_FEEDBACK_ACTIVE is export = 0x8E24;
constant GL_TRANSFORM_FEEDBACK_BINDING is export = 0x8E25;
constant GL_TIMESTAMP is export = 0x8E28;
constant GL_TEXTURE_SWIZZLE_R is export = 0x8E42;
constant GL_TEXTURE_SWIZZLE_G is export = 0x8E43;
constant GL_TEXTURE_SWIZZLE_B is export = 0x8E44;
constant GL_TEXTURE_SWIZZLE_A is export = 0x8E45;
constant GL_TEXTURE_SWIZZLE_RGBA is export = 0x8E46;
constant GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS is export = 0x8E47;
constant GL_ACTIVE_SUBROUTINE_MAX_LENGTH is export = 0x8E48;
constant GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH is export = 0x8E49;
constant GL_NUM_COMPATIBLE_SUBROUTINES is export = 0x8E4A;
constant GL_COMPATIBLE_SUBROUTINES is export = 0x8E4B;
constant GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION is export = 0x8E4C;
constant GL_FIRST_VERTEX_CONVENTION is export = 0x8E4D;
constant GL_LAST_VERTEX_CONVENTION is export = 0x8E4E;
constant GL_PROVOKING_VERTEX is export = 0x8E4F;
constant GL_SAMPLE_POSITION is export = 0x8E50;
constant GL_SAMPLE_MASK is export = 0x8E51;
constant GL_SAMPLE_MASK_VALUE is export = 0x8E52;
constant GL_MAX_SAMPLE_MASK_WORDS is export = 0x8E59;
constant GL_MAX_GEOMETRY_SHADER_INVOCATIONS is export = 0x8E5A;
constant GL_MIN_FRAGMENT_INTERPOLATION_OFFSET is export = 0x8E5B;
constant GL_MAX_FRAGMENT_INTERPOLATION_OFFSET is export = 0x8E5C;
constant GL_FRAGMENT_INTERPOLATION_OFFSET_BITS is export = 0x8E5D;
constant GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET is export = 0x8E5E;
constant GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET is export = 0x8E5F;
constant GL_MAX_TRANSFORM_FEEDBACK_BUFFERS is export = 0x8E70;
constant GL_MAX_VERTEX_STREAMS is export = 0x8E71;
constant GL_PATCH_VERTICES is export = 0x8E72;
constant GL_PATCH_DEFAULT_INNER_LEVEL is export = 0x8E73;
constant GL_PATCH_DEFAULT_OUTER_LEVEL is export = 0x8E74;
constant GL_TESS_CONTROL_OUTPUT_VERTICES is export = 0x8E75;
constant GL_TESS_GEN_MODE is export = 0x8E76;
constant GL_TESS_GEN_SPACING is export = 0x8E77;
constant GL_TESS_GEN_VERTEX_ORDER is export = 0x8E78;
constant GL_TESS_GEN_POINT_MODE is export = 0x8E79;
constant GL_ISOLINES is export = 0x8E7A;
constant GL_FRACTIONAL_ODD is export = 0x8E7B;
constant GL_FRACTIONAL_EVEN is export = 0x8E7C;
constant GL_MAX_PATCH_VERTICES is export = 0x8E7D;
constant GL_MAX_TESS_GEN_LEVEL is export = 0x8E7E;
constant GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS is export = 0x8E7F;
constant GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS is export = 0x8E80;
constant GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS is export = 0x8E81;
constant GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS is export = 0x8E82;
constant GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS is export = 0x8E83;
constant GL_MAX_TESS_PATCH_COMPONENTS is export = 0x8E84;
constant GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS is export = 0x8E85;
constant GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS is export = 0x8E86;
constant GL_TESS_EVALUATION_SHADER is export = 0x8E87;
constant GL_TESS_CONTROL_SHADER is export = 0x8E88;
constant GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS is export = 0x8E89;
constant GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS is export = 0x8E8A;
constant GL_COMPRESSED_RGBA_BPTC_UNORM is export = 0x8E8C;
constant GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM is export = 0x8E8D;
constant GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT is export = 0x8E8E;
constant GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT is export = 0x8E8F;
constant GL_COPY_READ_BUFFER is export = 0x8F36;
constant GL_COPY_READ_BUFFER_BINDING is export = 0x8F36;
constant GL_COPY_WRITE_BUFFER is export = 0x8F37;
constant GL_COPY_WRITE_BUFFER_BINDING is export = 0x8F37;
constant GL_MAX_IMAGE_UNITS is export = 0x8F38;
constant GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS is export = 0x8F39;
constant GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES is export = 0x8F39;
constant GL_IMAGE_BINDING_NAME is export = 0x8F3A;
constant GL_IMAGE_BINDING_LEVEL is export = 0x8F3B;
constant GL_IMAGE_BINDING_LAYERED is export = 0x8F3C;
constant GL_IMAGE_BINDING_LAYER is export = 0x8F3D;
constant GL_IMAGE_BINDING_ACCESS is export = 0x8F3E;
constant GL_DRAW_INDIRECT_BUFFER is export = 0x8F3F;
constant GL_DRAW_INDIRECT_BUFFER_BINDING is export = 0x8F43;
constant GL_DOUBLE_MAT2 is export = 0x8F46;
constant GL_DOUBLE_MAT3 is export = 0x8F47;
constant GL_DOUBLE_MAT4 is export = 0x8F48;
constant GL_DOUBLE_MAT2x3 is export = 0x8F49;
constant GL_DOUBLE_MAT2x4 is export = 0x8F4A;
constant GL_DOUBLE_MAT3x2 is export = 0x8F4B;
constant GL_DOUBLE_MAT3x4 is export = 0x8F4C;
constant GL_DOUBLE_MAT4x2 is export = 0x8F4D;
constant GL_DOUBLE_MAT4x3 is export = 0x8F4E;
constant GL_VERTEX_BINDING_BUFFER is export = 0x8F4F;
constant GL_R8_SNORM is export = 0x8F94;
constant GL_RG8_SNORM is export = 0x8F95;
constant GL_RGB8_SNORM is export = 0x8F96;
constant GL_RGBA8_SNORM is export = 0x8F97;
constant GL_R16_SNORM is export = 0x8F98;
constant GL_RG16_SNORM is export = 0x8F99;
constant GL_RGB16_SNORM is export = 0x8F9A;
constant GL_RGBA16_SNORM is export = 0x8F9B;
constant GL_SIGNED_NORMALIZED is export = 0x8F9C;
constant GL_PRIMITIVE_RESTART is export = 0x8F9D;
constant GL_PRIMITIVE_RESTART_INDEX is export = 0x8F9E;
constant GL_DOUBLE_VEC2 is export = 0x8FFC;
constant GL_DOUBLE_VEC3 is export = 0x8FFD;
constant GL_DOUBLE_VEC4 is export = 0x8FFE;
constant GL_TEXTURE_CUBE_MAP_ARRAY is export = 0x9009;
constant GL_TEXTURE_BINDING_CUBE_MAP_ARRAY is export = 0x900A;
constant GL_PROXY_TEXTURE_CUBE_MAP_ARRAY is export = 0x900B;
constant GL_SAMPLER_CUBE_MAP_ARRAY is export = 0x900C;
constant GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW is export = 0x900D;
constant GL_INT_SAMPLER_CUBE_MAP_ARRAY is export = 0x900E;
constant GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY is export = 0x900F;
constant GL_IMAGE_1D is export = 0x904C;
constant GL_IMAGE_2D is export = 0x904D;
constant GL_IMAGE_3D is export = 0x904E;
constant GL_IMAGE_2D_RECT is export = 0x904F;
constant GL_IMAGE_CUBE is export = 0x9050;
constant GL_IMAGE_BUFFER is export = 0x9051;
constant GL_IMAGE_1D_ARRAY is export = 0x9052;
constant GL_IMAGE_2D_ARRAY is export = 0x9053;
constant GL_IMAGE_CUBE_MAP_ARRAY is export = 0x9054;
constant GL_IMAGE_2D_MULTISAMPLE is export = 0x9055;
constant GL_IMAGE_2D_MULTISAMPLE_ARRAY is export = 0x9056;
constant GL_INT_IMAGE_1D is export = 0x9057;
constant GL_INT_IMAGE_2D is export = 0x9058;
constant GL_INT_IMAGE_3D is export = 0x9059;
constant GL_INT_IMAGE_2D_RECT is export = 0x905A;
constant GL_INT_IMAGE_CUBE is export = 0x905B;
constant GL_INT_IMAGE_BUFFER is export = 0x905C;
constant GL_INT_IMAGE_1D_ARRAY is export = 0x905D;
constant GL_INT_IMAGE_2D_ARRAY is export = 0x905E;
constant GL_INT_IMAGE_CUBE_MAP_ARRAY is export = 0x905F;
constant GL_INT_IMAGE_2D_MULTISAMPLE is export = 0x9060;
constant GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY is export = 0x9061;
constant GL_UNSIGNED_INT_IMAGE_1D is export = 0x9062;
constant GL_UNSIGNED_INT_IMAGE_2D is export = 0x9063;
constant GL_UNSIGNED_INT_IMAGE_3D is export = 0x9064;
constant GL_UNSIGNED_INT_IMAGE_2D_RECT is export = 0x9065;
constant GL_UNSIGNED_INT_IMAGE_CUBE is export = 0x9066;
constant GL_UNSIGNED_INT_IMAGE_BUFFER is export = 0x9067;
constant GL_UNSIGNED_INT_IMAGE_1D_ARRAY is export = 0x9068;
constant GL_UNSIGNED_INT_IMAGE_2D_ARRAY is export = 0x9069;
constant GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY is export = 0x906A;
constant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE is export = 0x906B;
constant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY is export = 0x906C;
constant GL_MAX_IMAGE_SAMPLES is export = 0x906D;
constant GL_IMAGE_BINDING_FORMAT is export = 0x906E;
constant GL_RGB10_A2UI is export = 0x906F;
constant GL_MIN_MAP_BUFFER_ALIGNMENT is export = 0x90BC;
constant GL_IMAGE_FORMAT_COMPATIBILITY_TYPE is export = 0x90C7;
constant GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE is export = 0x90C8;
constant GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS is export = 0x90C9;
constant GL_MAX_VERTEX_IMAGE_UNIFORMS is export = 0x90CA;
constant GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS is export = 0x90CB;
constant GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS is export = 0x90CC;
constant GL_MAX_GEOMETRY_IMAGE_UNIFORMS is export = 0x90CD;
constant GL_MAX_FRAGMENT_IMAGE_UNIFORMS is export = 0x90CE;
constant GL_MAX_COMBINED_IMAGE_UNIFORMS is export = 0x90CF;
constant GL_SHADER_STORAGE_BUFFER is export = 0x90D2;
constant GL_SHADER_STORAGE_BUFFER_BINDING is export = 0x90D3;
constant GL_SHADER_STORAGE_BUFFER_START is export = 0x90D4;
constant GL_SHADER_STORAGE_BUFFER_SIZE is export = 0x90D5;
constant GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS is export = 0x90D6;
constant GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS is export = 0x90D7;
constant GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS is export = 0x90D8;
constant GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS is export = 0x90D9;
constant GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS is export = 0x90DA;
constant GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS is export = 0x90DB;
constant GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS is export = 0x90DC;
constant GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS is export = 0x90DD;
constant GL_MAX_SHADER_STORAGE_BLOCK_SIZE is export = 0x90DE;
constant GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT is export = 0x90DF;
constant GL_DEPTH_STENCIL_TEXTURE_MODE is export = 0x90EA;
constant GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS is export = 0x90EB;
constant GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER is export = 0x90EC;
constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER is export = 0x90ED;
constant GL_DISPATCH_INDIRECT_BUFFER is export = 0x90EE;
constant GL_DISPATCH_INDIRECT_BUFFER_BINDING is export = 0x90EF;
constant GL_TEXTURE_2D_MULTISAMPLE is export = 0x9100;
constant GL_PROXY_TEXTURE_2D_MULTISAMPLE is export = 0x9101;
constant GL_TEXTURE_2D_MULTISAMPLE_ARRAY is export = 0x9102;
constant GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY is export = 0x9103;
constant GL_TEXTURE_BINDING_2D_MULTISAMPLE is export = 0x9104;
constant GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY is export = 0x9105;
constant GL_TEXTURE_SAMPLES is export = 0x9106;
constant GL_TEXTURE_FIXED_SAMPLE_LOCATIONS is export = 0x9107;
constant GL_SAMPLER_2D_MULTISAMPLE is export = 0x9108;
constant GL_INT_SAMPLER_2D_MULTISAMPLE is export = 0x9109;
constant GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE is export = 0x910A;
constant GL_SAMPLER_2D_MULTISAMPLE_ARRAY is export = 0x910B;
constant GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY is export = 0x910C;
constant GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY is export = 0x910D;
constant GL_MAX_COLOR_TEXTURE_SAMPLES is export = 0x910E;
constant GL_MAX_DEPTH_TEXTURE_SAMPLES is export = 0x910F;
constant GL_MAX_INTEGER_SAMPLES is export = 0x9110;
constant GL_MAX_SERVER_WAIT_TIMEOUT is export = 0x9111;
constant GL_OBJECT_TYPE is export = 0x9112;
constant GL_SYNC_CONDITION is export = 0x9113;
constant GL_SYNC_STATUS is export = 0x9114;
constant GL_SYNC_FLAGS is export = 0x9115;
constant GL_SYNC_FENCE is export = 0x9116;
constant GL_SYNC_GPU_COMMANDS_COMPLETE is export = 0x9117;
constant GL_UNSIGNALED is export = 0x9118;
constant GL_SIGNALED is export = 0x9119;
constant GL_ALREADY_SIGNALED is export = 0x911A;
constant GL_TIMEOUT_EXPIRED is export = 0x911B;
constant GL_CONDITION_SATISFIED is export = 0x911C;
constant GL_WAIT_FAILED is export = 0x911D;
constant GL_BUFFER_ACCESS_FLAGS is export = 0x911F;
constant GL_BUFFER_MAP_LENGTH is export = 0x9120;
constant GL_BUFFER_MAP_OFFSET is export = 0x9121;
constant GL_MAX_VERTEX_OUTPUT_COMPONENTS is export = 0x9122;
constant GL_MAX_GEOMETRY_INPUT_COMPONENTS is export = 0x9123;
constant GL_MAX_GEOMETRY_OUTPUT_COMPONENTS is export = 0x9124;
constant GL_MAX_FRAGMENT_INPUT_COMPONENTS is export = 0x9125;
constant GL_CONTEXT_PROFILE_MASK is export = 0x9126;
constant GL_UNPACK_COMPRESSED_BLOCK_WIDTH is export = 0x9127;
constant GL_UNPACK_COMPRESSED_BLOCK_HEIGHT is export = 0x9128;
constant GL_UNPACK_COMPRESSED_BLOCK_DEPTH is export = 0x9129;
constant GL_UNPACK_COMPRESSED_BLOCK_SIZE is export = 0x912A;
constant GL_PACK_COMPRESSED_BLOCK_WIDTH is export = 0x912B;
constant GL_PACK_COMPRESSED_BLOCK_HEIGHT is export = 0x912C;
constant GL_PACK_COMPRESSED_BLOCK_DEPTH is export = 0x912D;
constant GL_PACK_COMPRESSED_BLOCK_SIZE is export = 0x912E;
constant GL_TEXTURE_IMMUTABLE_FORMAT is export = 0x912F;
constant GL_MAX_DEBUG_MESSAGE_LENGTH is export = 0x9143;
constant GL_MAX_DEBUG_LOGGED_MESSAGES is export = 0x9144;
constant GL_DEBUG_LOGGED_MESSAGES is export = 0x9145;
constant GL_DEBUG_SEVERITY_HIGH is export = 0x9146;
constant GL_DEBUG_SEVERITY_MEDIUM is export = 0x9147;
constant GL_DEBUG_SEVERITY_LOW is export = 0x9148;
constant GL_QUERY_BUFFER is export = 0x9192;
constant GL_QUERY_BUFFER_BINDING is export = 0x9193;
constant GL_QUERY_RESULT_NO_WAIT is export = 0x9194;
constant GL_TEXTURE_BUFFER_OFFSET is export = 0x919D;
constant GL_TEXTURE_BUFFER_SIZE is export = 0x919E;
constant GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT is export = 0x919F;
constant GL_COMPUTE_SHADER is export = 0x91B9;
constant GL_MAX_COMPUTE_UNIFORM_BLOCKS is export = 0x91BB;
constant GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS is export = 0x91BC;
constant GL_MAX_COMPUTE_IMAGE_UNIFORMS is export = 0x91BD;
constant GL_MAX_COMPUTE_WORK_GROUP_COUNT is export = 0x91BE;
constant GL_MAX_COMPUTE_WORK_GROUP_SIZE is export = 0x91BF;
constant GL_COMPRESSED_R11_EAC is export = 0x9270;
constant GL_COMPRESSED_SIGNED_R11_EAC is export = 0x9271;
constant GL_COMPRESSED_RG11_EAC is export = 0x9272;
constant GL_COMPRESSED_SIGNED_RG11_EAC is export = 0x9273;
constant GL_COMPRESSED_RGB8_ETC2 is export = 0x9274;
constant GL_COMPRESSED_SRGB8_ETC2 is export = 0x9275;
constant GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 is export = 0x9276;
constant GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 is export = 0x9277;
constant GL_COMPRESSED_RGBA8_ETC2_EAC is export = 0x9278;
constant GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC is export = 0x9279;
constant GL_ATOMIC_COUNTER_BUFFER is export = 0x92C0;
constant GL_ATOMIC_COUNTER_BUFFER_BINDING is export = 0x92C1;
constant GL_ATOMIC_COUNTER_BUFFER_START is export = 0x92C2;
constant GL_ATOMIC_COUNTER_BUFFER_SIZE is export = 0x92C3;
constant GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE is export = 0x92C4;
constant GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS is export = 0x92C5;
constant GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES is export = 0x92C6;
constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER is export = 0x92C7;
constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER is export = 0x92C8;
constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER is export = 0x92C9;
constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER is export = 0x92CA;
constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER is export = 0x92CB;
constant GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS is export = 0x92CC;
constant GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS is export = 0x92CD;
constant GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS is export = 0x92CE;
constant GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS is export = 0x92CF;
constant GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS is export = 0x92D0;
constant GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS is export = 0x92D1;
constant GL_MAX_VERTEX_ATOMIC_COUNTERS is export = 0x92D2;
constant GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS is export = 0x92D3;
constant GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS is export = 0x92D4;
constant GL_MAX_GEOMETRY_ATOMIC_COUNTERS is export = 0x92D5;
constant GL_MAX_FRAGMENT_ATOMIC_COUNTERS is export = 0x92D6;
constant GL_MAX_COMBINED_ATOMIC_COUNTERS is export = 0x92D7;
constant GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE is export = 0x92D8;
constant GL_ACTIVE_ATOMIC_COUNTER_BUFFERS is export = 0x92D9;
constant GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX is export = 0x92DA;
constant GL_UNSIGNED_INT_ATOMIC_COUNTER is export = 0x92DB;
constant GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS is export = 0x92DC;
constant GL_DEBUG_OUTPUT is export = 0x92E0;
constant GL_UNIFORM is export = 0x92E1;
constant GL_UNIFORM_BLOCK is export = 0x92E2;
constant GL_PROGRAM_INPUT is export = 0x92E3;
constant GL_PROGRAM_OUTPUT is export = 0x92E4;
constant GL_BUFFER_VARIABLE is export = 0x92E5;
constant GL_SHADER_STORAGE_BLOCK is export = 0x92E6;
constant GL_IS_PER_PATCH is export = 0x92E7;
constant GL_VERTEX_SUBROUTINE is export = 0x92E8;
constant GL_TESS_CONTROL_SUBROUTINE is export = 0x92E9;
constant GL_TESS_EVALUATION_SUBROUTINE is export = 0x92EA;
constant GL_GEOMETRY_SUBROUTINE is export = 0x92EB;
constant GL_FRAGMENT_SUBROUTINE is export = 0x92EC;
constant GL_COMPUTE_SUBROUTINE is export = 0x92ED;
constant GL_VERTEX_SUBROUTINE_UNIFORM is export = 0x92EE;
constant GL_TESS_CONTROL_SUBROUTINE_UNIFORM is export = 0x92EF;
constant GL_TESS_EVALUATION_SUBROUTINE_UNIFORM is export = 0x92F0;
constant GL_GEOMETRY_SUBROUTINE_UNIFORM is export = 0x92F1;
constant GL_FRAGMENT_SUBROUTINE_UNIFORM is export = 0x92F2;
constant GL_COMPUTE_SUBROUTINE_UNIFORM is export = 0x92F3;
constant GL_TRANSFORM_FEEDBACK_VARYING is export = 0x92F4;
constant GL_ACTIVE_RESOURCES is export = 0x92F5;
constant GL_MAX_NAME_LENGTH is export = 0x92F6;
constant GL_MAX_NUM_ACTIVE_VARIABLES is export = 0x92F7;
constant GL_MAX_NUM_COMPATIBLE_SUBROUTINES is export = 0x92F8;
constant GL_NAME_LENGTH is export = 0x92F9;
constant GL_TYPE is export = 0x92FA;
constant GL_ARRAY_SIZE is export = 0x92FB;
constant GL_OFFSET is export = 0x92FC;
constant GL_BLOCK_INDEX is export = 0x92FD;
constant GL_ARRAY_STRIDE is export = 0x92FE;
constant GL_MATRIX_STRIDE is export = 0x92FF;
constant GL_IS_ROW_MAJOR is export = 0x9300;
constant GL_ATOMIC_COUNTER_BUFFER_INDEX is export = 0x9301;
constant GL_BUFFER_BINDING is export = 0x9302;
constant GL_BUFFER_DATA_SIZE is export = 0x9303;
constant GL_NUM_ACTIVE_VARIABLES is export = 0x9304;
constant GL_ACTIVE_VARIABLES is export = 0x9305;
constant GL_REFERENCED_BY_VERTEX_SHADER is export = 0x9306;
constant GL_REFERENCED_BY_TESS_CONTROL_SHADER is export = 0x9307;
constant GL_REFERENCED_BY_TESS_EVALUATION_SHADER is export = 0x9308;
constant GL_REFERENCED_BY_GEOMETRY_SHADER is export = 0x9309;
constant GL_REFERENCED_BY_FRAGMENT_SHADER is export = 0x930A;
constant GL_REFERENCED_BY_COMPUTE_SHADER is export = 0x930B;
constant GL_TOP_LEVEL_ARRAY_SIZE is export = 0x930C;
constant GL_TOP_LEVEL_ARRAY_STRIDE is export = 0x930D;
constant GL_LOCATION is export = 0x930E;
constant GL_LOCATION_INDEX is export = 0x930F;
constant GL_FRAMEBUFFER_DEFAULT_WIDTH is export = 0x9310;
constant GL_FRAMEBUFFER_DEFAULT_HEIGHT is export = 0x9311;
constant GL_FRAMEBUFFER_DEFAULT_LAYERS is export = 0x9312;
constant GL_FRAMEBUFFER_DEFAULT_SAMPLES is export = 0x9313;
constant GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS is export = 0x9314;
constant GL_MAX_FRAMEBUFFER_WIDTH is export = 0x9315;
constant GL_MAX_FRAMEBUFFER_HEIGHT is export = 0x9316;
constant GL_MAX_FRAMEBUFFER_LAYERS is export = 0x9317;
constant GL_MAX_FRAMEBUFFER_SAMPLES is export = 0x9318;
constant GL_LOCATION_COMPONENT is export = 0x934A;
constant GL_TRANSFORM_FEEDBACK_BUFFER_INDEX is export = 0x934B;
constant GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE is export = 0x934C;
constant GL_CLIP_ORIGIN is export = 0x935C;
constant GL_CLIP_DEPTH_MODE is export = 0x935D;
constant GL_NEGATIVE_ONE_TO_ONE is export = 0x935E;
constant GL_ZERO_TO_ONE is export = 0x935F;
constant GL_CLEAR_TEXTURE is export = 0x9365;
constant GL_NUM_SAMPLE_COUNTS is export = 0x9380;
constant GL_SHADER_BINARY_FORMAT_SPIR_V is export = 0x9551;
constant GL_SPIR_V_BINARY is export = 0x9552;
constant GL_SPIR_V_EXTENSIONS is export = 0x9553;
constant GL_NUM_SPIR_V_EXTENSIONS is export = 0x9554;
our &glAccum is export;
our &glAccumxOES is export;
our &glActiveProgramEXT is export;
our &glActiveShaderProgram is export;
our &glActiveShaderProgramEXT is export;
our &glActiveStencilFaceEXT is export;
our &glActiveTexture is export;
our &glActiveTextureARB is export;
our &glActiveVaryingNV is export;
our &glAlphaFragmentOp1ATI is export;
our &glAlphaFragmentOp2ATI is export;
our &glAlphaFragmentOp3ATI is export;
our &glAlphaFunc is export;
our &glAlphaFuncQCOM is export;
our &glAlphaFuncx is export;
our &glAlphaFuncxOES is export;
our &glAlphaToCoverageDitherControlNV is export;
our &glApplyFramebufferAttachmentCMAAINTEL is export;
our &glApplyTextureEXT is export;
our &glAcquireKeyedMutexWin32EXT is export;
our &glAreProgramsResidentNV is export;
our &glAreTexturesResident is export;
our &glAreTexturesResidentEXT is export;
our &glArrayElement is export;
our &glArrayElementEXT is export;
our &glArrayObjectATI is export;
our &glAsyncCopyBufferSubDataNVX is export;
our &glAsyncCopyImageSubDataNVX is export;
our &glAsyncMarkerSGIX is export;
our &glAttachObjectARB is export;
our &glAttachShader is export;
our &glBegin is export;
our &glBeginConditionalRender is export;
our &glBeginConditionalRenderNV is export;
our &glBeginConditionalRenderNVX is export;
our &glBeginFragmentShaderATI is export;
our &glBeginOcclusionQueryNV is export;
our &glBeginPerfMonitorAMD is export;
our &glBeginPerfQueryINTEL is export;
our &glBeginQuery is export;
our &glBeginQueryARB is export;
our &glBeginQueryEXT is export;
our &glBeginQueryIndexed is export;
our &glBeginTransformFeedback is export;
our &glBeginTransformFeedbackEXT is export;
our &glBeginTransformFeedbackNV is export;
our &glBeginVertexShaderEXT is export;
our &glBeginVideoCaptureNV is export;
our &glBindAttribLocation is export;
our &glBindAttribLocationARB is export;
our &glBindBuffer is export;
our &glBindBufferARB is export;
our &glBindBufferBase is export;
our &glBindBufferBaseEXT is export;
our &glBindBufferBaseNV is export;
our &glBindBufferOffsetEXT is export;
our &glBindBufferOffsetNV is export;
our &glBindBufferRange is export;
our &glBindBufferRangeEXT is export;
our &glBindBufferRangeNV is export;
our &glBindBuffersBase is export;
our &glBindBuffersRange is export;
our &glBindFragDataLocation is export;
our &glBindFragDataLocationEXT is export;
our &glBindFragDataLocationIndexed is export;
our &glBindFragDataLocationIndexedEXT is export;
our &glBindFragmentShaderATI is export;
our &glBindFramebuffer is export;
our &glBindFramebufferEXT is export;
our &glBindFramebufferOES is export;
our &glBindImageTexture is export;
our &glBindImageTextureEXT is export;
our &glBindImageTextures is export;
our &glBindLightParameterEXT is export;
our &glBindMaterialParameterEXT is export;
our &glBindMultiTextureEXT is export;
our &glBindParameterEXT is export;
our &glBindProgramARB is export;
our &glBindProgramNV is export;
our &glBindProgramPipeline is export;
our &glBindProgramPipelineEXT is export;
our &glBindRenderbuffer is export;
our &glBindRenderbufferEXT is export;
our &glBindRenderbufferOES is export;
our &glBindSampler is export;
our &glBindSamplers is export;
our &glBindShadingRateImageNV is export;
our &glBindTexGenParameterEXT is export;
our &glBindTexture is export;
our &glBindTextureEXT is export;
our &glBindTextureUnit is export;
our &glBindTextureUnitParameterEXT is export;
our &glBindTextures is export;
our &glBindTransformFeedback is export;
our &glBindTransformFeedbackNV is export;
our &glBindVertexArray is export;
our &glBindVertexArrayAPPLE is export;
our &glBindVertexArrayOES is export;
our &glBindVertexBuffer is export;
our &glBindVertexBuffers is export;
our &glBindVertexShaderEXT is export;
our &glBindVideoCaptureStreamBufferNV is export;
our &glBindVideoCaptureStreamTextureNV is export;
our &glBinormal3bEXT is export;
our &glBinormal3bvEXT is export;
our &glBinormal3dEXT is export;
our &glBinormal3dvEXT is export;
our &glBinormal3fEXT is export;
our &glBinormal3fvEXT is export;
our &glBinormal3iEXT is export;
our &glBinormal3ivEXT is export;
our &glBinormal3sEXT is export;
our &glBinormal3svEXT is export;
our &glBinormalPointerEXT is export;
our &glBitmap is export;
our &glBitmapxOES is export;
our &glBlendBarrier is export;
our &glBlendBarrierKHR is export;
our &glBlendBarrierNV is export;
our &glBlendColor is export;
our &glBlendColorEXT is export;
our &glBlendColorxOES is export;
our &glBlendEquation is export;
our &glBlendEquationEXT is export;
our &glBlendEquationIndexedAMD is export;
our &glBlendEquationOES is export;
our &glBlendEquationSeparate is export;
our &glBlendEquationSeparateEXT is export;
our &glBlendEquationSeparateIndexedAMD is export;
our &glBlendEquationSeparateOES is export;
our &glBlendEquationSeparatei is export;
our &glBlendEquationSeparateiARB is export;
our &glBlendEquationSeparateiEXT is export;
our &glBlendEquationSeparateiOES is export;
our &glBlendEquationi is export;
our &glBlendEquationiARB is export;
our &glBlendEquationiEXT is export;
our &glBlendEquationiOES is export;
our &glBlendFunc is export;
our &glBlendFuncIndexedAMD is export;
our &glBlendFuncSeparate is export;
our &glBlendFuncSeparateEXT is export;
our &glBlendFuncSeparateINGR is export;
our &glBlendFuncSeparateIndexedAMD is export;
our &glBlendFuncSeparateOES is export;
our &glBlendFuncSeparatei is export;
our &glBlendFuncSeparateiARB is export;
our &glBlendFuncSeparateiEXT is export;
our &glBlendFuncSeparateiOES is export;
our &glBlendFunci is export;
our &glBlendFunciARB is export;
our &glBlendFunciEXT is export;
our &glBlendFunciOES is export;
our &glBlendParameteriNV is export;
our &glBlitFramebuffer is export;
our &glBlitFramebufferANGLE is export;
our &glBlitFramebufferEXT is export;
our &glBlitFramebufferNV is export;
our &glBlitNamedFramebuffer is export;
our &glBufferAddressRangeNV is export;
our &glBufferAttachMemoryNV is export;
our &glBufferData is export;
our &glBufferDataARB is export;
our &glBufferPageCommitmentARB is export;
our &glBufferPageCommitmentMemNV is export;
our &glBufferParameteriAPPLE is export;
our &glBufferStorage is export;
our &glBufferStorageEXT is export;
our &glBufferStorageExternalEXT is export;
our &glBufferStorageMemEXT is export;
our &glBufferSubData is export;
our &glBufferSubDataARB is export;
our &glCallCommandListNV is export;
our &glCallList is export;
our &glCallLists is export;
our &glCheckFramebufferStatus is export;
our &glCheckFramebufferStatusEXT is export;
our &glCheckFramebufferStatusOES is export;
our &glCheckNamedFramebufferStatus is export;
our &glCheckNamedFramebufferStatusEXT is export;
our &glClampColor is export;
our &glClampColorARB is export;
our &glClear is export;
our &glClearAccum is export;
our &glClearAccumxOES is export;
our &glClearBufferData is export;
our &glClearBufferSubData is export;
our &glClearBufferfi is export;
our &glClearBufferfv is export;
our &glClearBufferiv is export;
our &glClearBufferuiv is export;
our &glClearColor is export;
our &glClearColorIiEXT is export;
our &glClearColorIuiEXT is export;
our &glClearColorx is export;
our &glClearColorxOES is export;
our &glClearDepth is export;
our &glClearDepthdNV is export;
our &glClearDepthf is export;
our &glClearDepthfOES is export;
our &glClearDepthx is export;
our &glClearDepthxOES is export;
our &glClearIndex is export;
our &glClearNamedBufferData is export;
our &glClearNamedBufferDataEXT is export;
our &glClearNamedBufferSubData is export;
our &glClearNamedBufferSubDataEXT is export;
our &glClearNamedFramebufferfi is export;
our &glClearNamedFramebufferfv is export;
our &glClearNamedFramebufferiv is export;
our &glClearNamedFramebufferuiv is export;
our &glClearPixelLocalStorageuiEXT is export;
our &glClearStencil is export;
our &glClearTexImage is export;
our &glClearTexImageEXT is export;
our &glClearTexSubImage is export;
our &glClearTexSubImageEXT is export;
our &glClientActiveTexture is export;
our &glClientActiveTextureARB is export;
our &glClientActiveVertexStreamATI is export;
our &glClientAttribDefaultEXT is export;
our &glClientWaitSemaphoreui64NVX is export;
our &glClientWaitSync is export;
our &glClientWaitSyncAPPLE is export;
our &glClipControl is export;
our &glClipControlEXT is export;
our &glClipPlane is export;
our &glClipPlanef is export;
our &glClipPlanefIMG is export;
our &glClipPlanefOES is export;
our &glClipPlanex is export;
our &glClipPlanexIMG is export;
our &glClipPlanexOES is export;
our &glColor3b is export;
our &glColor3bv is export;
our &glColor3d is export;
our &glColor3dv is export;
our &glColor3f is export;
our &glColor3fVertex3fSUN is export;
our &glColor3fVertex3fvSUN is export;
our &glColor3fv is export;
our &glColor3hNV is export;
our &glColor3hvNV is export;
our &glColor3i is export;
our &glColor3iv is export;
our &glColor3s is export;
our &glColor3sv is export;
our &glColor3ub is export;
our &glColor3ubv is export;
our &glColor3ui is export;
our &glColor3uiv is export;
our &glColor3us is export;
our &glColor3usv is export;
our &glColor3xOES is export;
our &glColor3xvOES is export;
our &glColor4b is export;
our &glColor4bv is export;
our &glColor4d is export;
our &glColor4dv is export;
our &glColor4f is export;
our &glColor4fNormal3fVertex3fSUN is export;
our &glColor4fNormal3fVertex3fvSUN is export;
our &glColor4fv is export;
our &glColor4hNV is export;
our &glColor4hvNV is export;
our &glColor4i is export;
our &glColor4iv is export;
our &glColor4s is export;
our &glColor4sv is export;
our &glColor4ub is export;
our &glColor4ubVertex2fSUN is export;
our &glColor4ubVertex2fvSUN is export;
our &glColor4ubVertex3fSUN is export;
our &glColor4ubVertex3fvSUN is export;
our &glColor4ubv is export;
our &glColor4ui is export;
our &glColor4uiv is export;
our &glColor4us is export;
our &glColor4usv is export;
our &glColor4x is export;
our &glColor4xOES is export;
our &glColor4xvOES is export;
our &glColorFormatNV is export;
our &glColorFragmentOp1ATI is export;
our &glColorFragmentOp2ATI is export;
our &glColorFragmentOp3ATI is export;
our &glColorMask is export;
our &glColorMaskIndexedEXT is export;
our &glColorMaski is export;
our &glColorMaskiEXT is export;
our &glColorMaskiOES is export;
our &glColorMaterial is export;
our &glColorP3ui is export;
our &glColorP3uiv is export;
our &glColorP4ui is export;
our &glColorP4uiv is export;
our &glColorPointer is export;
our &glColorPointerEXT is export;
our &glColorPointerListIBM is export;
our &glColorPointervINTEL is export;
our &glColorSubTable is export;
our &glColorSubTableEXT is export;
our &glColorTable is export;
our &glColorTableEXT is export;
our &glColorTableParameterfv is export;
our &glColorTableParameterfvSGI is export;
our &glColorTableParameteriv is export;
our &glColorTableParameterivSGI is export;
our &glColorTableSGI is export;
our &glCombinerInputNV is export;
our &glCombinerOutputNV is export;
our &glCombinerParameterfNV is export;
our &glCombinerParameterfvNV is export;
our &glCombinerParameteriNV is export;
our &glCombinerParameterivNV is export;
our &glCombinerStageParameterfvNV is export;
our &glCommandListSegmentsNV is export;
our &glCompileCommandListNV is export;
our &glCompileShader is export;
our &glCompileShaderARB is export;
our &glCompileShaderIncludeARB is export;
our &glCompressedMultiTexImage1DEXT is export;
our &glCompressedMultiTexImage2DEXT is export;
our &glCompressedMultiTexImage3DEXT is export;
our &glCompressedMultiTexSubImage1DEXT is export;
our &glCompressedMultiTexSubImage2DEXT is export;
our &glCompressedMultiTexSubImage3DEXT is export;
our &glCompressedTexImage1D is export;
our &glCompressedTexImage1DARB is export;
our &glCompressedTexImage2D is export;
our &glCompressedTexImage2DARB is export;
our &glCompressedTexImage3D is export;
our &glCompressedTexImage3DARB is export;
our &glCompressedTexImage3DOES is export;
our &glCompressedTexSubImage1D is export;
our &glCompressedTexSubImage1DARB is export;
our &glCompressedTexSubImage2D is export;
our &glCompressedTexSubImage2DARB is export;
our &glCompressedTexSubImage3D is export;
our &glCompressedTexSubImage3DARB is export;
our &glCompressedTexSubImage3DOES is export;
our &glCompressedTextureImage1DEXT is export;
our &glCompressedTextureImage2DEXT is export;
our &glCompressedTextureImage3DEXT is export;
our &glCompressedTextureSubImage1D is export;
our &glCompressedTextureSubImage1DEXT is export;
our &glCompressedTextureSubImage2D is export;
our &glCompressedTextureSubImage2DEXT is export;
our &glCompressedTextureSubImage3D is export;
our &glCompressedTextureSubImage3DEXT is export;
our &glConservativeRasterParameterfNV is export;
our &glConservativeRasterParameteriNV is export;
our &glConvolutionFilter1D is export;
our &glConvolutionFilter1DEXT is export;
our &glConvolutionFilter2D is export;
our &glConvolutionFilter2DEXT is export;
our &glConvolutionParameterf is export;
our &glConvolutionParameterfEXT is export;
our &glConvolutionParameterfv is export;
our &glConvolutionParameterfvEXT is export;
our &glConvolutionParameteri is export;
our &glConvolutionParameteriEXT is export;
our &glConvolutionParameteriv is export;
our &glConvolutionParameterivEXT is export;
our &glConvolutionParameterxOES is export;
our &glConvolutionParameterxvOES is export;
our &glCopyBufferSubData is export;
our &glCopyBufferSubDataNV is export;
our &glCopyColorSubTable is export;
our &glCopyColorSubTableEXT is export;
our &glCopyColorTable is export;
our &glCopyColorTableSGI is export;
our &glCopyConvolutionFilter1D is export;
our &glCopyConvolutionFilter1DEXT is export;
our &glCopyConvolutionFilter2D is export;
our &glCopyConvolutionFilter2DEXT is export;
our &glCopyImageSubData is export;
our &glCopyImageSubDataEXT is export;
our &glCopyImageSubDataNV is export;
our &glCopyImageSubDataOES is export;
our &glCopyMultiTexImage1DEXT is export;
our &glCopyMultiTexImage2DEXT is export;
our &glCopyMultiTexSubImage1DEXT is export;
our &glCopyMultiTexSubImage2DEXT is export;
our &glCopyMultiTexSubImage3DEXT is export;
our &glCopyNamedBufferSubData is export;
our &glCopyPathNV is export;
our &glCopyPixels is export;
our &glCopyTexImage1D is export;
our &glCopyTexImage1DEXT is export;
our &glCopyTexImage2D is export;
our &glCopyTexImage2DEXT is export;
our &glCopyTexSubImage1D is export;
our &glCopyTexSubImage1DEXT is export;
our &glCopyTexSubImage2D is export;
our &glCopyTexSubImage2DEXT is export;
our &glCopyTexSubImage3D is export;
our &glCopyTexSubImage3DEXT is export;
our &glCopyTexSubImage3DOES is export;
our &glCopyTextureImage1DEXT is export;
our &glCopyTextureImage2DEXT is export;
our &glCopyTextureLevelsAPPLE is export;
our &glCopyTextureSubImage1D is export;
our &glCopyTextureSubImage1DEXT is export;
our &glCopyTextureSubImage2D is export;
our &glCopyTextureSubImage2DEXT is export;
our &glCopyTextureSubImage3D is export;
our &glCopyTextureSubImage3DEXT is export;
our &glCoverFillPathInstancedNV is export;
our &glCoverFillPathNV is export;
our &glCoverStrokePathInstancedNV is export;
our &glCoverStrokePathNV is export;
our &glCoverageMaskNV is export;
our &glCoverageModulationNV is export;
our &glCoverageModulationTableNV is export;
our &glCoverageOperationNV is export;
our &glCreateBuffers is export;
our &glCreateCommandListsNV is export;
our &glCreateFramebuffers is export;
our &glCreateMemoryObjectsEXT is export;
our &glCreatePerfQueryINTEL is export;
our &glCreateProgram is export;
our &glCreateProgramObjectARB is export;
our &glCreateProgramPipelines is export;
our &glCreateProgressFenceNVX is export;
our &glCreateQueries is export;
our &glCreateRenderbuffers is export;
our &glCreateSamplers is export;
our &glCreateSemaphoresNV is export;
our &glCreateShader is export;
our &glCreateShaderObjectARB is export;
our &glCreateShaderProgramEXT is export;
our &glCreateShaderProgramv is export;
our &glCreateShaderProgramvEXT is export;
our &glCreateStatesNV is export;
our &glCreateTextures is export;
our &glCreateTransformFeedbacks is export;
our &glCreateVertexArrays is export;
our &glCullFace is export;
our &glCullParameterdvEXT is export;
our &glCullParameterfvEXT is export;
our &glCurrentPaletteMatrixARB is export;
our &glCurrentPaletteMatrixOES is export;
our &glDebugMessageCallback is export;
our &glDebugMessageCallbackAMD is export;
our &glDebugMessageCallbackARB is export;
our &glDebugMessageCallbackKHR is export;
our &glDebugMessageControl is export;
our &glDebugMessageControlARB is export;
our &glDebugMessageControlKHR is export;
our &glDebugMessageEnableAMD is export;
our &glDebugMessageInsert is export;
our &glDebugMessageInsertAMD is export;
our &glDebugMessageInsertARB is export;
our &glDebugMessageInsertKHR is export;
our &glDeformSGIX is export;
our &glDeformationMap3dSGIX is export;
our &glDeformationMap3fSGIX is export;
our &glDeleteAsyncMarkersSGIX is export;
our &glDeleteBuffers is export;
our &glDeleteBuffersARB is export;
our &glDeleteCommandListsNV is export;
our &glDeleteFencesAPPLE is export;
our &glDeleteFencesNV is export;
our &glDeleteFragmentShaderATI is export;
our &glDeleteFramebuffers is export;
our &glDeleteFramebuffersEXT is export;
our &glDeleteFramebuffersOES is export;
our &glDeleteLists is export;
our &glDeleteMemoryObjectsEXT is export;
our &glDeleteNamedStringARB is export;
our &glDeleteNamesAMD is export;
our &glDeleteObjectARB is export;
our &glDeleteOcclusionQueriesNV is export;
our &glDeletePathsNV is export;
our &glDeletePerfMonitorsAMD is export;
our &glDeletePerfQueryINTEL is export;
our &glDeleteProgram is export;
our &glDeleteProgramPipelines is export;
our &glDeleteProgramPipelinesEXT is export;
our &glDeleteProgramsARB is export;
our &glDeleteProgramsNV is export;
our &glDeleteQueries is export;
our &glDeleteQueriesARB is export;
our &glDeleteQueriesEXT is export;
our &glDeleteQueryResourceTagNV is export;
our &glDeleteRenderbuffers is export;
our &glDeleteRenderbuffersEXT is export;
our &glDeleteRenderbuffersOES is export;
our &glDeleteSamplers is export;
our &glDeleteSemaphoresEXT is export;
our &glDeleteShader is export;
our &glDeleteStatesNV is export;
our &glDeleteSync is export;
our &glDeleteSyncAPPLE is export;
our &glDeleteTextures is export;
our &glDeleteTexturesEXT is export;
our &glDeleteTransformFeedbacks is export;
our &glDeleteTransformFeedbacksNV is export;
our &glDeleteVertexArrays is export;
our &glDeleteVertexArraysAPPLE is export;
our &glDeleteVertexArraysOES is export;
our &glDeleteVertexShaderEXT is export;
our &glDepthBoundsEXT is export;
our &glDepthBoundsdNV is export;
our &glDepthFunc is export;
our &glDepthMask is export;
our &glDepthRange is export;
our &glDepthRangeArraydvNV is export;
our &glDepthRangeArrayfvNV is export;
our &glDepthRangeArrayfvOES is export;
our &glDepthRangeArrayv is export;
our &glDepthRangeIndexed is export;
our &glDepthRangeIndexeddNV is export;
our &glDepthRangeIndexedfNV is export;
our &glDepthRangeIndexedfOES is export;
our &glDepthRangedNV is export;
our &glDepthRangef is export;
our &glDepthRangefOES is export;
our &glDepthRangex is export;
our &glDepthRangexOES is export;
our &glDetachObjectARB is export;
our &glDetachShader is export;
our &glDetailTexFuncSGIS is export;
our &glDisable is export;
our &glDisableClientState is export;
our &glDisableClientStateIndexedEXT is export;
our &glDisableClientStateiEXT is export;
our &glDisableDriverControlQCOM is export;
our &glDisableIndexedEXT is export;
our &glDisableVariantClientStateEXT is export;
our &glDisableVertexArrayAttrib is export;
our &glDisableVertexArrayAttribEXT is export;
our &glDisableVertexArrayEXT is export;
our &glDisableVertexAttribAPPLE is export;
our &glDisableVertexAttribArray is export;
our &glDisableVertexAttribArrayARB is export;
our &glDisablei is export;
our &glDisableiEXT is export;
our &glDisableiNV is export;
our &glDisableiOES is export;
our &glDiscardFramebufferEXT is export;
our &glDispatchCompute is export;
our &glDispatchComputeGroupSizeARB is export;
our &glDispatchComputeIndirect is export;
our &glDrawArrays is export;
our &glDrawArraysEXT is export;
our &glDrawArraysIndirect is export;
our &glDrawArraysInstanced is export;
our &glDrawArraysInstancedANGLE is export;
our &glDrawArraysInstancedARB is export;
our &glDrawArraysInstancedBaseInstance is export;
our &glDrawArraysInstancedBaseInstanceEXT is export;
our &glDrawArraysInstancedEXT is export;
our &glDrawArraysInstancedNV is export;
our &glDrawBuffer is export;
our &glDrawBuffers is export;
our &glDrawBuffersARB is export;
our &glDrawBuffersATI is export;
our &glDrawBuffersEXT is export;
our &glDrawBuffersIndexedEXT is export;
our &glDrawBuffersNV is export;
our &glDrawCommandsAddressNV is export;
our &glDrawCommandsNV is export;
our &glDrawCommandsStatesAddressNV is export;
our &glDrawCommandsStatesNV is export;
our &glDrawElementArrayAPPLE is export;
our &glDrawElementArrayATI is export;
our &glDrawElements is export;
our &glDrawElementsBaseVertex is export;
our &glDrawElementsBaseVertexEXT is export;
our &glDrawElementsBaseVertexOES is export;
our &glDrawElementsIndirect is export;
our &glDrawElementsInstanced is export;
our &glDrawElementsInstancedANGLE is export;
our &glDrawElementsInstancedARB is export;
our &glDrawElementsInstancedBaseInstance is export;
our &glDrawElementsInstancedBaseInstanceEXT is export;
our &glDrawElementsInstancedBaseVertex is export;
our &glDrawElementsInstancedBaseVertexBaseInstance is export;
our &glDrawElementsInstancedBaseVertexBaseInstanceEXT is export;
our &glDrawElementsInstancedBaseVertexEXT is export;
our &glDrawElementsInstancedBaseVertexOES is export;
our &glDrawElementsInstancedEXT is export;
our &glDrawElementsInstancedNV is export;
our &glDrawMeshArraysSUN is export;
our &glDrawMeshTasksNV is export;
our &glDrawMeshTasksIndirectNV is export;
our &glDrawPixels is export;
our &glDrawRangeElementArrayAPPLE is export;
our &glDrawRangeElementArrayATI is export;
our &glDrawRangeElements is export;
our &glDrawRangeElementsBaseVertex is export;
our &glDrawRangeElementsBaseVertexEXT is export;
our &glDrawRangeElementsBaseVertexOES is export;
our &glDrawRangeElementsEXT is export;
our &glDrawTexfOES is export;
our &glDrawTexfvOES is export;
our &glDrawTexiOES is export;
our &glDrawTexivOES is export;
our &glDrawTexsOES is export;
our &glDrawTexsvOES is export;
our &glDrawTextureNV is export;
our &glDrawTexxOES is export;
our &glDrawTexxvOES is export;
our &glDrawTransformFeedback is export;
our &glDrawTransformFeedbackEXT is export;
our &glDrawTransformFeedbackInstanced is export;
our &glDrawTransformFeedbackInstancedEXT is export;
our &glDrawTransformFeedbackNV is export;
our &glDrawTransformFeedbackStream is export;
our &glDrawTransformFeedbackStreamInstanced is export;
our &glEGLImageTargetRenderbufferStorageOES is export;
our &glEGLImageTargetTexStorageEXT is export;
our &glEGLImageTargetTexture2DOES is export;
our &glEGLImageTargetTextureStorageEXT is export;
our &glEdgeFlag is export;
our &glEdgeFlagFormatNV is export;
our &glEdgeFlagPointer is export;
our &glEdgeFlagPointerEXT is export;
our &glEdgeFlagPointerListIBM is export;
our &glEdgeFlagv is export;
our &glElementPointerAPPLE is export;
our &glElementPointerATI is export;
our &glEnable is export;
our &glEnableClientState is export;
our &glEnableClientStateIndexedEXT is export;
our &glEnableClientStateiEXT is export;
our &glEnableDriverControlQCOM is export;
our &glEnableIndexedEXT is export;
our &glEnableVariantClientStateEXT is export;
our &glEnableVertexArrayAttrib is export;
our &glEnableVertexArrayAttribEXT is export;
our &glEnableVertexArrayEXT is export;
our &glEnableVertexAttribAPPLE is export;
our &glEnableVertexAttribArray is export;
our &glEnableVertexAttribArrayARB is export;
our &glEnablei is export;
our &glEnableiEXT is export;
our &glEnableiNV is export;
our &glEnableiOES is export;
our &glEnd is export;
our &glEndConditionalRender is export;
our &glEndConditionalRenderNV is export;
our &glEndConditionalRenderNVX is export;
our &glEndFragmentShaderATI is export;
our &glEndList is export;
our &glEndOcclusionQueryNV is export;
our &glEndPerfMonitorAMD is export;
our &glEndPerfQueryINTEL is export;
our &glEndQuery is export;
our &glEndQueryARB is export;
our &glEndQueryEXT is export;
our &glEndQueryIndexed is export;
our &glEndTilingQCOM is export;
our &glEndTransformFeedback is export;
our &glEndTransformFeedbackEXT is export;
our &glEndTransformFeedbackNV is export;
our &glEndVertexShaderEXT is export;
our &glEndVideoCaptureNV is export;
our &glEvalCoord1d is export;
our &glEvalCoord1dv is export;
our &glEvalCoord1f is export;
our &glEvalCoord1fv is export;
our &glEvalCoord1xOES is export;
our &glEvalCoord1xvOES is export;
our &glEvalCoord2d is export;
our &glEvalCoord2dv is export;
our &glEvalCoord2f is export;
our &glEvalCoord2fv is export;
our &glEvalCoord2xOES is export;
our &glEvalCoord2xvOES is export;
our &glEvalMapsNV is export;
our &glEvalMesh1 is export;
our &glEvalMesh2 is export;
our &glEvalPoint1 is export;
our &glEvalPoint2 is export;
our &glEvaluateDepthValuesARB is export;
our &glExecuteProgramNV is export;
our &glExtGetBufferPointervQCOM is export;
our &glExtGetBuffersQCOM is export;
our &glExtGetFramebuffersQCOM is export;
our &glExtGetProgramBinarySourceQCOM is export;
our &glExtGetProgramsQCOM is export;
our &glExtGetRenderbuffersQCOM is export;
our &glExtGetShadersQCOM is export;
our &glExtGetTexLevelParameterivQCOM is export;
our &glExtGetTexSubImageQCOM is export;
our &glExtGetTexturesQCOM is export;
our &glExtIsProgramBinaryQCOM is export;
our &glExtTexObjectStateOverrideiQCOM is export;
our &glExtractComponentEXT is export;
our &glFeedbackBuffer is export;
our &glFeedbackBufferxOES is export;
our &glFenceSync is export;
our &glFenceSyncAPPLE is export;
our &glFinalCombinerInputNV is export;
our &glFinish is export;
our &glFinishAsyncSGIX is export;
our &glFinishFenceAPPLE is export;
our &glFinishFenceNV is export;
our &glFinishObjectAPPLE is export;
our &glFinishTextureSUNX is export;
our &glFlush is export;
our &glFlushMappedBufferRange is export;
our &glFlushMappedBufferRangeAPPLE is export;
our &glFlushMappedBufferRangeEXT is export;
our &glFlushMappedNamedBufferRange is export;
our &glFlushMappedNamedBufferRangeEXT is export;
our &glFlushPixelDataRangeNV is export;
our &glFlushRasterSGIX is export;
our &glFlushStaticDataIBM is export;
our &glFlushVertexArrayRangeAPPLE is export;
our &glFlushVertexArrayRangeNV is export;
our &glFogCoordFormatNV is export;
our &glFogCoordPointer is export;
our &glFogCoordPointerEXT is export;
our &glFogCoordPointerListIBM is export;
our &glFogCoordd is export;
our &glFogCoorddEXT is export;
our &glFogCoorddv is export;
our &glFogCoorddvEXT is export;
our &glFogCoordf is export;
our &glFogCoordfEXT is export;
our &glFogCoordfv is export;
our &glFogCoordfvEXT is export;
our &glFogCoordhNV is export;
our &glFogCoordhvNV is export;
our &glFogFuncSGIS is export;
our &glFogf is export;
our &glFogfv is export;
our &glFogi is export;
our &glFogiv is export;
our &glFogx is export;
our &glFogxOES is export;
our &glFogxv is export;
our &glFogxvOES is export;
our &glFragmentColorMaterialSGIX is export;
our &glFragmentCoverageColorNV is export;
our &glFragmentLightModelfSGIX is export;
our &glFragmentLightModelfvSGIX is export;
our &glFragmentLightModeliSGIX is export;
our &glFragmentLightModelivSGIX is export;
our &glFragmentLightfSGIX is export;
our &glFragmentLightfvSGIX is export;
our &glFragmentLightiSGIX is export;
our &glFragmentLightivSGIX is export;
our &glFragmentMaterialfSGIX is export;
our &glFragmentMaterialfvSGIX is export;
our &glFragmentMaterialiSGIX is export;
our &glFragmentMaterialivSGIX is export;
our &glFrameTerminatorGREMEDY is export;
our &glFrameZoomSGIX is export;
our &glFramebufferDrawBufferEXT is export;
our &glFramebufferDrawBuffersEXT is export;
our &glFramebufferFetchBarrierEXT is export;
our &glFramebufferFetchBarrierQCOM is export;
our &glFramebufferFoveationConfigQCOM is export;
our &glFramebufferFoveationParametersQCOM is export;
our &glFramebufferParameteri is export;
our &glFramebufferPixelLocalStorageSizeEXT is export;
our &glFramebufferReadBufferEXT is export;
our &glFramebufferRenderbuffer is export;
our &glFramebufferRenderbufferEXT is export;
our &glFramebufferRenderbufferOES is export;
our &glFramebufferSampleLocationsfvARB is export;
our &glFramebufferSampleLocationsfvNV is export;
our &glFramebufferSamplePositionsfvAMD is export;
our &glFramebufferTexture is export;
our &glFramebufferTexture1D is export;
our &glFramebufferTexture1DEXT is export;
our &glFramebufferTexture2D is export;
our &glFramebufferTexture2DEXT is export;
our &glFramebufferTexture2DDownsampleIMG is export;
our &glFramebufferTexture2DMultisampleEXT is export;
our &glFramebufferTexture2DMultisampleIMG is export;
our &glFramebufferTexture2DOES is export;
our &glFramebufferTexture3D is export;
our &glFramebufferTexture3DEXT is export;
our &glFramebufferTexture3DOES is export;
our &glFramebufferTextureARB is export;
our &glFramebufferTextureEXT is export;
our &glFramebufferTextureFaceARB is export;
our &glFramebufferTextureFaceEXT is export;
our &glFramebufferTextureLayer is export;
our &glFramebufferTextureLayerARB is export;
our &glFramebufferTextureLayerEXT is export;
our &glFramebufferTextureLayerDownsampleIMG is export;
our &glFramebufferTextureMultisampleMultiviewOVR is export;
our &glFramebufferTextureMultiviewOVR is export;
our &glFramebufferTextureOES is export;
our &glFreeObjectBufferATI is export;
our &glFrontFace is export;
our &glFrustum is export;
our &glFrustumf is export;
our &glFrustumfOES is export;
our &glFrustumx is export;
our &glFrustumxOES is export;
our &glGenAsyncMarkersSGIX is export;
our &glGenBuffers is export;
our &glGenBuffersARB is export;
our &glGenFencesAPPLE is export;
our &glGenFencesNV is export;
our &glGenFragmentShadersATI is export;
our &glGenFramebuffers is export;
our &glGenFramebuffersEXT is export;
our &glGenFramebuffersOES is export;
our &glGenLists is export;
our &glGenNamesAMD is export;
our &glGenOcclusionQueriesNV is export;
our &glGenPathsNV is export;
our &glGenPerfMonitorsAMD is export;
our &glGenProgramPipelines is export;
our &glGenProgramPipelinesEXT is export;
our &glGenProgramsARB is export;
our &glGenProgramsNV is export;
our &glGenQueries is export;
our &glGenQueriesARB is export;
our &glGenQueriesEXT is export;
our &glGenQueryResourceTagNV is export;
our &glGenRenderbuffers is export;
our &glGenRenderbuffersEXT is export;
our &glGenRenderbuffersOES is export;
our &glGenSamplers is export;
our &glGenSemaphoresEXT is export;
our &glGenSymbolsEXT is export;
our &glGenTextures is export;
our &glGenTexturesEXT is export;
our &glGenTransformFeedbacks is export;
our &glGenTransformFeedbacksNV is export;
our &glGenVertexArrays is export;
our &glGenVertexArraysAPPLE is export;
our &glGenVertexArraysOES is export;
our &glGenVertexShadersEXT is export;
our &glGenerateMipmap is export;
our &glGenerateMipmapEXT is export;
our &glGenerateMipmapOES is export;
our &glGenerateMultiTexMipmapEXT is export;
our &glGenerateTextureMipmap is export;
our &glGenerateTextureMipmapEXT is export;
our &glGetActiveAtomicCounterBufferiv is export;
our &glGetActiveAttrib is export;
our &glGetActiveAttribARB is export;
our &glGetActiveSubroutineName is export;
our &glGetActiveSubroutineUniformName is export;
our &glGetActiveSubroutineUniformiv is export;
our &glGetActiveUniform is export;
our &glGetActiveUniformARB is export;
our &glGetActiveUniformBlockName is export;
our &glGetActiveUniformBlockiv is export;
our &glGetActiveUniformName is export;
our &glGetActiveUniformsiv is export;
our &glGetActiveVaryingNV is export;
our &glGetArrayObjectfvATI is export;
our &glGetArrayObjectivATI is export;
our &glGetAttachedObjectsARB is export;
our &glGetAttachedShaders is export;
our &glGetAttribLocation is export;
our &glGetAttribLocationARB is export;
our &glGetBooleanIndexedvEXT is export;
our &glGetBooleani_v is export;
our &glGetBooleanv is export;
our &glGetBufferParameteri64v is export;
our &glGetBufferParameteriv is export;
our &glGetBufferParameterivARB is export;
our &glGetBufferParameterui64vNV is export;
our &glGetBufferPointerv is export;
our &glGetBufferPointervARB is export;
our &glGetBufferPointervOES is export;
our &glGetBufferSubData is export;
our &glGetBufferSubDataARB is export;
our &glGetClipPlane is export;
our &glGetClipPlanef is export;
our &glGetClipPlanefOES is export;
our &glGetClipPlanex is export;
our &glGetClipPlanexOES is export;
our &glGetColorTable is export;
our &glGetColorTableEXT is export;
our &glGetColorTableParameterfv is export;
our &glGetColorTableParameterfvEXT is export;
our &glGetColorTableParameterfvSGI is export;
our &glGetColorTableParameteriv is export;
our &glGetColorTableParameterivEXT is export;
our &glGetColorTableParameterivSGI is export;
our &glGetColorTableSGI is export;
our &glGetCombinerInputParameterfvNV is export;
our &glGetCombinerInputParameterivNV is export;
our &glGetCombinerOutputParameterfvNV is export;
our &glGetCombinerOutputParameterivNV is export;
our &glGetCombinerStageParameterfvNV is export;
our &glGetCommandHeaderNV is export;
our &glGetCompressedMultiTexImageEXT is export;
our &glGetCompressedTexImage is export;
our &glGetCompressedTexImageARB is export;
our &glGetCompressedTextureImage is export;
our &glGetCompressedTextureImageEXT is export;
our &glGetCompressedTextureSubImage is export;
our &glGetConvolutionFilter is export;
our &glGetConvolutionFilterEXT is export;
our &glGetConvolutionParameterfv is export;
our &glGetConvolutionParameterfvEXT is export;
our &glGetConvolutionParameteriv is export;
our &glGetConvolutionParameterivEXT is export;
our &glGetConvolutionParameterxvOES is export;
our &glGetCoverageModulationTableNV is export;
our &glGetDebugMessageLog is export;
our &glGetDebugMessageLogAMD is export;
our &glGetDebugMessageLogARB is export;
our &glGetDebugMessageLogKHR is export;
our &glGetDetailTexFuncSGIS is export;
our &glGetDoubleIndexedvEXT is export;
our &glGetDoublei_v is export;
our &glGetDoublei_vEXT is export;
our &glGetDoublev is export;
our &glGetDriverControlStringQCOM is export;
our &glGetDriverControlsQCOM is export;
our &glGetError is export;
our &glGetFenceivNV is export;
our &glGetFinalCombinerInputParameterfvNV is export;
our &glGetFinalCombinerInputParameterivNV is export;
our &glGetFirstPerfQueryIdINTEL is export;
our &glGetFixedv is export;
our &glGetFixedvOES is export;
our &glGetFloatIndexedvEXT is export;
our &glGetFloati_v is export;
our &glGetFloati_vEXT is export;
our &glGetFloati_vNV is export;
our &glGetFloati_vOES is export;
our &glGetFloatv is export;
our &glGetFogFuncSGIS is export;
our &glGetFragDataIndex is export;
our &glGetFragDataIndexEXT is export;
our &glGetFragDataLocation is export;
our &glGetFragDataLocationEXT is export;
our &glGetFragmentLightfvSGIX is export;
our &glGetFragmentLightivSGIX is export;
our &glGetFragmentMaterialfvSGIX is export;
our &glGetFragmentMaterialivSGIX is export;
our &glGetFramebufferAttachmentParameteriv is export;
our &glGetFramebufferAttachmentParameterivEXT is export;
our &glGetFramebufferAttachmentParameterivOES is export;
our &glGetFramebufferParameterfvAMD is export;
our &glGetFramebufferParameteriv is export;
our &glGetFramebufferParameterivEXT is export;
our &glGetFramebufferPixelLocalStorageSizeEXT is export;
our &glGetGraphicsResetStatus is export;
our &glGetGraphicsResetStatusARB is export;
our &glGetGraphicsResetStatusEXT is export;
our &glGetGraphicsResetStatusKHR is export;
our &glGetHandleARB is export;
our &glGetHistogram is export;
our &glGetHistogramEXT is export;
our &glGetHistogramParameterfv is export;
our &glGetHistogramParameterfvEXT is export;
our &glGetHistogramParameteriv is export;
our &glGetHistogramParameterivEXT is export;
our &glGetHistogramParameterxvOES is export;
our &glGetImageHandleARB is export;
our &glGetImageHandleNV is export;
our &glGetImageTransformParameterfvHP is export;
our &glGetImageTransformParameterivHP is export;
our &glGetInfoLogARB is export;
our &glGetInstrumentsSGIX is export;
our &glGetInteger64i_v is export;
our &glGetInteger64v is export;
our &glGetInteger64vAPPLE is export;
our &glGetInteger64vEXT is export;
our &glGetIntegerIndexedvEXT is export;
our &glGetIntegeri_v is export;
our &glGetIntegeri_vEXT is export;
our &glGetIntegerui64i_vNV is export;
our &glGetIntegerui64vNV is export;
our &glGetIntegerv is export;
our &glGetInternalformatSampleivNV is export;
our &glGetInternalformati64v is export;
our &glGetInternalformativ is export;
our &glGetInvariantBooleanvEXT is export;
our &glGetInvariantFloatvEXT is export;
our &glGetInvariantIntegervEXT is export;
our &glGetLightfv is export;
our &glGetLightiv is export;
our &glGetLightxOES is export;
our &glGetLightxv is export;
our &glGetLightxvOES is export;
our &glGetListParameterfvSGIX is export;
our &glGetListParameterivSGIX is export;
our &glGetLocalConstantBooleanvEXT is export;
our &glGetLocalConstantFloatvEXT is export;
our &glGetLocalConstantIntegervEXT is export;
our &glGetMapAttribParameterfvNV is export;
our &glGetMapAttribParameterivNV is export;
our &glGetMapControlPointsNV is export;
our &glGetMapParameterfvNV is export;
our &glGetMapParameterivNV is export;
our &glGetMapdv is export;
our &glGetMapfv is export;
our &glGetMapiv is export;
our &glGetMapxvOES is export;
our &glGetMaterialfv is export;
our &glGetMaterialiv is export;
our &glGetMaterialxOES is export;
our &glGetMaterialxv is export;
our &glGetMaterialxvOES is export;
our &glGetMemoryObjectDetachedResourcesuivNV is export;
our &glGetMemoryObjectParameterivEXT is export;
our &glGetMinmax is export;
our &glGetMinmaxEXT is export;
our &glGetMinmaxParameterfv is export;
our &glGetMinmaxParameterfvEXT is export;
our &glGetMinmaxParameteriv is export;
our &glGetMinmaxParameterivEXT is export;
our &glGetMultiTexEnvfvEXT is export;
our &glGetMultiTexEnvivEXT is export;
our &glGetMultiTexGendvEXT is export;
our &glGetMultiTexGenfvEXT is export;
our &glGetMultiTexGenivEXT is export;
our &glGetMultiTexImageEXT is export;
our &glGetMultiTexLevelParameterfvEXT is export;
our &glGetMultiTexLevelParameterivEXT is export;
our &glGetMultiTexParameterIivEXT is export;
our &glGetMultiTexParameterIuivEXT is export;
our &glGetMultiTexParameterfvEXT is export;
our &glGetMultiTexParameterivEXT is export;
our &glGetMultisamplefv is export;
our &glGetMultisamplefvNV is export;
our &glGetNamedBufferParameteri64v is export;
our &glGetNamedBufferParameteriv is export;
our &glGetNamedBufferParameterivEXT is export;
our &glGetNamedBufferParameterui64vNV is export;
our &glGetNamedBufferPointerv is export;
our &glGetNamedBufferPointervEXT is export;
our &glGetNamedBufferSubData is export;
our &glGetNamedBufferSubDataEXT is export;
our &glGetNamedFramebufferParameterfvAMD is export;
our &glGetNamedFramebufferAttachmentParameteriv is export;
our &glGetNamedFramebufferAttachmentParameterivEXT is export;
our &glGetNamedFramebufferParameteriv is export;
our &glGetNamedFramebufferParameterivEXT is export;
our &glGetNamedProgramLocalParameterIivEXT is export;
our &glGetNamedProgramLocalParameterIuivEXT is export;
our &glGetNamedProgramLocalParameterdvEXT is export;
our &glGetNamedProgramLocalParameterfvEXT is export;
our &glGetNamedProgramStringEXT is export;
our &glGetNamedProgramivEXT is export;
our &glGetNamedRenderbufferParameteriv is export;
our &glGetNamedRenderbufferParameterivEXT is export;
our &glGetNamedStringARB is export;
our &glGetNamedStringivARB is export;
our &glGetNextPerfQueryIdINTEL is export;
our &glGetObjectBufferfvATI is export;
our &glGetObjectBufferivATI is export;
our &glGetObjectLabel is export;
our &glGetObjectLabelEXT is export;
our &glGetObjectLabelKHR is export;
our &glGetObjectParameterfvARB is export;
our &glGetObjectParameterivAPPLE is export;
our &glGetObjectParameterivARB is export;
our &glGetObjectPtrLabel is export;
our &glGetObjectPtrLabelKHR is export;
our &glGetOcclusionQueryivNV is export;
our &glGetOcclusionQueryuivNV is export;
our &glGetPathColorGenfvNV is export;
our &glGetPathColorGenivNV is export;
our &glGetPathCommandsNV is export;
our &glGetPathCoordsNV is export;
our &glGetPathDashArrayNV is export;
our &glGetPathLengthNV is export;
our &glGetPathMetricRangeNV is export;
our &glGetPathMetricsNV is export;
our &glGetPathParameterfvNV is export;
our &glGetPathParameterivNV is export;
our &glGetPathSpacingNV is export;
our &glGetPathTexGenfvNV is export;
our &glGetPathTexGenivNV is export;
our &glGetPerfCounterInfoINTEL is export;
our &glGetPerfMonitorCounterDataAMD is export;
our &glGetPerfMonitorCounterInfoAMD is export;
our &glGetPerfMonitorCounterStringAMD is export;
our &glGetPerfMonitorCountersAMD is export;
our &glGetPerfMonitorGroupStringAMD is export;
our &glGetPerfMonitorGroupsAMD is export;
our &glGetPerfQueryDataINTEL is export;
our &glGetPerfQueryIdByNameINTEL is export;
our &glGetPerfQueryInfoINTEL is export;
our &glGetPixelMapfv is export;
our &glGetPixelMapuiv is export;
our &glGetPixelMapusv is export;
our &glGetPixelMapxv is export;
our &glGetPixelTexGenParameterfvSGIS is export;
our &glGetPixelTexGenParameterivSGIS is export;
our &glGetPixelTransformParameterfvEXT is export;
our &glGetPixelTransformParameterivEXT is export;
our &glGetPointerIndexedvEXT is export;
our &glGetPointeri_vEXT is export;
our &glGetPointerv is export;
our &glGetPointervEXT is export;
our &glGetPointervKHR is export;
our &glGetPolygonStipple is export;
our &glGetProgramBinary is export;
our &glGetProgramBinaryOES is export;
our &glGetProgramEnvParameterIivNV is export;
our &glGetProgramEnvParameterIuivNV is export;
our &glGetProgramEnvParameterdvARB is export;
our &glGetProgramEnvParameterfvARB is export;
our &glGetProgramInfoLog is export;
our &glGetProgramInterfaceiv is export;
our &glGetProgramLocalParameterIivNV is export;
our &glGetProgramLocalParameterIuivNV is export;
our &glGetProgramLocalParameterdvARB is export;
our &glGetProgramLocalParameterfvARB is export;
our &glGetProgramNamedParameterdvNV is export;
our &glGetProgramNamedParameterfvNV is export;
our &glGetProgramParameterdvNV is export;
our &glGetProgramParameterfvNV is export;
our &glGetProgramPipelineInfoLog is export;
our &glGetProgramPipelineInfoLogEXT is export;
our &glGetProgramPipelineiv is export;
our &glGetProgramPipelineivEXT is export;
our &glGetProgramResourceIndex is export;
our &glGetProgramResourceLocation is export;
our &glGetProgramResourceLocationIndex is export;
our &glGetProgramResourceLocationIndexEXT is export;
our &glGetProgramResourceName is export;
our &glGetProgramResourcefvNV is export;
our &glGetProgramResourceiv is export;
our &glGetProgramStageiv is export;
our &glGetProgramStringARB is export;
our &glGetProgramStringNV is export;
our &glGetProgramSubroutineParameteruivNV is export;
our &glGetProgramiv is export;
our &glGetProgramivARB is export;
our &glGetProgramivNV is export;
our &glGetQueryBufferObjecti64v is export;
our &glGetQueryBufferObjectiv is export;
our &glGetQueryBufferObjectui64v is export;
our &glGetQueryBufferObjectuiv is export;
our &glGetQueryIndexediv is export;
our &glGetQueryObjecti64v is export;
our &glGetQueryObjecti64vEXT is export;
our &glGetQueryObjectiv is export;
our &glGetQueryObjectivARB is export;
our &glGetQueryObjectivEXT is export;
our &glGetQueryObjectui64v is export;
our &glGetQueryObjectui64vEXT is export;
our &glGetQueryObjectuiv is export;
our &glGetQueryObjectuivARB is export;
our &glGetQueryObjectuivEXT is export;
our &glGetQueryiv is export;
our &glGetQueryivARB is export;
our &glGetQueryivEXT is export;
our &glGetRenderbufferParameteriv is export;
our &glGetRenderbufferParameterivEXT is export;
our &glGetRenderbufferParameterivOES is export;
our &glGetSamplerParameterIiv is export;
our &glGetSamplerParameterIivEXT is export;
our &glGetSamplerParameterIivOES is export;
our &glGetSamplerParameterIuiv is export;
our &glGetSamplerParameterIuivEXT is export;
our &glGetSamplerParameterIuivOES is export;
our &glGetSamplerParameterfv is export;
our &glGetSamplerParameteriv is export;
our &glGetSemaphoreParameterivNV is export;
our &glGetSemaphoreParameterui64vEXT is export;
our &glGetSeparableFilter is export;
our &glGetSeparableFilterEXT is export;
our &glGetShaderInfoLog is export;
our &glGetShaderPrecisionFormat is export;
our &glGetShaderSource is export;
our &glGetShaderSourceARB is export;
our &glGetShaderiv is export;
our &glGetShadingRateImagePaletteNV is export;
our &glGetShadingRateSampleLocationivNV is export;
our &glGetSharpenTexFuncSGIS is export;
our &glGetStageIndexNV is export;
our &glGetString is export;
our &glGetStringi is export;
our &glGetSubroutineIndex is export;
our &glGetSubroutineUniformLocation is export;
our &glGetSynciv is export;
our &glGetSyncivAPPLE is export;
our &glGetTexBumpParameterfvATI is export;
our &glGetTexBumpParameterivATI is export;
our &glGetTexEnvfv is export;
our &glGetTexEnviv is export;
our &glGetTexEnvxv is export;
our &glGetTexEnvxvOES is export;
our &glGetTexFilterFuncSGIS is export;
our &glGetTexGendv is export;
our &glGetTexGenfv is export;
our &glGetTexGenfvOES is export;
our &glGetTexGeniv is export;
our &glGetTexGenivOES is export;
our &glGetTexGenxvOES is export;
our &glGetTexImage is export;
our &glGetTexLevelParameterfv is export;
our &glGetTexLevelParameteriv is export;
our &glGetTexLevelParameterxvOES is export;
our &glGetTexParameterIiv is export;
our &glGetTexParameterIivEXT is export;
our &glGetTexParameterIivOES is export;
our &glGetTexParameterIuiv is export;
our &glGetTexParameterIuivEXT is export;
our &glGetTexParameterIuivOES is export;
our &glGetTexParameterPointervAPPLE is export;
our &glGetTexParameterfv is export;
our &glGetTexParameteriv is export;
our &glGetTexParameterxv is export;
our &glGetTexParameterxvOES is export;
our &glGetTextureHandleARB is export;
our &glGetTextureHandleIMG is export;
our &glGetTextureHandleNV is export;
our &glGetTextureImage is export;
our &glGetTextureImageEXT is export;
our &glGetTextureLevelParameterfv is export;
our &glGetTextureLevelParameterfvEXT is export;
our &glGetTextureLevelParameteriv is export;
our &glGetTextureLevelParameterivEXT is export;
our &glGetTextureParameterIiv is export;
our &glGetTextureParameterIivEXT is export;
our &glGetTextureParameterIuiv is export;
our &glGetTextureParameterIuivEXT is export;
our &glGetTextureParameterfv is export;
our &glGetTextureParameterfvEXT is export;
our &glGetTextureParameteriv is export;
our &glGetTextureParameterivEXT is export;
our &glGetTextureSamplerHandleARB is export;
our &glGetTextureSamplerHandleIMG is export;
our &glGetTextureSamplerHandleNV is export;
our &glGetTextureSubImage is export;
our &glGetTrackMatrixivNV is export;
our &glGetTransformFeedbackVarying is export;
our &glGetTransformFeedbackVaryingEXT is export;
our &glGetTransformFeedbackVaryingNV is export;
our &glGetTransformFeedbacki64_v is export;
our &glGetTransformFeedbacki_v is export;
our &glGetTransformFeedbackiv is export;
our &glGetTranslatedShaderSourceANGLE is export;
our &glGetUniformBlockIndex is export;
our &glGetUniformBufferSizeEXT is export;
our &glGetUniformIndices is export;
our &glGetUniformLocation is export;
our &glGetUniformLocationARB is export;
our &glGetUniformOffsetEXT is export;
our &glGetUniformSubroutineuiv is export;
our &glGetUniformdv is export;
our &glGetUniformfv is export;
our &glGetUniformfvARB is export;
our &glGetUniformi64vARB is export;
our &glGetUniformi64vNV is export;
our &glGetUniformiv is export;
our &glGetUniformivARB is export;
our &glGetUniformui64vARB is export;
our &glGetUniformui64vNV is export;
our &glGetUniformuiv is export;
our &glGetUniformuivEXT is export;
our &glGetUnsignedBytevEXT is export;
our &glGetUnsignedBytei_vEXT is export;
our &glGetVariantArrayObjectfvATI is export;
our &glGetVariantArrayObjectivATI is export;
our &glGetVariantBooleanvEXT is export;
our &glGetVariantFloatvEXT is export;
our &glGetVariantIntegervEXT is export;
our &glGetVariantPointervEXT is export;
our &glGetVaryingLocationNV is export;
our &glGetVertexArrayIndexed64iv is export;
our &glGetVertexArrayIndexediv is export;
our &glGetVertexArrayIntegeri_vEXT is export;
our &glGetVertexArrayIntegervEXT is export;
our &glGetVertexArrayPointeri_vEXT is export;
our &glGetVertexArrayPointervEXT is export;
our &glGetVertexArrayiv is export;
our &glGetVertexAttribArrayObjectfvATI is export;
our &glGetVertexAttribArrayObjectivATI is export;
our &glGetVertexAttribIiv is export;
our &glGetVertexAttribIivEXT is export;
our &glGetVertexAttribIuiv is export;
our &glGetVertexAttribIuivEXT is export;
our &glGetVertexAttribLdv is export;
our &glGetVertexAttribLdvEXT is export;
our &glGetVertexAttribLi64vNV is export;
our &glGetVertexAttribLui64vARB is export;
our &glGetVertexAttribLui64vNV is export;
our &glGetVertexAttribPointerv is export;
our &glGetVertexAttribPointervARB is export;
our &glGetVertexAttribPointervNV is export;
our &glGetVertexAttribdv is export;
our &glGetVertexAttribdvARB is export;
our &glGetVertexAttribdvNV is export;
our &glGetVertexAttribfv is export;
our &glGetVertexAttribfvARB is export;
our &glGetVertexAttribfvNV is export;
our &glGetVertexAttribiv is export;
our &glGetVertexAttribivARB is export;
our &glGetVertexAttribivNV is export;
our &glGetVideoCaptureStreamdvNV is export;
our &glGetVideoCaptureStreamfvNV is export;
our &glGetVideoCaptureStreamivNV is export;
our &glGetVideoCaptureivNV is export;
our &glGetVideoi64vNV is export;
our &glGetVideoivNV is export;
our &glGetVideoui64vNV is export;
our &glGetVideouivNV is export;
our &glGetnColorTable is export;
our &glGetnColorTableARB is export;
our &glGetnCompressedTexImage is export;
our &glGetnCompressedTexImageARB is export;
our &glGetnConvolutionFilter is export;
our &glGetnConvolutionFilterARB is export;
our &glGetnHistogram is export;
our &glGetnHistogramARB is export;
our &glGetnMapdv is export;
our &glGetnMapdvARB is export;
our &glGetnMapfv is export;
our &glGetnMapfvARB is export;
our &glGetnMapiv is export;
our &glGetnMapivARB is export;
our &glGetnMinmax is export;
our &glGetnMinmaxARB is export;
our &glGetnPixelMapfv is export;
our &glGetnPixelMapfvARB is export;
our &glGetnPixelMapuiv is export;
our &glGetnPixelMapuivARB is export;
our &glGetnPixelMapusv is export;
our &glGetnPixelMapusvARB is export;
our &glGetnPolygonStipple is export;
our &glGetnPolygonStippleARB is export;
our &glGetnSeparableFilter is export;
our &glGetnSeparableFilterARB is export;
our &glGetnTexImage is export;
our &glGetnTexImageARB is export;
our &glGetnUniformdv is export;
our &glGetnUniformdvARB is export;
our &glGetnUniformfv is export;
our &glGetnUniformfvARB is export;
our &glGetnUniformfvEXT is export;
our &glGetnUniformfvKHR is export;
our &glGetnUniformi64vARB is export;
our &glGetnUniformiv is export;
our &glGetnUniformivARB is export;
our &glGetnUniformivEXT is export;
our &glGetnUniformivKHR is export;
our &glGetnUniformui64vARB is export;
our &glGetnUniformuiv is export;
our &glGetnUniformuivARB is export;
our &glGetnUniformuivKHR is export;
our &glGlobalAlphaFactorbSUN is export;
our &glGlobalAlphaFactordSUN is export;
our &glGlobalAlphaFactorfSUN is export;
our &glGlobalAlphaFactoriSUN is export;
our &glGlobalAlphaFactorsSUN is export;
our &glGlobalAlphaFactorubSUN is export;
our &glGlobalAlphaFactoruiSUN is export;
our &glGlobalAlphaFactorusSUN is export;
our &glHint is export;
our &glHintPGI is export;
our &glHistogram is export;
our &glHistogramEXT is export;
our &glIglooInterfaceSGIX is export;
our &glImageTransformParameterfHP is export;
our &glImageTransformParameterfvHP is export;
our &glImageTransformParameteriHP is export;
our &glImageTransformParameterivHP is export;
our &glImportMemoryFdEXT is export;
our &glImportMemoryWin32HandleEXT is export;
our &glImportMemoryWin32NameEXT is export;
our &glImportSemaphoreFdEXT is export;
our &glImportSemaphoreWin32HandleEXT is export;
our &glImportSemaphoreWin32NameEXT is export;
our &glImportSyncEXT is export;
our &glIndexFormatNV is export;
our &glIndexFuncEXT is export;
our &glIndexMask is export;
our &glIndexMaterialEXT is export;
our &glIndexPointer is export;
our &glIndexPointerEXT is export;
our &glIndexPointerListIBM is export;
our &glIndexd is export;
our &glIndexdv is export;
our &glIndexf is export;
our &glIndexfv is export;
our &glIndexi is export;
our &glIndexiv is export;
our &glIndexs is export;
our &glIndexsv is export;
our &glIndexub is export;
our &glIndexubv is export;
our &glIndexxOES is export;
our &glIndexxvOES is export;
our &glInitNames is export;
our &glInsertComponentEXT is export;
our &glInsertEventMarkerEXT is export;
our &glInstrumentsBufferSGIX is export;
our &glInterleavedArrays is export;
our &glInterpolatePathsNV is export;
our &glInvalidateBufferData is export;
our &glInvalidateBufferSubData is export;
our &glInvalidateFramebuffer is export;
our &glInvalidateNamedFramebufferData is export;
our &glInvalidateNamedFramebufferSubData is export;
our &glInvalidateSubFramebuffer is export;
our &glInvalidateTexImage is export;
our &glInvalidateTexSubImage is export;
our &glIsAsyncMarkerSGIX is export;
our &glIsBuffer is export;
our &glIsBufferARB is export;
our &glIsBufferResidentNV is export;
our &glIsCommandListNV is export;
our &glIsEnabled is export;
our &glIsEnabledIndexedEXT is export;
our &glIsEnabledi is export;
our &glIsEnablediEXT is export;
our &glIsEnablediNV is export;
our &glIsEnablediOES is export;
our &glIsFenceAPPLE is export;
our &glIsFenceNV is export;
our &glIsFramebuffer is export;
our &glIsFramebufferEXT is export;
our &glIsFramebufferOES is export;
our &glIsImageHandleResidentARB is export;
our &glIsImageHandleResidentNV is export;
our &glIsList is export;
our &glIsMemoryObjectEXT is export;
our &glIsNameAMD is export;
our &glIsNamedBufferResidentNV is export;
our &glIsNamedStringARB is export;
our &glIsObjectBufferATI is export;
our &glIsOcclusionQueryNV is export;
our &glIsPathNV is export;
our &glIsPointInFillPathNV is export;
our &glIsPointInStrokePathNV is export;
our &glIsProgram is export;
our &glIsProgramARB is export;
our &glIsProgramNV is export;
our &glIsProgramPipeline is export;
our &glIsProgramPipelineEXT is export;
our &glIsQuery is export;
our &glIsQueryARB is export;
our &glIsQueryEXT is export;
our &glIsRenderbuffer is export;
our &glIsRenderbufferEXT is export;
our &glIsRenderbufferOES is export;
our &glIsSemaphoreEXT is export;
our &glIsSampler is export;
our &glIsShader is export;
our &glIsStateNV is export;
our &glIsSync is export;
our &glIsSyncAPPLE is export;
our &glIsTexture is export;
our &glIsTextureEXT is export;
our &glIsTextureHandleResidentARB is export;
our &glIsTextureHandleResidentNV is export;
our &glIsTransformFeedback is export;
our &glIsTransformFeedbackNV is export;
our &glIsVariantEnabledEXT is export;
our &glIsVertexArray is export;
our &glIsVertexArrayAPPLE is export;
our &glIsVertexArrayOES is export;
our &glIsVertexAttribEnabledAPPLE is export;
our &glLGPUCopyImageSubDataNVX is export;
our &glLGPUInterlockNVX is export;
our &glLGPUNamedBufferSubDataNVX is export;
our &glLabelObjectEXT is export;
our &glLightEnviSGIX is export;
our &glLightModelf is export;
our &glLightModelfv is export;
our &glLightModeli is export;
our &glLightModeliv is export;
our &glLightModelx is export;
our &glLightModelxOES is export;
our &glLightModelxv is export;
our &glLightModelxvOES is export;
our &glLightf is export;
our &glLightfv is export;
our &glLighti is export;
our &glLightiv is export;
our &glLightx is export;
our &glLightxOES is export;
our &glLightxv is export;
our &glLightxvOES is export;
our &glLineStipple is export;
our &glLineWidth is export;
our &glLineWidthx is export;
our &glLineWidthxOES is export;
our &glLinkProgram is export;
our &glLinkProgramARB is export;
our &glListBase is export;
our &glListDrawCommandsStatesClientNV is export;
our &glListParameterfSGIX is export;
our &glListParameterfvSGIX is export;
our &glListParameteriSGIX is export;
our &glListParameterivSGIX is export;
our &glLoadIdentity is export;
our &glLoadIdentityDeformationMapSGIX is export;
our &glLoadMatrixd is export;
our &glLoadMatrixf is export;
our &glLoadMatrixx is export;
our &glLoadMatrixxOES is export;
our &glLoadName is export;
our &glLoadPaletteFromModelViewMatrixOES is export;
our &glLoadProgramNV is export;
our &glLoadTransposeMatrixd is export;
our &glLoadTransposeMatrixdARB is export;
our &glLoadTransposeMatrixf is export;
our &glLoadTransposeMatrixfARB is export;
our &glLoadTransposeMatrixxOES is export;
our &glLockArraysEXT is export;
our &glLogicOp is export;
our &glMakeBufferNonResidentNV is export;
our &glMakeBufferResidentNV is export;
our &glMakeImageHandleNonResidentARB is export;
our &glMakeImageHandleNonResidentNV is export;
our &glMakeImageHandleResidentARB is export;
our &glMakeImageHandleResidentNV is export;
our &glMakeNamedBufferNonResidentNV is export;
our &glMakeNamedBufferResidentNV is export;
our &glMakeTextureHandleNonResidentARB is export;
our &glMakeTextureHandleNonResidentNV is export;
our &glMakeTextureHandleResidentARB is export;
our &glMakeTextureHandleResidentNV is export;
our &glMap1d is export;
our &glMap1f is export;
our &glMap1xOES is export;
our &glMap2d is export;
our &glMap2f is export;
our &glMap2xOES is export;
our &glMapBuffer is export;
our &glMapBufferARB is export;
our &glMapBufferOES is export;
our &glMapBufferRange is export;
our &glMapBufferRangeEXT is export;
our &glMapControlPointsNV is export;
our &glMapGrid1d is export;
our &glMapGrid1f is export;
our &glMapGrid1xOES is export;
our &glMapGrid2d is export;
our &glMapGrid2f is export;
our &glMapGrid2xOES is export;
our &glMapNamedBuffer is export;
our &glMapNamedBufferEXT is export;
our &glMapNamedBufferRange is export;
our &glMapNamedBufferRangeEXT is export;
our &glMapObjectBufferATI is export;
our &glMapParameterfvNV is export;
our &glMapParameterivNV is export;
our &glMapTexture2DINTEL is export;
our &glMapVertexAttrib1dAPPLE is export;
our &glMapVertexAttrib1fAPPLE is export;
our &glMapVertexAttrib2dAPPLE is export;
our &glMapVertexAttrib2fAPPLE is export;
our &glMaterialf is export;
our &glMaterialfv is export;
our &glMateriali is export;
our &glMaterialiv is export;
our &glMaterialx is export;
our &glMaterialxOES is export;
our &glMaterialxv is export;
our &glMaterialxvOES is export;
our &glMatrixFrustumEXT is export;
our &glMatrixIndexPointerARB is export;
our &glMatrixIndexPointerOES is export;
our &glMatrixIndexubvARB is export;
our &glMatrixIndexuivARB is export;
our &glMatrixIndexusvARB is export;
our &glMatrixLoad3x2fNV is export;
our &glMatrixLoad3x3fNV is export;
our &glMatrixLoadIdentityEXT is export;
our &glMatrixLoadTranspose3x3fNV is export;
our &glMatrixLoadTransposedEXT is export;
our &glMatrixLoadTransposefEXT is export;
our &glMatrixLoaddEXT is export;
our &glMatrixLoadfEXT is export;
our &glMatrixMode is export;
our &glMatrixMult3x2fNV is export;
our &glMatrixMult3x3fNV is export;
our &glMatrixMultTranspose3x3fNV is export;
our &glMatrixMultTransposedEXT is export;
our &glMatrixMultTransposefEXT is export;
our &glMatrixMultdEXT is export;
our &glMatrixMultfEXT is export;
our &glMatrixOrthoEXT is export;
our &glMatrixPopEXT is export;
our &glMatrixPushEXT is export;
our &glMatrixRotatedEXT is export;
our &glMatrixRotatefEXT is export;
our &glMatrixScaledEXT is export;
our &glMatrixScalefEXT is export;
our &glMatrixTranslatedEXT is export;
our &glMatrixTranslatefEXT is export;
our &glMaxShaderCompilerThreadsKHR is export;
our &glMaxShaderCompilerThreadsARB is export;
our &glMemoryBarrier is export;
our &glMemoryBarrierByRegion is export;
our &glMemoryBarrierEXT is export;
our &glMemoryObjectParameterivEXT is export;
our &glMinSampleShading is export;
our &glMinSampleShadingARB is export;
our &glMinSampleShadingOES is export;
our &glMinmax is export;
our &glMinmaxEXT is export;
our &glMultMatrixd is export;
our &glMultMatrixf is export;
our &glMultMatrixx is export;
our &glMultMatrixxOES is export;
our &glMultTransposeMatrixd is export;
our &glMultTransposeMatrixdARB is export;
our &glMultTransposeMatrixf is export;
our &glMultTransposeMatrixfARB is export;
our &glMultTransposeMatrixxOES is export;
our &glMultiDrawArrays is export;
our &glMultiDrawArraysEXT is export;
our &glMultiDrawArraysIndirect is export;
our &glMultiDrawArraysIndirectAMD is export;
our &glMultiDrawArraysIndirectBindlessCountNV is export;
our &glMultiDrawArraysIndirectBindlessNV is export;
our &glMultiDrawArraysIndirectCount is export;
our &glMultiDrawArraysIndirectCountARB is export;
our &glMultiDrawArraysIndirectEXT is export;
our &glMultiDrawElementArrayAPPLE is export;
our &glMultiDrawElements is export;
our &glMultiDrawElementsBaseVertex is export;
our &glMultiDrawElementsBaseVertexEXT is export;
our &glMultiDrawElementsEXT is export;
our &glMultiDrawElementsIndirect is export;
our &glMultiDrawElementsIndirectAMD is export;
our &glMultiDrawElementsIndirectBindlessCountNV is export;
our &glMultiDrawElementsIndirectBindlessNV is export;
our &glMultiDrawElementsIndirectCount is export;
our &glMultiDrawElementsIndirectCountARB is export;
our &glMultiDrawElementsIndirectEXT is export;
our &glMultiDrawMeshTasksIndirectNV is export;
our &glMultiDrawMeshTasksIndirectCountNV is export;
our &glMultiDrawRangeElementArrayAPPLE is export;
our &glMultiModeDrawArraysIBM is export;
our &glMultiModeDrawElementsIBM is export;
our &glMultiTexBufferEXT is export;
our &glMultiTexCoord1bOES is export;
our &glMultiTexCoord1bvOES is export;
our &glMultiTexCoord1d is export;
our &glMultiTexCoord1dARB is export;
our &glMultiTexCoord1dv is export;
our &glMultiTexCoord1dvARB is export;
our &glMultiTexCoord1f is export;
our &glMultiTexCoord1fARB is export;
our &glMultiTexCoord1fv is export;
our &glMultiTexCoord1fvARB is export;
our &glMultiTexCoord1hNV is export;
our &glMultiTexCoord1hvNV is export;
our &glMultiTexCoord1i is export;
our &glMultiTexCoord1iARB is export;
our &glMultiTexCoord1iv is export;
our &glMultiTexCoord1ivARB is export;
our &glMultiTexCoord1s is export;
our &glMultiTexCoord1sARB is export;
our &glMultiTexCoord1sv is export;
our &glMultiTexCoord1svARB is export;
our &glMultiTexCoord1xOES is export;
our &glMultiTexCoord1xvOES is export;
our &glMultiTexCoord2bOES is export;
our &glMultiTexCoord2bvOES is export;
our &glMultiTexCoord2d is export;
our &glMultiTexCoord2dARB is export;
our &glMultiTexCoord2dv is export;
our &glMultiTexCoord2dvARB is export;
our &glMultiTexCoord2f is export;
our &glMultiTexCoord2fARB is export;
our &glMultiTexCoord2fv is export;
our &glMultiTexCoord2fvARB is export;
our &glMultiTexCoord2hNV is export;
our &glMultiTexCoord2hvNV is export;
our &glMultiTexCoord2i is export;
our &glMultiTexCoord2iARB is export;
our &glMultiTexCoord2iv is export;
our &glMultiTexCoord2ivARB is export;
our &glMultiTexCoord2s is export;
our &glMultiTexCoord2sARB is export;
our &glMultiTexCoord2sv is export;
our &glMultiTexCoord2svARB is export;
our &glMultiTexCoord2xOES is export;
our &glMultiTexCoord2xvOES is export;
our &glMultiTexCoord3bOES is export;
our &glMultiTexCoord3bvOES is export;
our &glMultiTexCoord3d is export;
our &glMultiTexCoord3dARB is export;
our &glMultiTexCoord3dv is export;
our &glMultiTexCoord3dvARB is export;
our &glMultiTexCoord3f is export;
our &glMultiTexCoord3fARB is export;
our &glMultiTexCoord3fv is export;
our &glMultiTexCoord3fvARB is export;
our &glMultiTexCoord3hNV is export;
our &glMultiTexCoord3hvNV is export;
our &glMultiTexCoord3i is export;
our &glMultiTexCoord3iARB is export;
our &glMultiTexCoord3iv is export;
our &glMultiTexCoord3ivARB is export;
our &glMultiTexCoord3s is export;
our &glMultiTexCoord3sARB is export;
our &glMultiTexCoord3sv is export;
our &glMultiTexCoord3svARB is export;
our &glMultiTexCoord3xOES is export;
our &glMultiTexCoord3xvOES is export;
our &glMultiTexCoord4bOES is export;
our &glMultiTexCoord4bvOES is export;
our &glMultiTexCoord4d is export;
our &glMultiTexCoord4dARB is export;
our &glMultiTexCoord4dv is export;
our &glMultiTexCoord4dvARB is export;
our &glMultiTexCoord4f is export;
our &glMultiTexCoord4fARB is export;
our &glMultiTexCoord4fv is export;
our &glMultiTexCoord4fvARB is export;
our &glMultiTexCoord4hNV is export;
our &glMultiTexCoord4hvNV is export;
our &glMultiTexCoord4i is export;
our &glMultiTexCoord4iARB is export;
our &glMultiTexCoord4iv is export;
our &glMultiTexCoord4ivARB is export;
our &glMultiTexCoord4s is export;
our &glMultiTexCoord4sARB is export;
our &glMultiTexCoord4sv is export;
our &glMultiTexCoord4svARB is export;
our &glMultiTexCoord4x is export;
our &glMultiTexCoord4xOES is export;
our &glMultiTexCoord4xvOES is export;
our &glMultiTexCoordP1ui is export;
our &glMultiTexCoordP1uiv is export;
our &glMultiTexCoordP2ui is export;
our &glMultiTexCoordP2uiv is export;
our &glMultiTexCoordP3ui is export;
our &glMultiTexCoordP3uiv is export;
our &glMultiTexCoordP4ui is export;
our &glMultiTexCoordP4uiv is export;
our &glMultiTexCoordPointerEXT is export;
our &glMultiTexEnvfEXT is export;
our &glMultiTexEnvfvEXT is export;
our &glMultiTexEnviEXT is export;
our &glMultiTexEnvivEXT is export;
our &glMultiTexGendEXT is export;
our &glMultiTexGendvEXT is export;
our &glMultiTexGenfEXT is export;
our &glMultiTexGenfvEXT is export;
our &glMultiTexGeniEXT is export;
our &glMultiTexGenivEXT is export;
our &glMultiTexImage1DEXT is export;
our &glMultiTexImage2DEXT is export;
our &glMultiTexImage3DEXT is export;
our &glMultiTexParameterIivEXT is export;
our &glMultiTexParameterIuivEXT is export;
our &glMultiTexParameterfEXT is export;
our &glMultiTexParameterfvEXT is export;
our &glMultiTexParameteriEXT is export;
our &glMultiTexParameterivEXT is export;
our &glMultiTexRenderbufferEXT is export;
our &glMultiTexSubImage1DEXT is export;
our &glMultiTexSubImage2DEXT is export;
our &glMultiTexSubImage3DEXT is export;
our &glMulticastBarrierNV is export;
our &glMulticastBlitFramebufferNV is export;
our &glMulticastBufferSubDataNV is export;
our &glMulticastCopyBufferSubDataNV is export;
our &glMulticastCopyImageSubDataNV is export;
our &glMulticastFramebufferSampleLocationsfvNV is export;
our &glMulticastGetQueryObjecti64vNV is export;
our &glMulticastGetQueryObjectivNV is export;
our &glMulticastGetQueryObjectui64vNV is export;
our &glMulticastGetQueryObjectuivNV is export;
our &glMulticastScissorArrayvNVX is export;
our &glMulticastViewportArrayvNVX is export;
our &glMulticastViewportPositionWScaleNVX is export;
our &glMulticastWaitSyncNV is export;
our &glNamedBufferAttachMemoryNV is export;
our &glNamedBufferData is export;
our &glNamedBufferDataEXT is export;
our &glNamedBufferPageCommitmentARB is export;
our &glNamedBufferPageCommitmentEXT is export;
our &glNamedBufferPageCommitmentMemNV is export;
our &glNamedBufferStorage is export;
our &glNamedBufferStorageExternalEXT is export;
our &glNamedBufferStorageEXT is export;
our &glNamedBufferStorageMemEXT is export;
our &glNamedBufferSubData is export;
our &glNamedBufferSubDataEXT is export;
our &glNamedCopyBufferSubDataEXT is export;
our &glNamedFramebufferDrawBuffer is export;
our &glNamedFramebufferDrawBuffers is export;
our &glNamedFramebufferParameteri is export;
our &glNamedFramebufferParameteriEXT is export;
our &glNamedFramebufferReadBuffer is export;
our &glNamedFramebufferRenderbuffer is export;
our &glNamedFramebufferRenderbufferEXT is export;
our &glNamedFramebufferSampleLocationsfvARB is export;
our &glNamedFramebufferSampleLocationsfvNV is export;
our &glNamedFramebufferTexture is export;
our &glNamedFramebufferSamplePositionsfvAMD is export;
our &glNamedFramebufferTexture1DEXT is export;
our &glNamedFramebufferTexture2DEXT is export;
our &glNamedFramebufferTexture3DEXT is export;
our &glNamedFramebufferTextureEXT is export;
our &glNamedFramebufferTextureFaceEXT is export;
our &glNamedFramebufferTextureLayer is export;
our &glNamedFramebufferTextureLayerEXT is export;
our &glNamedProgramLocalParameter4dEXT is export;
our &glNamedProgramLocalParameter4dvEXT is export;
our &glNamedProgramLocalParameter4fEXT is export;
our &glNamedProgramLocalParameter4fvEXT is export;
our &glNamedProgramLocalParameterI4iEXT is export;
our &glNamedProgramLocalParameterI4ivEXT is export;
our &glNamedProgramLocalParameterI4uiEXT is export;
our &glNamedProgramLocalParameterI4uivEXT is export;
our &glNamedProgramLocalParameters4fvEXT is export;
our &glNamedProgramLocalParametersI4ivEXT is export;
our &glNamedProgramLocalParametersI4uivEXT is export;
our &glNamedProgramStringEXT is export;
our &glNamedRenderbufferStorage is export;
our &glNamedRenderbufferStorageEXT is export;
our &glNamedRenderbufferStorageMultisample is export;
our &glNamedRenderbufferStorageMultisampleAdvancedAMD is export;
our &glNamedRenderbufferStorageMultisampleCoverageEXT is export;
our &glNamedRenderbufferStorageMultisampleEXT is export;
our &glNamedStringARB is export;
our &glNewList is export;
our &glNewObjectBufferATI is export;
our &glNormal3b is export;
our &glNormal3bv is export;
our &glNormal3d is export;
our &glNormal3dv is export;
our &glNormal3f is export;
our &glNormal3fVertex3fSUN is export;
our &glNormal3fVertex3fvSUN is export;
our &glNormal3fv is export;
our &glNormal3hNV is export;
our &glNormal3hvNV is export;
our &glNormal3i is export;
our &glNormal3iv is export;
our &glNormal3s is export;
our &glNormal3sv is export;
our &glNormal3x is export;
our &glNormal3xOES is export;
our &glNormal3xvOES is export;
our &glNormalFormatNV is export;
our &glNormalP3ui is export;
our &glNormalP3uiv is export;
our &glNormalPointer is export;
our &glNormalPointerEXT is export;
our &glNormalPointerListIBM is export;
our &glNormalPointervINTEL is export;
our &glNormalStream3bATI is export;
our &glNormalStream3bvATI is export;
our &glNormalStream3dATI is export;
our &glNormalStream3dvATI is export;
our &glNormalStream3fATI is export;
our &glNormalStream3fvATI is export;
our &glNormalStream3iATI is export;
our &glNormalStream3ivATI is export;
our &glNormalStream3sATI is export;
our &glNormalStream3svATI is export;
our &glObjectLabel is export;
our &glObjectLabelKHR is export;
our &glObjectPtrLabel is export;
our &glObjectPtrLabelKHR is export;
our &glObjectPurgeableAPPLE is export;
our &glObjectUnpurgeableAPPLE is export;
our &glOrtho is export;
our &glOrthof is export;
our &glOrthofOES is export;
our &glOrthox is export;
our &glOrthoxOES is export;
our &glPNTrianglesfATI is export;
our &glPNTrianglesiATI is export;
our &glPassTexCoordATI is export;
our &glPassThrough is export;
our &glPassThroughxOES is export;
our &glPatchParameterfv is export;
our &glPatchParameteri is export;
our &glPatchParameteriEXT is export;
our &glPatchParameteriOES is export;
our &glPathColorGenNV is export;
our &glPathCommandsNV is export;
our &glPathCoordsNV is export;
our &glPathCoverDepthFuncNV is export;
our &glPathDashArrayNV is export;
our &glPathFogGenNV is export;
our &glPathGlyphIndexArrayNV is export;
our &glPathGlyphIndexRangeNV is export;
our &glPathGlyphRangeNV is export;
our &glPathGlyphsNV is export;
our &glPathMemoryGlyphIndexArrayNV is export;
our &glPathParameterfNV is export;
our &glPathParameterfvNV is export;
our &glPathParameteriNV is export;
our &glPathParameterivNV is export;
our &glPathStencilDepthOffsetNV is export;
our &glPathStencilFuncNV is export;
our &glPathStringNV is export;
our &glPathSubCommandsNV is export;
our &glPathSubCoordsNV is export;
our &glPathTexGenNV is export;
our &glPauseTransformFeedback is export;
our &glPauseTransformFeedbackNV is export;
our &glPixelDataRangeNV is export;
our &glPixelMapfv is export;
our &glPixelMapuiv is export;
our &glPixelMapusv is export;
our &glPixelMapx is export;
our &glPixelStoref is export;
our &glPixelStorei is export;
our &glPixelStorex is export;
our &glPixelTexGenParameterfSGIS is export;
our &glPixelTexGenParameterfvSGIS is export;
our &glPixelTexGenParameteriSGIS is export;
our &glPixelTexGenParameterivSGIS is export;
our &glPixelTexGenSGIX is export;
our &glPixelTransferf is export;
our &glPixelTransferi is export;
our &glPixelTransferxOES is export;
our &glPixelTransformParameterfEXT is export;
our &glPixelTransformParameterfvEXT is export;
our &glPixelTransformParameteriEXT is export;
our &glPixelTransformParameterivEXT is export;
our &glPixelZoom is export;
our &glPixelZoomxOES is export;
our &glPointAlongPathNV is export;
our &glPointParameterf is export;
our &glPointParameterfARB is export;
our &glPointParameterfEXT is export;
our &glPointParameterfSGIS is export;
our &glPointParameterfv is export;
our &glPointParameterfvARB is export;
our &glPointParameterfvEXT is export;
our &glPointParameterfvSGIS is export;
our &glPointParameteri is export;
our &glPointParameteriNV is export;
our &glPointParameteriv is export;
our &glPointParameterivNV is export;
our &glPointParameterx is export;
our &glPointParameterxOES is export;
our &glPointParameterxv is export;
our &glPointParameterxvOES is export;
our &glPointSize is export;
our &glPointSizePointerOES is export;
our &glPointSizex is export;
our &glPointSizexOES is export;
our &glPollAsyncSGIX is export;
our &glPollInstrumentsSGIX is export;
our &glPolygonMode is export;
our &glPolygonModeNV is export;
our &glPolygonOffset is export;
our &glPolygonOffsetClamp is export;
our &glPolygonOffsetClampEXT is export;
our &glPolygonOffsetEXT is export;
our &glPolygonOffsetx is export;
our &glPolygonOffsetxOES is export;
our &glPolygonStipple is export;
our &glPopAttrib is export;
our &glPopClientAttrib is export;
our &glPopDebugGroup is export;
our &glPopDebugGroupKHR is export;
our &glPopGroupMarkerEXT is export;
our &glPopMatrix is export;
our &glPopName is export;
our &glPresentFrameDualFillNV is export;
our &glPresentFrameKeyedNV is export;
our &glPrimitiveBoundingBox is export;
our &glPrimitiveBoundingBoxARB is export;
our &glPrimitiveBoundingBoxEXT is export;
our &glPrimitiveBoundingBoxOES is export;
our &glPrimitiveRestartIndex is export;
our &glPrimitiveRestartIndexNV is export;
our &glPrimitiveRestartNV is export;
our &glPrioritizeTextures is export;
our &glPrioritizeTexturesEXT is export;
our &glPrioritizeTexturesxOES is export;
our &glProgramBinary is export;
our &glProgramBinaryOES is export;
our &glProgramBufferParametersIivNV is export;
our &glProgramBufferParametersIuivNV is export;
our &glProgramBufferParametersfvNV is export;
our &glProgramEnvParameter4dARB is export;
our &glProgramEnvParameter4dvARB is export;
our &glProgramEnvParameter4fARB is export;
our &glProgramEnvParameter4fvARB is export;
our &glProgramEnvParameterI4iNV is export;
our &glProgramEnvParameterI4ivNV is export;
our &glProgramEnvParameterI4uiNV is export;
our &glProgramEnvParameterI4uivNV is export;
our &glProgramEnvParameters4fvEXT is export;
our &glProgramEnvParametersI4ivNV is export;
our &glProgramEnvParametersI4uivNV is export;
our &glProgramLocalParameter4dARB is export;
our &glProgramLocalParameter4dvARB is export;
our &glProgramLocalParameter4fARB is export;
our &glProgramLocalParameter4fvARB is export;
our &glProgramLocalParameterI4iNV is export;
our &glProgramLocalParameterI4ivNV is export;
our &glProgramLocalParameterI4uiNV is export;
our &glProgramLocalParameterI4uivNV is export;
our &glProgramLocalParameters4fvEXT is export;
our &glProgramLocalParametersI4ivNV is export;
our &glProgramLocalParametersI4uivNV is export;
our &glProgramNamedParameter4dNV is export;
our &glProgramNamedParameter4dvNV is export;
our &glProgramNamedParameter4fNV is export;
our &glProgramNamedParameter4fvNV is export;
our &glProgramParameter4dNV is export;
our &glProgramParameter4dvNV is export;
our &glProgramParameter4fNV is export;
our &glProgramParameter4fvNV is export;
our &glProgramParameteri is export;
our &glProgramParameteriARB is export;
our &glProgramParameteriEXT is export;
our &glProgramParameters4dvNV is export;
our &glProgramParameters4fvNV is export;
our &glProgramPathFragmentInputGenNV is export;
our &glProgramStringARB is export;
our &glProgramSubroutineParametersuivNV is export;
our &glProgramUniform1d is export;
our &glProgramUniform1dEXT is export;
our &glProgramUniform1dv is export;
our &glProgramUniform1dvEXT is export;
our &glProgramUniform1f is export;
our &glProgramUniform1fEXT is export;
our &glProgramUniform1fv is export;
our &glProgramUniform1fvEXT is export;
our &glProgramUniform1i is export;
our &glProgramUniform1i64ARB is export;
our &glProgramUniform1i64NV is export;
our &glProgramUniform1i64vARB is export;
our &glProgramUniform1i64vNV is export;
our &glProgramUniform1iEXT is export;
our &glProgramUniform1iv is export;
our &glProgramUniform1ivEXT is export;
our &glProgramUniform1ui is export;
our &glProgramUniform1ui64ARB is export;
our &glProgramUniform1ui64NV is export;
our &glProgramUniform1ui64vARB is export;
our &glProgramUniform1ui64vNV is export;
our &glProgramUniform1uiEXT is export;
our &glProgramUniform1uiv is export;
our &glProgramUniform1uivEXT is export;
our &glProgramUniform2d is export;
our &glProgramUniform2dEXT is export;
our &glProgramUniform2dv is export;
our &glProgramUniform2dvEXT is export;
our &glProgramUniform2f is export;
our &glProgramUniform2fEXT is export;
our &glProgramUniform2fv is export;
our &glProgramUniform2fvEXT is export;
our &glProgramUniform2i is export;
our &glProgramUniform2i64ARB is export;
our &glProgramUniform2i64NV is export;
our &glProgramUniform2i64vARB is export;
our &glProgramUniform2i64vNV is export;
our &glProgramUniform2iEXT is export;
our &glProgramUniform2iv is export;
our &glProgramUniform2ivEXT is export;
our &glProgramUniform2ui is export;
our &glProgramUniform2ui64ARB is export;
our &glProgramUniform2ui64NV is export;
our &glProgramUniform2ui64vARB is export;
our &glProgramUniform2ui64vNV is export;
our &glProgramUniform2uiEXT is export;
our &glProgramUniform2uiv is export;
our &glProgramUniform2uivEXT is export;
our &glProgramUniform3d is export;
our &glProgramUniform3dEXT is export;
our &glProgramUniform3dv is export;
our &glProgramUniform3dvEXT is export;
our &glProgramUniform3f is export;
our &glProgramUniform3fEXT is export;
our &glProgramUniform3fv is export;
our &glProgramUniform3fvEXT is export;
our &glProgramUniform3i is export;
our &glProgramUniform3i64ARB is export;
our &glProgramUniform3i64NV is export;
our &glProgramUniform3i64vARB is export;
our &glProgramUniform3i64vNV is export;
our &glProgramUniform3iEXT is export;
our &glProgramUniform3iv is export;
our &glProgramUniform3ivEXT is export;
our &glProgramUniform3ui is export;
our &glProgramUniform3ui64ARB is export;
our &glProgramUniform3ui64NV is export;
our &glProgramUniform3ui64vARB is export;
our &glProgramUniform3ui64vNV is export;
our &glProgramUniform3uiEXT is export;
our &glProgramUniform3uiv is export;
our &glProgramUniform3uivEXT is export;
our &glProgramUniform4d is export;
our &glProgramUniform4dEXT is export;
our &glProgramUniform4dv is export;
our &glProgramUniform4dvEXT is export;
our &glProgramUniform4f is export;
our &glProgramUniform4fEXT is export;
our &glProgramUniform4fv is export;
our &glProgramUniform4fvEXT is export;
our &glProgramUniform4i is export;
our &glProgramUniform4i64ARB is export;
our &glProgramUniform4i64NV is export;
our &glProgramUniform4i64vARB is export;
our &glProgramUniform4i64vNV is export;
our &glProgramUniform4iEXT is export;
our &glProgramUniform4iv is export;
our &glProgramUniform4ivEXT is export;
our &glProgramUniform4ui is export;
our &glProgramUniform4ui64ARB is export;
our &glProgramUniform4ui64NV is export;
our &glProgramUniform4ui64vARB is export;
our &glProgramUniform4ui64vNV is export;
our &glProgramUniform4uiEXT is export;
our &glProgramUniform4uiv is export;
our &glProgramUniform4uivEXT is export;
our &glProgramUniformHandleui64ARB is export;
our &glProgramUniformHandleui64IMG is export;
our &glProgramUniformHandleui64NV is export;
our &glProgramUniformHandleui64vARB is export;
our &glProgramUniformHandleui64vIMG is export;
our &glProgramUniformHandleui64vNV is export;
our &glProgramUniformMatrix2dv is export;
our &glProgramUniformMatrix2dvEXT is export;
our &glProgramUniformMatrix2fv is export;
our &glProgramUniformMatrix2fvEXT is export;
our &glProgramUniformMatrix2x3dv is export;
our &glProgramUniformMatrix2x3dvEXT is export;
our &glProgramUniformMatrix2x3fv is export;
our &glProgramUniformMatrix2x3fvEXT is export;
our &glProgramUniformMatrix2x4dv is export;
our &glProgramUniformMatrix2x4dvEXT is export;
our &glProgramUniformMatrix2x4fv is export;
our &glProgramUniformMatrix2x4fvEXT is export;
our &glProgramUniformMatrix3dv is export;
our &glProgramUniformMatrix3dvEXT is export;
our &glProgramUniformMatrix3fv is export;
our &glProgramUniformMatrix3fvEXT is export;
our &glProgramUniformMatrix3x2dv is export;
our &glProgramUniformMatrix3x2dvEXT is export;
our &glProgramUniformMatrix3x2fv is export;
our &glProgramUniformMatrix3x2fvEXT is export;
our &glProgramUniformMatrix3x4dv is export;
our &glProgramUniformMatrix3x4dvEXT is export;
our &glProgramUniformMatrix3x4fv is export;
our &glProgramUniformMatrix3x4fvEXT is export;
our &glProgramUniformMatrix4dv is export;
our &glProgramUniformMatrix4dvEXT is export;
our &glProgramUniformMatrix4fv is export;
our &glProgramUniformMatrix4fvEXT is export;
our &glProgramUniformMatrix4x2dv is export;
our &glProgramUniformMatrix4x2dvEXT is export;
our &glProgramUniformMatrix4x2fv is export;
our &glProgramUniformMatrix4x2fvEXT is export;
our &glProgramUniformMatrix4x3dv is export;
our &glProgramUniformMatrix4x3dvEXT is export;
our &glProgramUniformMatrix4x3fv is export;
our &glProgramUniformMatrix4x3fvEXT is export;
our &glProgramUniformui64NV is export;
our &glProgramUniformui64vNV is export;
our &glProgramVertexLimitNV is export;
our &glProvokingVertex is export;
our &glProvokingVertexEXT is export;
our &glPushAttrib is export;
our &glPushClientAttrib is export;
our &glPushClientAttribDefaultEXT is export;
our &glPushDebugGroup is export;
our &glPushDebugGroupKHR is export;
our &glPushGroupMarkerEXT is export;
our &glPushMatrix is export;
our &glPushName is export;
our &glQueryCounter is export;
our &glQueryCounterEXT is export;
our &glQueryMatrixxOES is export;
our &glQueryObjectParameteruiAMD is export;
our &glQueryResourceNV is export;
our &glQueryResourceTagNV is export;
our &glRasterPos2d is export;
our &glRasterPos2dv is export;
our &glRasterPos2f is export;
our &glRasterPos2fv is export;
our &glRasterPos2i is export;
our &glRasterPos2iv is export;
our &glRasterPos2s is export;
our &glRasterPos2sv is export;
our &glRasterPos2xOES is export;
our &glRasterPos2xvOES is export;
our &glRasterPos3d is export;
our &glRasterPos3dv is export;
our &glRasterPos3f is export;
our &glRasterPos3fv is export;
our &glRasterPos3i is export;
our &glRasterPos3iv is export;
our &glRasterPos3s is export;
our &glRasterPos3sv is export;
our &glRasterPos3xOES is export;
our &glRasterPos3xvOES is export;
our &glRasterPos4d is export;
our &glRasterPos4dv is export;
our &glRasterPos4f is export;
our &glRasterPos4fv is export;
our &glRasterPos4i is export;
our &glRasterPos4iv is export;
our &glRasterPos4s is export;
our &glRasterPos4sv is export;
our &glRasterPos4xOES is export;
our &glRasterPos4xvOES is export;
our &glRasterSamplesEXT is export;
our &glReadBuffer is export;
our &glReadBufferIndexedEXT is export;
our &glReadBufferNV is export;
our &glReadInstrumentsSGIX is export;
our &glReadPixels is export;
our &glReadnPixels is export;
our &glReadnPixelsARB is export;
our &glReadnPixelsEXT is export;
our &glReadnPixelsKHR is export;
our &glReleaseKeyedMutexWin32EXT is export;
our &glRectd is export;
our &glRectdv is export;
our &glRectf is export;
our &glRectfv is export;
our &glRecti is export;
our &glRectiv is export;
our &glRects is export;
our &glRectsv is export;
our &glRectxOES is export;
our &glRectxvOES is export;
our &glReferencePlaneSGIX is export;
our &glReleaseShaderCompiler is export;
our &glRenderGpuMaskNV is export;
our &glRenderMode is export;
our &glRenderbufferStorage is export;
our &glRenderbufferStorageEXT is export;
our &glRenderbufferStorageMultisample is export;
our &glRenderbufferStorageMultisampleANGLE is export;
our &glRenderbufferStorageMultisampleAPPLE is export;
our &glRenderbufferStorageMultisampleAdvancedAMD is export;
our &glRenderbufferStorageMultisampleCoverageNV is export;
our &glRenderbufferStorageMultisampleEXT is export;
our &glRenderbufferStorageMultisampleIMG is export;
our &glRenderbufferStorageMultisampleNV is export;
our &glRenderbufferStorageOES is export;
our &glReplacementCodePointerSUN is export;
our &glReplacementCodeubSUN is export;
our &glReplacementCodeubvSUN is export;
our &glReplacementCodeuiColor3fVertex3fSUN is export;
our &glReplacementCodeuiColor3fVertex3fvSUN is export;
our &glReplacementCodeuiColor4fNormal3fVertex3fSUN is export;
our &glReplacementCodeuiColor4fNormal3fVertex3fvSUN is export;
our &glReplacementCodeuiColor4ubVertex3fSUN is export;
our &glReplacementCodeuiColor4ubVertex3fvSUN is export;
our &glReplacementCodeuiNormal3fVertex3fSUN is export;
our &glReplacementCodeuiNormal3fVertex3fvSUN is export;
our &glReplacementCodeuiSUN is export;
our &glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN is export;
our &glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN is export;
our &glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN is export;
our &glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN is export;
our &glReplacementCodeuiTexCoord2fVertex3fSUN is export;
our &glReplacementCodeuiTexCoord2fVertex3fvSUN is export;
our &glReplacementCodeuiVertex3fSUN is export;
our &glReplacementCodeuiVertex3fvSUN is export;
our &glReplacementCodeuivSUN is export;
our &glReplacementCodeusSUN is export;
our &glReplacementCodeusvSUN is export;
our &glRequestResidentProgramsNV is export;
our &glResetHistogram is export;
our &glResetHistogramEXT is export;
our &glResetMemoryObjectParameterNV is export;
our &glResetMinmax is export;
our &glResetMinmaxEXT is export;
our &glResizeBuffersMESA is export;
our &glResolveDepthValuesNV is export;
our &glResolveMultisampleFramebufferAPPLE is export;
our &glResumeTransformFeedback is export;
our &glResumeTransformFeedbackNV is export;
our &glRotated is export;
our &glRotatef is export;
our &glRotatex is export;
our &glRotatexOES is export;
our &glSampleCoverage is export;
our &glSampleCoverageARB is export;
our &glSampleCoveragex is export;
our &glSampleCoveragexOES is export;
our &glSampleMapATI is export;
our &glSampleMaskEXT is export;
our &glSampleMaskIndexedNV is export;
our &glSampleMaskSGIS is export;
our &glSampleMaski is export;
our &glSamplePatternEXT is export;
our &glSamplePatternSGIS is export;
our &glSamplerParameterIiv is export;
our &glSamplerParameterIivEXT is export;
our &glSamplerParameterIivOES is export;
our &glSamplerParameterIuiv is export;
our &glSamplerParameterIuivEXT is export;
our &glSamplerParameterIuivOES is export;
our &glSamplerParameterf is export;
our &glSamplerParameterfv is export;
our &glSamplerParameteri is export;
our &glSamplerParameteriv is export;
our &glScaled is export;
our &glScalef is export;
our &glScalex is export;
our &glScalexOES is export;
our &glScissor is export;
our &glScissorArrayv is export;
our &glScissorArrayvNV is export;
our &glScissorArrayvOES is export;
our &glScissorExclusiveArrayvNV is export;
our &glScissorExclusiveNV is export;
our &glScissorIndexed is export;
our &glScissorIndexedNV is export;
our &glScissorIndexedOES is export;
our &glScissorIndexedv is export;
our &glScissorIndexedvNV is export;
our &glScissorIndexedvOES is export;
our &glSecondaryColor3b is export;
our &glSecondaryColor3bEXT is export;
our &glSecondaryColor3bv is export;
our &glSecondaryColor3bvEXT is export;
our &glSecondaryColor3d is export;
our &glSecondaryColor3dEXT is export;
our &glSecondaryColor3dv is export;
our &glSecondaryColor3dvEXT is export;
our &glSecondaryColor3f is export;
our &glSecondaryColor3fEXT is export;
our &glSecondaryColor3fv is export;
our &glSecondaryColor3fvEXT is export;
our &glSecondaryColor3hNV is export;
our &glSecondaryColor3hvNV is export;
our &glSecondaryColor3i is export;
our &glSecondaryColor3iEXT is export;
our &glSecondaryColor3iv is export;
our &glSecondaryColor3ivEXT is export;
our &glSecondaryColor3s is export;
our &glSecondaryColor3sEXT is export;
our &glSecondaryColor3sv is export;
our &glSecondaryColor3svEXT is export;
our &glSecondaryColor3ub is export;
our &glSecondaryColor3ubEXT is export;
our &glSecondaryColor3ubv is export;
our &glSecondaryColor3ubvEXT is export;
our &glSecondaryColor3ui is export;
our &glSecondaryColor3uiEXT is export;
our &glSecondaryColor3uiv is export;
our &glSecondaryColor3uivEXT is export;
our &glSecondaryColor3us is export;
our &glSecondaryColor3usEXT is export;
our &glSecondaryColor3usv is export;
our &glSecondaryColor3usvEXT is export;
our &glSecondaryColorFormatNV is export;
our &glSecondaryColorP3ui is export;
our &glSecondaryColorP3uiv is export;
our &glSecondaryColorPointer is export;
our &glSecondaryColorPointerEXT is export;
our &glSecondaryColorPointerListIBM is export;
our &glSelectBuffer is export;
our &glSelectPerfMonitorCountersAMD is export;
our &glSemaphoreParameterivNV is export;
our &glSemaphoreParameterui64vEXT is export;
our &glSeparableFilter2D is export;
our &glSeparableFilter2DEXT is export;
our &glSetFenceAPPLE is export;
our &glSetFenceNV is export;
our &glSetFragmentShaderConstantATI is export;
our &glSetInvariantEXT is export;
our &glSetLocalConstantEXT is export;
our &glSetMultisamplefvAMD is export;
our &glShadeModel is export;
our &glShaderBinary is export;
our &glShaderOp1EXT is export;
our &glShaderOp2EXT is export;
our &glShaderOp3EXT is export;
our &glShaderSource is export;
our &glShaderSourceARB is export;
our &glShaderStorageBlockBinding is export;
our &glShadingRateImageBarrierNV is export;
our &glShadingRateQCOM is export;
our &glShadingRateImagePaletteNV is export;
our &glShadingRateSampleOrderNV is export;
our &glShadingRateSampleOrderCustomNV is export;
our &glSharpenTexFuncSGIS is export;
our &glSignalSemaphoreEXT is export;
our &glSignalSemaphoreui64NVX is export;
our &glSpecializeShader is export;
our &glSpecializeShaderARB is export;
our &glSpriteParameterfSGIX is export;
our &glSpriteParameterfvSGIX is export;
our &glSpriteParameteriSGIX is export;
our &glSpriteParameterivSGIX is export;
our &glStartInstrumentsSGIX is export;
our &glStartTilingQCOM is export;
our &glStateCaptureNV is export;
our &glStencilClearTagEXT is export;
our &glStencilFillPathInstancedNV is export;
our &glStencilFillPathNV is export;
our &glStencilFunc is export;
our &glStencilFuncSeparate is export;
our &glStencilFuncSeparateATI is export;
our &glStencilMask is export;
our &glStencilMaskSeparate is export;
our &glStencilOp is export;
our &glStencilOpSeparate is export;
our &glStencilOpSeparateATI is export;
our &glStencilOpValueAMD is export;
our &glStencilStrokePathInstancedNV is export;
our &glStencilStrokePathNV is export;
our &glStencilThenCoverFillPathInstancedNV is export;
our &glStencilThenCoverFillPathNV is export;
our &glStencilThenCoverStrokePathInstancedNV is export;
our &glStencilThenCoverStrokePathNV is export;
our &glStopInstrumentsSGIX is export;
our &glStringMarkerGREMEDY is export;
our &glSubpixelPrecisionBiasNV is export;
our &glSwizzleEXT is export;
our &glSyncTextureINTEL is export;
our &glTagSampleBufferSGIX is export;
our &glTangent3bEXT is export;
our &glTangent3bvEXT is export;
our &glTangent3dEXT is export;
our &glTangent3dvEXT is export;
our &glTangent3fEXT is export;
our &glTangent3fvEXT is export;
our &glTangent3iEXT is export;
our &glTangent3ivEXT is export;
our &glTangent3sEXT is export;
our &glTangent3svEXT is export;
our &glTangentPointerEXT is export;
our &glTbufferMask3DFX is export;
our &glTessellationFactorAMD is export;
our &glTessellationModeAMD is export;
our &glTestFenceAPPLE is export;
our &glTestFenceNV is export;
our &glTestObjectAPPLE is export;
our &glTexAttachMemoryNV is export;
our &glTexBuffer is export;
our &glTexBufferARB is export;
our &glTexBufferEXT is export;
our &glTexBufferOES is export;
our &glTexBufferRange is export;
our &glTexBufferRangeEXT is export;
our &glTexBufferRangeOES is export;
our &glTexBumpParameterfvATI is export;
our &glTexBumpParameterivATI is export;
our &glTexCoord1bOES is export;
our &glTexCoord1bvOES is export;
our &glTexCoord1d is export;
our &glTexCoord1dv is export;
our &glTexCoord1f is export;
our &glTexCoord1fv is export;
our &glTexCoord1hNV is export;
our &glTexCoord1hvNV is export;
our &glTexCoord1i is export;
our &glTexCoord1iv is export;
our &glTexCoord1s is export;
our &glTexCoord1sv is export;
our &glTexCoord1xOES is export;
our &glTexCoord1xvOES is export;
our &glTexCoord2bOES is export;
our &glTexCoord2bvOES is export;
our &glTexCoord2d is export;
our &glTexCoord2dv is export;
our &glTexCoord2f is export;
our &glTexCoord2fColor3fVertex3fSUN is export;
our &glTexCoord2fColor3fVertex3fvSUN is export;
our &glTexCoord2fColor4fNormal3fVertex3fSUN is export;
our &glTexCoord2fColor4fNormal3fVertex3fvSUN is export;
our &glTexCoord2fColor4ubVertex3fSUN is export;
our &glTexCoord2fColor4ubVertex3fvSUN is export;
our &glTexCoord2fNormal3fVertex3fSUN is export;
our &glTexCoord2fNormal3fVertex3fvSUN is export;
our &glTexCoord2fVertex3fSUN is export;
our &glTexCoord2fVertex3fvSUN is export;
our &glTexCoord2fv is export;
our &glTexCoord2hNV is export;
our &glTexCoord2hvNV is export;
our &glTexCoord2i is export;
our &glTexCoord2iv is export;
our &glTexCoord2s is export;
our &glTexCoord2sv is export;
our &glTexCoord2xOES is export;
our &glTexCoord2xvOES is export;
our &glTexCoord3bOES is export;
our &glTexCoord3bvOES is export;
our &glTexCoord3d is export;
our &glTexCoord3dv is export;
our &glTexCoord3f is export;
our &glTexCoord3fv is export;
our &glTexCoord3hNV is export;
our &glTexCoord3hvNV is export;
our &glTexCoord3i is export;
our &glTexCoord3iv is export;
our &glTexCoord3s is export;
our &glTexCoord3sv is export;
our &glTexCoord3xOES is export;
our &glTexCoord3xvOES is export;
our &glTexCoord4bOES is export;
our &glTexCoord4bvOES is export;
our &glTexCoord4d is export;
our &glTexCoord4dv is export;
our &glTexCoord4f is export;
our &glTexCoord4fColor4fNormal3fVertex4fSUN is export;
our &glTexCoord4fColor4fNormal3fVertex4fvSUN is export;
our &glTexCoord4fVertex4fSUN is export;
our &glTexCoord4fVertex4fvSUN is export;
our &glTexCoord4fv is export;
our &glTexCoord4hNV is export;
our &glTexCoord4hvNV is export;
our &glTexCoord4i is export;
our &glTexCoord4iv is export;
our &glTexCoord4s is export;
our &glTexCoord4sv is export;
our &glTexCoord4xOES is export;
our &glTexCoord4xvOES is export;
our &glTexCoordFormatNV is export;
our &glTexCoordP1ui is export;
our &glTexCoordP1uiv is export;
our &glTexCoordP2ui is export;
our &glTexCoordP2uiv is export;
our &glTexCoordP3ui is export;
our &glTexCoordP3uiv is export;
our &glTexCoordP4ui is export;
our &glTexCoordP4uiv is export;
our &glTexCoordPointer is export;
our &glTexCoordPointerEXT is export;
our &glTexCoordPointerListIBM is export;
our &glTexCoordPointervINTEL is export;
our &glTexEnvf is export;
our &glTexEnvfv is export;
our &glTexEnvi is export;
our &glTexEnviv is export;
our &glTexEnvx is export;
our &glTexEnvxOES is export;
our &glTexEnvxv is export;
our &glTexEnvxvOES is export;
our &glTexEstimateMotionQCOM is export;
our &glTexEstimateMotionRegionsQCOM is export;
our &glExtrapolateTex2DQCOM is export;
our &glTexFilterFuncSGIS is export;
our &glTexGend is export;
our &glTexGendv is export;
our &glTexGenf is export;
our &glTexGenfOES is export;
our &glTexGenfv is export;
our &glTexGenfvOES is export;
our &glTexGeni is export;
our &glTexGeniOES is export;
our &glTexGeniv is export;
our &glTexGenivOES is export;
our &glTexGenxOES is export;
our &glTexGenxvOES is export;
our &glTexImage1D is export;
our &glTexImage2D is export;
our &glTexImage2DMultisample is export;
our &glTexImage2DMultisampleCoverageNV is export;
our &glTexImage3D is export;
our &glTexImage3DEXT is export;
our &glTexImage3DMultisample is export;
our &glTexImage3DMultisampleCoverageNV is export;
our &glTexImage3DOES is export;
our &glTexImage4DSGIS is export;
our &glTexPageCommitmentARB is export;
our &glTexPageCommitmentEXT is export;
our &glTexPageCommitmentMemNV is export;
our &glTexParameterIiv is export;
our &glTexParameterIivEXT is export;
our &glTexParameterIivOES is export;
our &glTexParameterIuiv is export;
our &glTexParameterIuivEXT is export;
our &glTexParameterIuivOES is export;
our &glTexParameterf is export;
our &glTexParameterfv is export;
our &glTexParameteri is export;
our &glTexParameteriv is export;
our &glTexParameterx is export;
our &glTexParameterxOES is export;
our &glTexParameterxv is export;
our &glTexParameterxvOES is export;
our &glTexRenderbufferNV is export;
our &glTexStorage1D is export;
our &glTexStorage1DEXT is export;
our &glTexStorage2D is export;
our &glTexStorage2DEXT is export;
our &glTexStorage2DMultisample is export;
our &glTexStorage3D is export;
our &glTexStorage3DEXT is export;
our &glTexStorage3DMultisample is export;
our &glTexStorage3DMultisampleOES is export;
our &glTexStorageMem1DEXT is export;
our &glTexStorageMem2DEXT is export;
our &glTexStorageMem2DMultisampleEXT is export;
our &glTexStorageMem3DEXT is export;
our &glTexStorageMem3DMultisampleEXT is export;
our &glTexStorageSparseAMD is export;
our &glTexSubImage1D is export;
our &glTexSubImage1DEXT is export;
our &glTexSubImage2D is export;
our &glTexSubImage2DEXT is export;
our &glTexSubImage3D is export;
our &glTexSubImage3DEXT is export;
our &glTexSubImage3DOES is export;
our &glTexSubImage4DSGIS is export;
our &glTextureAttachMemoryNV is export;
our &glTextureBarrier is export;
our &glTextureBarrierNV is export;
our &glTextureBuffer is export;
our &glTextureBufferEXT is export;
our &glTextureBufferRange is export;
our &glTextureBufferRangeEXT is export;
our &glTextureColorMaskSGIS is export;
our &glTextureFoveationParametersQCOM is export;
our &glTextureImage1DEXT is export;
our &glTextureImage2DEXT is export;
our &glTextureImage2DMultisampleCoverageNV is export;
our &glTextureImage2DMultisampleNV is export;
our &glTextureImage3DEXT is export;
our &glTextureImage3DMultisampleCoverageNV is export;
our &glTextureImage3DMultisampleNV is export;
our &glTextureLightEXT is export;
our &glTextureMaterialEXT is export;
our &glTextureNormalEXT is export;
our &glTexturePageCommitmentEXT is export;
our &glTexturePageCommitmentMemNV is export;
our &glTextureParameterIiv is export;
our &glTextureParameterIivEXT is export;
our &glTextureParameterIuiv is export;
our &glTextureParameterIuivEXT is export;
our &glTextureParameterf is export;
our &glTextureParameterfEXT is export;
our &glTextureParameterfv is export;
our &glTextureParameterfvEXT is export;
our &glTextureParameteri is export;
our &glTextureParameteriEXT is export;
our &glTextureParameteriv is export;
our &glTextureParameterivEXT is export;
our &glTextureRangeAPPLE is export;
our &glTextureRenderbufferEXT is export;
our &glTextureStorage1D is export;
our &glTextureStorage1DEXT is export;
our &glTextureStorage2D is export;
our &glTextureStorage2DEXT is export;
our &glTextureStorage2DMultisample is export;
our &glTextureStorage2DMultisampleEXT is export;
our &glTextureStorage3D is export;
our &glTextureStorage3DEXT is export;
our &glTextureStorage3DMultisample is export;
our &glTextureStorage3DMultisampleEXT is export;
our &glTextureStorageMem1DEXT is export;
our &glTextureStorageMem2DEXT is export;
our &glTextureStorageMem2DMultisampleEXT is export;
our &glTextureStorageMem3DEXT is export;
our &glTextureStorageMem3DMultisampleEXT is export;
our &glTextureStorageSparseAMD is export;
our &glTextureSubImage1D is export;
our &glTextureSubImage1DEXT is export;
our &glTextureSubImage2D is export;
our &glTextureSubImage2DEXT is export;
our &glTextureSubImage3D is export;
our &glTextureSubImage3DEXT is export;
our &glTextureView is export;
our &glTextureViewEXT is export;
our &glTextureViewOES is export;
our &glTrackMatrixNV is export;
our &glTransformFeedbackAttribsNV is export;
our &glTransformFeedbackBufferBase is export;
our &glTransformFeedbackBufferRange is export;
our &glTransformFeedbackStreamAttribsNV is export;
our &glTransformFeedbackVaryings is export;
our &glTransformFeedbackVaryingsEXT is export;
our &glTransformFeedbackVaryingsNV is export;
our &glTransformPathNV is export;
our &glTranslated is export;
our &glTranslatef is export;
our &glTranslatex is export;
our &glTranslatexOES is export;
our &glUniform1d is export;
our &glUniform1dv is export;
our &glUniform1f is export;
our &glUniform1fARB is export;
our &glUniform1fv is export;
our &glUniform1fvARB is export;
our &glUniform1i is export;
our &glUniform1i64ARB is export;
our &glUniform1i64NV is export;
our &glUniform1i64vARB is export;
our &glUniform1i64vNV is export;
our &glUniform1iARB is export;
our &glUniform1iv is export;
our &glUniform1ivARB is export;
our &glUniform1ui is export;
our &glUniform1ui64ARB is export;
our &glUniform1ui64NV is export;
our &glUniform1ui64vARB is export;
our &glUniform1ui64vNV is export;
our &glUniform1uiEXT is export;
our &glUniform1uiv is export;
our &glUniform1uivEXT is export;
our &glUniform2d is export;
our &glUniform2dv is export;
our &glUniform2f is export;
our &glUniform2fARB is export;
our &glUniform2fv is export;
our &glUniform2fvARB is export;
our &glUniform2i is export;
our &glUniform2i64ARB is export;
our &glUniform2i64NV is export;
our &glUniform2i64vARB is export;
our &glUniform2i64vNV is export;
our &glUniform2iARB is export;
our &glUniform2iv is export;
our &glUniform2ivARB is export;
our &glUniform2ui is export;
our &glUniform2ui64ARB is export;
our &glUniform2ui64NV is export;
our &glUniform2ui64vARB is export;
our &glUniform2ui64vNV is export;
our &glUniform2uiEXT is export;
our &glUniform2uiv is export;
our &glUniform2uivEXT is export;
our &glUniform3d is export;
our &glUniform3dv is export;
our &glUniform3f is export;
our &glUniform3fARB is export;
our &glUniform3fv is export;
our &glUniform3fvARB is export;
our &glUniform3i is export;
our &glUniform3i64ARB is export;
our &glUniform3i64NV is export;
our &glUniform3i64vARB is export;
our &glUniform3i64vNV is export;
our &glUniform3iARB is export;
our &glUniform3iv is export;
our &glUniform3ivARB is export;
our &glUniform3ui is export;
our &glUniform3ui64ARB is export;
our &glUniform3ui64NV is export;
our &glUniform3ui64vARB is export;
our &glUniform3ui64vNV is export;
our &glUniform3uiEXT is export;
our &glUniform3uiv is export;
our &glUniform3uivEXT is export;
our &glUniform4d is export;
our &glUniform4dv is export;
our &glUniform4f is export;
our &glUniform4fARB is export;
our &glUniform4fv is export;
our &glUniform4fvARB is export;
our &glUniform4i is export;
our &glUniform4i64ARB is export;
our &glUniform4i64NV is export;
our &glUniform4i64vARB is export;
our &glUniform4i64vNV is export;
our &glUniform4iARB is export;
our &glUniform4iv is export;
our &glUniform4ivARB is export;
our &glUniform4ui is export;
our &glUniform4ui64ARB is export;
our &glUniform4ui64NV is export;
our &glUniform4ui64vARB is export;
our &glUniform4ui64vNV is export;
our &glUniform4uiEXT is export;
our &glUniform4uiv is export;
our &glUniform4uivEXT is export;
our &glUniformBlockBinding is export;
our &glUniformBufferEXT is export;
our &glUniformHandleui64ARB is export;
our &glUniformHandleui64IMG is export;
our &glUniformHandleui64NV is export;
our &glUniformHandleui64vARB is export;
our &glUniformHandleui64vIMG is export;
our &glUniformHandleui64vNV is export;
our &glUniformMatrix2dv is export;
our &glUniformMatrix2fv is export;
our &glUniformMatrix2fvARB is export;
our &glUniformMatrix2x3dv is export;
our &glUniformMatrix2x3fv is export;
our &glUniformMatrix2x3fvNV is export;
our &glUniformMatrix2x4dv is export;
our &glUniformMatrix2x4fv is export;
our &glUniformMatrix2x4fvNV is export;
our &glUniformMatrix3dv is export;
our &glUniformMatrix3fv is export;
our &glUniformMatrix3fvARB is export;
our &glUniformMatrix3x2dv is export;
our &glUniformMatrix3x2fv is export;
our &glUniformMatrix3x2fvNV is export;
our &glUniformMatrix3x4dv is export;
our &glUniformMatrix3x4fv is export;
our &glUniformMatrix3x4fvNV is export;
our &glUniformMatrix4dv is export;
our &glUniformMatrix4fv is export;
our &glUniformMatrix4fvARB is export;
our &glUniformMatrix4x2dv is export;
our &glUniformMatrix4x2fv is export;
our &glUniformMatrix4x2fvNV is export;
our &glUniformMatrix4x3dv is export;
our &glUniformMatrix4x3fv is export;
our &glUniformMatrix4x3fvNV is export;
our &glUniformSubroutinesuiv is export;
our &glUniformui64NV is export;
our &glUniformui64vNV is export;
our &glUnlockArraysEXT is export;
our &glUnmapBuffer is export;
our &glUnmapBufferARB is export;
our &glUnmapBufferOES is export;
our &glUnmapNamedBuffer is export;
our &glUnmapNamedBufferEXT is export;
our &glUnmapObjectBufferATI is export;
our &glUnmapTexture2DINTEL is export;
our &glUpdateObjectBufferATI is export;
our &glUploadGpuMaskNVX is export;
our &glUseProgram is export;
our &glUseProgramObjectARB is export;
our &glUseProgramStages is export;
our &glUseProgramStagesEXT is export;
our &glUseShaderProgramEXT is export;
our &glVDPAUFiniNV is export;
our &glVDPAUGetSurfaceivNV is export;
our &glVDPAUInitNV is export;
our &glVDPAUIsSurfaceNV is export;
our &glVDPAUMapSurfacesNV is export;
our &glVDPAURegisterOutputSurfaceNV is export;
our &glVDPAURegisterVideoSurfaceNV is export;
our &glVDPAURegisterVideoSurfaceWithPictureStructureNV is export;
our &glVDPAUSurfaceAccessNV is export;
our &glVDPAUUnmapSurfacesNV is export;
our &glVDPAUUnregisterSurfaceNV is export;
our &glValidateProgram is export;
our &glValidateProgramARB is export;
our &glValidateProgramPipeline is export;
our &glValidateProgramPipelineEXT is export;
our &glVariantArrayObjectATI is export;
our &glVariantPointerEXT is export;
our &glVariantbvEXT is export;
our &glVariantdvEXT is export;
our &glVariantfvEXT is export;
our &glVariantivEXT is export;
our &glVariantsvEXT is export;
our &glVariantubvEXT is export;
our &glVariantuivEXT is export;
our &glVariantusvEXT is export;
our &glVertex2bOES is export;
our &glVertex2bvOES is export;
our &glVertex2d is export;
our &glVertex2dv is export;
our &glVertex2f is export;
our &glVertex2fv is export;
our &glVertex2hNV is export;
our &glVertex2hvNV is export;
our &glVertex2i is export;
our &glVertex2iv is export;
our &glVertex2s is export;
our &glVertex2sv is export;
our &glVertex2xOES is export;
our &glVertex2xvOES is export;
our &glVertex3bOES is export;
our &glVertex3bvOES is export;
our &glVertex3d is export;
our &glVertex3dv is export;
our &glVertex3f is export;
our &glVertex3fv is export;
our &glVertex3hNV is export;
our &glVertex3hvNV is export;
our &glVertex3i is export;
our &glVertex3iv is export;
our &glVertex3s is export;
our &glVertex3sv is export;
our &glVertex3xOES is export;
our &glVertex3xvOES is export;
our &glVertex4bOES is export;
our &glVertex4bvOES is export;
our &glVertex4d is export;
our &glVertex4dv is export;
our &glVertex4f is export;
our &glVertex4fv is export;
our &glVertex4hNV is export;
our &glVertex4hvNV is export;
our &glVertex4i is export;
our &glVertex4iv is export;
our &glVertex4s is export;
our &glVertex4sv is export;
our &glVertex4xOES is export;
our &glVertex4xvOES is export;
our &glVertexArrayAttribBinding is export;
our &glVertexArrayAttribFormat is export;
our &glVertexArrayAttribIFormat is export;
our &glVertexArrayAttribLFormat is export;
our &glVertexArrayBindVertexBufferEXT is export;
our &glVertexArrayBindingDivisor is export;
our &glVertexArrayColorOffsetEXT is export;
our &glVertexArrayEdgeFlagOffsetEXT is export;
our &glVertexArrayElementBuffer is export;
our &glVertexArrayFogCoordOffsetEXT is export;
our &glVertexArrayIndexOffsetEXT is export;
our &glVertexArrayMultiTexCoordOffsetEXT is export;
our &glVertexArrayNormalOffsetEXT is export;
our &glVertexArrayParameteriAPPLE is export;
our &glVertexArrayRangeAPPLE is export;
our &glVertexArrayRangeNV is export;
our &glVertexArraySecondaryColorOffsetEXT is export;
our &glVertexArrayTexCoordOffsetEXT is export;
our &glVertexArrayVertexAttribBindingEXT is export;
our &glVertexArrayVertexAttribDivisorEXT is export;
our &glVertexArrayVertexAttribFormatEXT is export;
our &glVertexArrayVertexAttribIFormatEXT is export;
our &glVertexArrayVertexAttribIOffsetEXT is export;
our &glVertexArrayVertexAttribLFormatEXT is export;
our &glVertexArrayVertexAttribLOffsetEXT is export;
our &glVertexArrayVertexAttribOffsetEXT is export;
our &glVertexArrayVertexBindingDivisorEXT is export;
our &glVertexArrayVertexBuffer is export;
our &glVertexArrayVertexBuffers is export;
our &glVertexArrayVertexOffsetEXT is export;
our &glVertexAttrib1d is export;
our &glVertexAttrib1dARB is export;
our &glVertexAttrib1dNV is export;
our &glVertexAttrib1dv is export;
our &glVertexAttrib1dvARB is export;
our &glVertexAttrib1dvNV is export;
our &glVertexAttrib1f is export;
our &glVertexAttrib1fARB is export;
our &glVertexAttrib1fNV is export;
our &glVertexAttrib1fv is export;
our &glVertexAttrib1fvARB is export;
our &glVertexAttrib1fvNV is export;
our &glVertexAttrib1hNV is export;
our &glVertexAttrib1hvNV is export;
our &glVertexAttrib1s is export;
our &glVertexAttrib1sARB is export;
our &glVertexAttrib1sNV is export;
our &glVertexAttrib1sv is export;
our &glVertexAttrib1svARB is export;
our &glVertexAttrib1svNV is export;
our &glVertexAttrib2d is export;
our &glVertexAttrib2dARB is export;
our &glVertexAttrib2dNV is export;
our &glVertexAttrib2dv is export;
our &glVertexAttrib2dvARB is export;
our &glVertexAttrib2dvNV is export;
our &glVertexAttrib2f is export;
our &glVertexAttrib2fARB is export;
our &glVertexAttrib2fNV is export;
our &glVertexAttrib2fv is export;
our &glVertexAttrib2fvARB is export;
our &glVertexAttrib2fvNV is export;
our &glVertexAttrib2hNV is export;
our &glVertexAttrib2hvNV is export;
our &glVertexAttrib2s is export;
our &glVertexAttrib2sARB is export;
our &glVertexAttrib2sNV is export;
our &glVertexAttrib2sv is export;
our &glVertexAttrib2svARB is export;
our &glVertexAttrib2svNV is export;
our &glVertexAttrib3d is export;
our &glVertexAttrib3dARB is export;
our &glVertexAttrib3dNV is export;
our &glVertexAttrib3dv is export;
our &glVertexAttrib3dvARB is export;
our &glVertexAttrib3dvNV is export;
our &glVertexAttrib3f is export;
our &glVertexAttrib3fARB is export;
our &glVertexAttrib3fNV is export;
our &glVertexAttrib3fv is export;
our &glVertexAttrib3fvARB is export;
our &glVertexAttrib3fvNV is export;
our &glVertexAttrib3hNV is export;
our &glVertexAttrib3hvNV is export;
our &glVertexAttrib3s is export;
our &glVertexAttrib3sARB is export;
our &glVertexAttrib3sNV is export;
our &glVertexAttrib3sv is export;
our &glVertexAttrib3svARB is export;
our &glVertexAttrib3svNV is export;
our &glVertexAttrib4Nbv is export;
our &glVertexAttrib4NbvARB is export;
our &glVertexAttrib4Niv is export;
our &glVertexAttrib4NivARB is export;
our &glVertexAttrib4Nsv is export;
our &glVertexAttrib4NsvARB is export;
our &glVertexAttrib4Nub is export;
our &glVertexAttrib4NubARB is export;
our &glVertexAttrib4Nubv is export;
our &glVertexAttrib4NubvARB is export;
our &glVertexAttrib4Nuiv is export;
our &glVertexAttrib4NuivARB is export;
our &glVertexAttrib4Nusv is export;
our &glVertexAttrib4NusvARB is export;
our &glVertexAttrib4bv is export;
our &glVertexAttrib4bvARB is export;
our &glVertexAttrib4d is export;
our &glVertexAttrib4dARB is export;
our &glVertexAttrib4dNV is export;
our &glVertexAttrib4dv is export;
our &glVertexAttrib4dvARB is export;
our &glVertexAttrib4dvNV is export;
our &glVertexAttrib4f is export;
our &glVertexAttrib4fARB is export;
our &glVertexAttrib4fNV is export;
our &glVertexAttrib4fv is export;
our &glVertexAttrib4fvARB is export;
our &glVertexAttrib4fvNV is export;
our &glVertexAttrib4hNV is export;
our &glVertexAttrib4hvNV is export;
our &glVertexAttrib4iv is export;
our &glVertexAttrib4ivARB is export;
our &glVertexAttrib4s is export;
our &glVertexAttrib4sARB is export;
our &glVertexAttrib4sNV is export;
our &glVertexAttrib4sv is export;
our &glVertexAttrib4svARB is export;
our &glVertexAttrib4svNV is export;
our &glVertexAttrib4ubNV is export;
our &glVertexAttrib4ubv is export;
our &glVertexAttrib4ubvARB is export;
our &glVertexAttrib4ubvNV is export;
our &glVertexAttrib4uiv is export;
our &glVertexAttrib4uivARB is export;
our &glVertexAttrib4usv is export;
our &glVertexAttrib4usvARB is export;
our &glVertexAttribArrayObjectATI is export;
our &glVertexAttribBinding is export;
our &glVertexAttribDivisor is export;
our &glVertexAttribDivisorANGLE is export;
our &glVertexAttribDivisorARB is export;
our &glVertexAttribDivisorEXT is export;
our &glVertexAttribDivisorNV is export;
our &glVertexAttribFormat is export;
our &glVertexAttribFormatNV is export;
our &glVertexAttribI1i is export;
our &glVertexAttribI1iEXT is export;
our &glVertexAttribI1iv is export;
our &glVertexAttribI1ivEXT is export;
our &glVertexAttribI1ui is export;
our &glVertexAttribI1uiEXT is export;
our &glVertexAttribI1uiv is export;
our &glVertexAttribI1uivEXT is export;
our &glVertexAttribI2i is export;
our &glVertexAttribI2iEXT is export;
our &glVertexAttribI2iv is export;
our &glVertexAttribI2ivEXT is export;
our &glVertexAttribI2ui is export;
our &glVertexAttribI2uiEXT is export;
our &glVertexAttribI2uiv is export;
our &glVertexAttribI2uivEXT is export;
our &glVertexAttribI3i is export;
our &glVertexAttribI3iEXT is export;
our &glVertexAttribI3iv is export;
our &glVertexAttribI3ivEXT is export;
our &glVertexAttribI3ui is export;
our &glVertexAttribI3uiEXT is export;
our &glVertexAttribI3uiv is export;
our &glVertexAttribI3uivEXT is export;
our &glVertexAttribI4bv is export;
our &glVertexAttribI4bvEXT is export;
our &glVertexAttribI4i is export;
our &glVertexAttribI4iEXT is export;
our &glVertexAttribI4iv is export;
our &glVertexAttribI4ivEXT is export;
our &glVertexAttribI4sv is export;
our &glVertexAttribI4svEXT is export;
our &glVertexAttribI4ubv is export;
our &glVertexAttribI4ubvEXT is export;
our &glVertexAttribI4ui is export;
our &glVertexAttribI4uiEXT is export;
our &glVertexAttribI4uiv is export;
our &glVertexAttribI4uivEXT is export;
our &glVertexAttribI4usv is export;
our &glVertexAttribI4usvEXT is export;
our &glVertexAttribIFormat is export;
our &glVertexAttribIFormatNV is export;
our &glVertexAttribIPointer is export;
our &glVertexAttribIPointerEXT is export;
our &glVertexAttribL1d is export;
our &glVertexAttribL1dEXT is export;
our &glVertexAttribL1dv is export;
our &glVertexAttribL1dvEXT is export;
our &glVertexAttribL1i64NV is export;
our &glVertexAttribL1i64vNV is export;
our &glVertexAttribL1ui64ARB is export;
our &glVertexAttribL1ui64NV is export;
our &glVertexAttribL1ui64vARB is export;
our &glVertexAttribL1ui64vNV is export;
our &glVertexAttribL2d is export;
our &glVertexAttribL2dEXT is export;
our &glVertexAttribL2dv is export;
our &glVertexAttribL2dvEXT is export;
our &glVertexAttribL2i64NV is export;
our &glVertexAttribL2i64vNV is export;
our &glVertexAttribL2ui64NV is export;
our &glVertexAttribL2ui64vNV is export;
our &glVertexAttribL3d is export;
our &glVertexAttribL3dEXT is export;
our &glVertexAttribL3dv is export;
our &glVertexAttribL3dvEXT is export;
our &glVertexAttribL3i64NV is export;
our &glVertexAttribL3i64vNV is export;
our &glVertexAttribL3ui64NV is export;
our &glVertexAttribL3ui64vNV is export;
our &glVertexAttribL4d is export;
our &glVertexAttribL4dEXT is export;
our &glVertexAttribL4dv is export;
our &glVertexAttribL4dvEXT is export;
our &glVertexAttribL4i64NV is export;
our &glVertexAttribL4i64vNV is export;
our &glVertexAttribL4ui64NV is export;
our &glVertexAttribL4ui64vNV is export;
our &glVertexAttribLFormat is export;
our &glVertexAttribLFormatNV is export;
our &glVertexAttribLPointer is export;
our &glVertexAttribLPointerEXT is export;
our &glVertexAttribP1ui is export;
our &glVertexAttribP1uiv is export;
our &glVertexAttribP2ui is export;
our &glVertexAttribP2uiv is export;
our &glVertexAttribP3ui is export;
our &glVertexAttribP3uiv is export;
our &glVertexAttribP4ui is export;
our &glVertexAttribP4uiv is export;
our &glVertexAttribParameteriAMD is export;
our &glVertexAttribPointer is export;
our &glVertexAttribPointerARB is export;
our &glVertexAttribPointerNV is export;
our &glVertexAttribs1dvNV is export;
our &glVertexAttribs1fvNV is export;
our &glVertexAttribs1hvNV is export;
our &glVertexAttribs1svNV is export;
our &glVertexAttribs2dvNV is export;
our &glVertexAttribs2fvNV is export;
our &glVertexAttribs2hvNV is export;
our &glVertexAttribs2svNV is export;
our &glVertexAttribs3dvNV is export;
our &glVertexAttribs3fvNV is export;
our &glVertexAttribs3hvNV is export;
our &glVertexAttribs3svNV is export;
our &glVertexAttribs4dvNV is export;
our &glVertexAttribs4fvNV is export;
our &glVertexAttribs4hvNV is export;
our &glVertexAttribs4svNV is export;
our &glVertexAttribs4ubvNV is export;
our &glVertexBindingDivisor is export;
our &glVertexBlendARB is export;
our &glVertexBlendEnvfATI is export;
our &glVertexBlendEnviATI is export;
our &glVertexFormatNV is export;
our &glVertexP2ui is export;
our &glVertexP2uiv is export;
our &glVertexP3ui is export;
our &glVertexP3uiv is export;
our &glVertexP4ui is export;
our &glVertexP4uiv is export;
our &glVertexPointer is export;
our &glVertexPointerEXT is export;
our &glVertexPointerListIBM is export;
our &glVertexPointervINTEL is export;
our &glVertexStream1dATI is export;
our &glVertexStream1dvATI is export;
our &glVertexStream1fATI is export;
our &glVertexStream1fvATI is export;
our &glVertexStream1iATI is export;
our &glVertexStream1ivATI is export;
our &glVertexStream1sATI is export;
our &glVertexStream1svATI is export;
our &glVertexStream2dATI is export;
our &glVertexStream2dvATI is export;
our &glVertexStream2fATI is export;
our &glVertexStream2fvATI is export;
our &glVertexStream2iATI is export;
our &glVertexStream2ivATI is export;
our &glVertexStream2sATI is export;
our &glVertexStream2svATI is export;
our &glVertexStream3dATI is export;
our &glVertexStream3dvATI is export;
our &glVertexStream3fATI is export;
our &glVertexStream3fvATI is export;
our &glVertexStream3iATI is export;
our &glVertexStream3ivATI is export;
our &glVertexStream3sATI is export;
our &glVertexStream3svATI is export;
our &glVertexStream4dATI is export;
our &glVertexStream4dvATI is export;
our &glVertexStream4fATI is export;
our &glVertexStream4fvATI is export;
our &glVertexStream4iATI is export;
our &glVertexStream4ivATI is export;
our &glVertexStream4sATI is export;
our &glVertexStream4svATI is export;
our &glVertexWeightPointerEXT is export;
our &glVertexWeightfEXT is export;
our &glVertexWeightfvEXT is export;
our &glVertexWeighthNV is export;
our &glVertexWeighthvNV is export;
our &glVideoCaptureNV is export;
our &glVideoCaptureStreamParameterdvNV is export;
our &glVideoCaptureStreamParameterfvNV is export;
our &glVideoCaptureStreamParameterivNV is export;
our &glViewport is export;
our &glViewportArrayv is export;
our &glViewportArrayvNV is export;
our &glViewportArrayvOES is export;
our &glViewportIndexedf is export;
our &glViewportIndexedfOES is export;
our &glViewportIndexedfNV is export;
our &glViewportIndexedfv is export;
our &glViewportIndexedfvOES is export;
our &glViewportIndexedfvNV is export;
our &glViewportPositionWScaleNV is export;
our &glViewportSwizzleNV is export;
our &glWaitSemaphoreEXT is export;
our &glWaitSemaphoreui64NVX is export;
our &glWaitSync is export;
our &glWaitSyncAPPLE is export;
our &glWeightPathsNV is export;
our &glWeightPointerARB is export;
our &glWeightPointerOES is export;
our &glWeightbvARB is export;
our &glWeightdvARB is export;
our &glWeightfvARB is export;
our &glWeightivARB is export;
our &glWeightsvARB is export;
our &glWeightubvARB is export;
our &glWeightuivARB is export;
our &glWeightusvARB is export;
our &glWindowPos2d is export;
our &glWindowPos2dARB is export;
our &glWindowPos2dMESA is export;
our &glWindowPos2dv is export;
our &glWindowPos2dvARB is export;
our &glWindowPos2dvMESA is export;
our &glWindowPos2f is export;
our &glWindowPos2fARB is export;
our &glWindowPos2fMESA is export;
our &glWindowPos2fv is export;
our &glWindowPos2fvARB is export;
our &glWindowPos2fvMESA is export;
our &glWindowPos2i is export;
our &glWindowPos2iARB is export;
our &glWindowPos2iMESA is export;
our &glWindowPos2iv is export;
our &glWindowPos2ivARB is export;
our &glWindowPos2ivMESA is export;
our &glWindowPos2s is export;
our &glWindowPos2sARB is export;
our &glWindowPos2sMESA is export;
our &glWindowPos2sv is export;
our &glWindowPos2svARB is export;
our &glWindowPos2svMESA is export;
our &glWindowPos3d is export;
our &glWindowPos3dARB is export;
our &glWindowPos3dMESA is export;
our &glWindowPos3dv is export;
our &glWindowPos3dvARB is export;
our &glWindowPos3dvMESA is export;
our &glWindowPos3f is export;
our &glWindowPos3fARB is export;
our &glWindowPos3fMESA is export;
our &glWindowPos3fv is export;
our &glWindowPos3fvARB is export;
our &glWindowPos3fvMESA is export;
our &glWindowPos3i is export;
our &glWindowPos3iARB is export;
our &glWindowPos3iMESA is export;
our &glWindowPos3iv is export;
our &glWindowPos3ivARB is export;
our &glWindowPos3ivMESA is export;
our &glWindowPos3s is export;
our &glWindowPos3sARB is export;
our &glWindowPos3sMESA is export;
our &glWindowPos3sv is export;
our &glWindowPos3svARB is export;
our &glWindowPos3svMESA is export;
our &glWindowPos4dMESA is export;
our &glWindowPos4dvMESA is export;
our &glWindowPos4fMESA is export;
our &glWindowPos4fvMESA is export;
our &glWindowPos4iMESA is export;
our &glWindowPos4ivMESA is export;
our &glWindowPos4sMESA is export;
our &glWindowPos4svMESA is export;
our &glWindowRectanglesEXT is export;
our &glWriteMaskEXT is export;
our &glDrawVkImageNV is export;
our &glGetVkProcAddrNV is export;
our &glWaitVkSemaphoreNV is export;
our &glSignalVkSemaphoreNV is export;
our &glSignalVkFenceNV is export;
our &glFramebufferParameteriMESA is export;
our &glGetFramebufferParameterivMESA is export;
sub load-gl-procs is export {
	&glAccum = nativecast(:(GLenum $op, GLfloat $value), SDL_GL_GetProcAddress('glAccum')) or return False;
	&glAccumxOES = nativecast(:(GLenum $op, GLfixed $value), SDL_GL_GetProcAddress('glAccumxOES')) or return False;
	&glActiveProgramEXT = nativecast(:(GLuint $program), SDL_GL_GetProcAddress('glActiveProgramEXT')) or return False;
	&glActiveShaderProgram = nativecast(:(GLuint $pipeline, GLuint $program), SDL_GL_GetProcAddress('glActiveShaderProgram')) or return False;
	&glActiveShaderProgramEXT = nativecast(:(GLuint $pipeline, GLuint $program), SDL_GL_GetProcAddress('glActiveShaderProgramEXT')) or return False;
	&glActiveStencilFaceEXT = nativecast(:(GLenum $face), SDL_GL_GetProcAddress('glActiveStencilFaceEXT')) or return False;
	&glActiveTexture = nativecast(:(GLenum $texture), SDL_GL_GetProcAddress('glActiveTexture')) or return False;
	&glActiveTextureARB = nativecast(:(GLenum $texture), SDL_GL_GetProcAddress('glActiveTextureARB')) or return False;
	&glActiveVaryingNV = nativecast(:(GLuint $program, Str $name), SDL_GL_GetProcAddress('glActiveVaryingNV')) or return False;
	&glAlphaFragmentOp1ATI = nativecast(:(GLenum $op, GLuint $dst, GLuint $dstMod, GLuint $arg1, GLuint $arg1Rep, GLuint $arg1Mod), SDL_GL_GetProcAddress('glAlphaFragmentOp1ATI')) or return False;
	&glAlphaFragmentOp2ATI = nativecast(:(GLenum $op, GLuint $dst, GLuint $dstMod, GLuint $arg1, GLuint $arg1Rep, GLuint $arg1Mod, GLuint $arg2, GLuint $arg2Rep, GLuint $arg2Mod), SDL_GL_GetProcAddress('glAlphaFragmentOp2ATI')) or return False;
	&glAlphaFragmentOp3ATI = nativecast(:(GLenum $op, GLuint $dst, GLuint $dstMod, GLuint $arg1, GLuint $arg1Rep, GLuint $arg1Mod, GLuint $arg2, GLuint $arg2Rep, GLuint $arg2Mod, GLuint $arg3, GLuint $arg3Rep, GLuint $arg3Mod), SDL_GL_GetProcAddress('glAlphaFragmentOp3ATI')) or return False;
	&glAlphaFunc = nativecast(:(GLenum $func, GLfloat $ref), SDL_GL_GetProcAddress('glAlphaFunc')) or return False;
	&glAlphaFuncQCOM = nativecast(:(GLenum $func, GLclampf $ref), SDL_GL_GetProcAddress('glAlphaFuncQCOM')) or return False;
	&glAlphaFuncx = nativecast(:(GLenum $func, GLfixed $ref), SDL_GL_GetProcAddress('glAlphaFuncx')) or return False;
	&glAlphaFuncxOES = nativecast(:(GLenum $func, GLfixed $ref), SDL_GL_GetProcAddress('glAlphaFuncxOES')) or return False;
	&glAlphaToCoverageDitherControlNV = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glAlphaToCoverageDitherControlNV')) or return False;
	&glApplyFramebufferAttachmentCMAAINTEL = nativecast(:(), SDL_GL_GetProcAddress('glApplyFramebufferAttachmentCMAAINTEL')) or return False;
	&glApplyTextureEXT = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glApplyTextureEXT')) or return False;
	&glAcquireKeyedMutexWin32EXT = nativecast(:(GLuint $memory, GLuint64 $key, GLuint $timeout --> GLboolean), SDL_GL_GetProcAddress('glAcquireKeyedMutexWin32EXT')) or return False;
	&glAreProgramsResidentNV = nativecast(:(GLsizei $n, CArray[GLuint] $programs, CArray[GLboolean] $residences --> GLboolean), SDL_GL_GetProcAddress('glAreProgramsResidentNV')) or return False;
	&glAreTexturesResident = nativecast(:(GLsizei $n, CArray[GLuint] $textures, CArray[GLboolean] $residences --> GLboolean), SDL_GL_GetProcAddress('glAreTexturesResident')) or return False;
	&glAreTexturesResidentEXT = nativecast(:(GLsizei $n, CArray[GLuint] $textures, CArray[GLboolean] $residences --> GLboolean), SDL_GL_GetProcAddress('glAreTexturesResidentEXT')) or return False;
	&glArrayElement = nativecast(:(GLint $i), SDL_GL_GetProcAddress('glArrayElement')) or return False;
	&glArrayElementEXT = nativecast(:(GLint $i), SDL_GL_GetProcAddress('glArrayElementEXT')) or return False;
	&glArrayObjectATI = nativecast(:(GLenum $array, GLint $size, GLenum $type, GLsizei $stride, GLuint $buffer, GLuint $offset), SDL_GL_GetProcAddress('glArrayObjectATI')) or return False;
	&glAsyncCopyBufferSubDataNVX = nativecast(:(GLsizei $waitSemaphoreCount, CArray[GLuint] $waitSemaphoreArray, CArray[GLuint64] $fenceValueArray, GLuint $readGpu, GLbitfield $writeGpuMask, GLuint $readBuffer, GLuint $writeBuffer, GLintptr $readOffset, GLintptr $writeOffset, GLsizeiptr $size, GLsizei $signalSemaphoreCount, CArray[GLuint] $signalSemaphoreArray, CArray[GLuint64] $signalValueArray --> GLuint), SDL_GL_GetProcAddress('glAsyncCopyBufferSubDataNVX')) or return False;
	&glAsyncCopyImageSubDataNVX = nativecast(:(GLsizei $waitSemaphoreCount, CArray[GLuint] $waitSemaphoreArray, CArray[GLuint64] $waitValueArray, GLuint $srcGpu, GLbitfield $dstGpuMask, GLuint $srcName, GLenum $srcTarget, GLint $srcLevel, GLint $srcX, GLint $srcY, GLint $srcZ, GLuint $dstName, GLenum $dstTarget, GLint $dstLevel, GLint $dstX, GLint $dstY, GLint $dstZ, GLsizei $srcWidth, GLsizei $srcHeight, GLsizei $srcDepth, GLsizei $signalSemaphoreCount, CArray[GLuint] $signalSemaphoreArray, CArray[GLuint64] $signalValueArray --> GLuint), SDL_GL_GetProcAddress('glAsyncCopyImageSubDataNVX')) or return False;
	&glAsyncMarkerSGIX = nativecast(:(GLuint $marker), SDL_GL_GetProcAddress('glAsyncMarkerSGIX')) or return False;
	&glAttachObjectARB = nativecast(:(GLhandleARB $containerObj, GLhandleARB $obj), SDL_GL_GetProcAddress('glAttachObjectARB')) or return False;
	&glAttachShader = nativecast(:(GLuint $program, GLuint $shader), SDL_GL_GetProcAddress('glAttachShader')) or return False;
	&glBegin = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glBegin')) or return False;
	&glBeginConditionalRender = nativecast(:(GLuint $id, GLenum $mode), SDL_GL_GetProcAddress('glBeginConditionalRender')) or return False;
	&glBeginConditionalRenderNV = nativecast(:(GLuint $id, GLenum $mode), SDL_GL_GetProcAddress('glBeginConditionalRenderNV')) or return False;
	&glBeginConditionalRenderNVX = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glBeginConditionalRenderNVX')) or return False;
	&glBeginFragmentShaderATI = nativecast(:(), SDL_GL_GetProcAddress('glBeginFragmentShaderATI')) or return False;
	&glBeginOcclusionQueryNV = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glBeginOcclusionQueryNV')) or return False;
	&glBeginPerfMonitorAMD = nativecast(:(GLuint $monitor), SDL_GL_GetProcAddress('glBeginPerfMonitorAMD')) or return False;
	&glBeginPerfQueryINTEL = nativecast(:(GLuint $queryHandle), SDL_GL_GetProcAddress('glBeginPerfQueryINTEL')) or return False;
	&glBeginQuery = nativecast(:(GLenum $target, GLuint $id), SDL_GL_GetProcAddress('glBeginQuery')) or return False;
	&glBeginQueryARB = nativecast(:(GLenum $target, GLuint $id), SDL_GL_GetProcAddress('glBeginQueryARB')) or return False;
	&glBeginQueryEXT = nativecast(:(GLenum $target, GLuint $id), SDL_GL_GetProcAddress('glBeginQueryEXT')) or return False;
	&glBeginQueryIndexed = nativecast(:(GLenum $target, GLuint $index, GLuint $id), SDL_GL_GetProcAddress('glBeginQueryIndexed')) or return False;
	&glBeginTransformFeedback = nativecast(:(GLenum $primitiveMode), SDL_GL_GetProcAddress('glBeginTransformFeedback')) or return False;
	&glBeginTransformFeedbackEXT = nativecast(:(GLenum $primitiveMode), SDL_GL_GetProcAddress('glBeginTransformFeedbackEXT')) or return False;
	&glBeginTransformFeedbackNV = nativecast(:(GLenum $primitiveMode), SDL_GL_GetProcAddress('glBeginTransformFeedbackNV')) or return False;
	&glBeginVertexShaderEXT = nativecast(:(), SDL_GL_GetProcAddress('glBeginVertexShaderEXT')) or return False;
	&glBeginVideoCaptureNV = nativecast(:(GLuint $video_capture_slot), SDL_GL_GetProcAddress('glBeginVideoCaptureNV')) or return False;
	&glBindAttribLocation = nativecast(:(GLuint $program, GLuint $index, Str $name), SDL_GL_GetProcAddress('glBindAttribLocation')) or return False;
	&glBindAttribLocationARB = nativecast(:(GLhandleARB $programObj, GLuint $index, Str $name), SDL_GL_GetProcAddress('glBindAttribLocationARB')) or return False;
	&glBindBuffer = nativecast(:(GLenum $target, GLuint $buffer), SDL_GL_GetProcAddress('glBindBuffer')) or return False;
	&glBindBufferARB = nativecast(:(GLenum $target, GLuint $buffer), SDL_GL_GetProcAddress('glBindBufferARB')) or return False;
	&glBindBufferBase = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer), SDL_GL_GetProcAddress('glBindBufferBase')) or return False;
	&glBindBufferBaseEXT = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer), SDL_GL_GetProcAddress('glBindBufferBaseEXT')) or return False;
	&glBindBufferBaseNV = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer), SDL_GL_GetProcAddress('glBindBufferBaseNV')) or return False;
	&glBindBufferOffsetEXT = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer, GLintptr $offset), SDL_GL_GetProcAddress('glBindBufferOffsetEXT')) or return False;
	&glBindBufferOffsetNV = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer, GLintptr $offset), SDL_GL_GetProcAddress('glBindBufferOffsetNV')) or return False;
	&glBindBufferRange = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glBindBufferRange')) or return False;
	&glBindBufferRangeEXT = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glBindBufferRangeEXT')) or return False;
	&glBindBufferRangeNV = nativecast(:(GLenum $target, GLuint $index, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glBindBufferRangeNV')) or return False;
	&glBindBuffersBase = nativecast(:(GLenum $target, GLuint $first, GLsizei $count, CArray[GLuint] $buffers), SDL_GL_GetProcAddress('glBindBuffersBase')) or return False;
	&glBindBuffersRange = nativecast(:(GLenum $target, GLuint $first, GLsizei $count, CArray[GLuint] $buffers, CArray[GLintptr] $offsets, CArray[GLsizeiptr] $sizes), SDL_GL_GetProcAddress('glBindBuffersRange')) or return False;
	&glBindFragDataLocation = nativecast(:(GLuint $program, GLuint $color, Str $name), SDL_GL_GetProcAddress('glBindFragDataLocation')) or return False;
	&glBindFragDataLocationEXT = nativecast(:(GLuint $program, GLuint $color, Str $name), SDL_GL_GetProcAddress('glBindFragDataLocationEXT')) or return False;
	&glBindFragDataLocationIndexed = nativecast(:(GLuint $program, GLuint $colorNumber, GLuint $index, Str $name), SDL_GL_GetProcAddress('glBindFragDataLocationIndexed')) or return False;
	&glBindFragDataLocationIndexedEXT = nativecast(:(GLuint $program, GLuint $colorNumber, GLuint $index, Str $name), SDL_GL_GetProcAddress('glBindFragDataLocationIndexedEXT')) or return False;
	&glBindFragmentShaderATI = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glBindFragmentShaderATI')) or return False;
	&glBindFramebuffer = nativecast(:(GLenum $target, GLuint $framebuffer), SDL_GL_GetProcAddress('glBindFramebuffer')) or return False;
	&glBindFramebufferEXT = nativecast(:(GLenum $target, GLuint $framebuffer), SDL_GL_GetProcAddress('glBindFramebufferEXT')) or return False;
	&glBindFramebufferOES = nativecast(:(GLenum $target, GLuint $framebuffer), SDL_GL_GetProcAddress('glBindFramebufferOES')) or return False;
	&glBindImageTexture = nativecast(:(GLuint $unit, GLuint $texture, GLint $level, GLboolean $layered, GLint $layer, GLenum $access, GLenum $format), SDL_GL_GetProcAddress('glBindImageTexture')) or return False;
	&glBindImageTextureEXT = nativecast(:(GLuint $index, GLuint $texture, GLint $level, GLboolean $layered, GLint $layer, GLenum $access, GLint $format), SDL_GL_GetProcAddress('glBindImageTextureEXT')) or return False;
	&glBindImageTextures = nativecast(:(GLuint $first, GLsizei $count, CArray[GLuint] $textures), SDL_GL_GetProcAddress('glBindImageTextures')) or return False;
	&glBindLightParameterEXT = nativecast(:(GLenum $light, GLenum $value --> GLuint), SDL_GL_GetProcAddress('glBindLightParameterEXT')) or return False;
	&glBindMaterialParameterEXT = nativecast(:(GLenum $face, GLenum $value --> GLuint), SDL_GL_GetProcAddress('glBindMaterialParameterEXT')) or return False;
	&glBindMultiTextureEXT = nativecast(:(GLenum $texunit, GLenum $target, GLuint $texture), SDL_GL_GetProcAddress('glBindMultiTextureEXT')) or return False;
	&glBindParameterEXT = nativecast(:(GLenum $value --> GLuint), SDL_GL_GetProcAddress('glBindParameterEXT')) or return False;
	&glBindProgramARB = nativecast(:(GLenum $target, GLuint $program), SDL_GL_GetProcAddress('glBindProgramARB')) or return False;
	&glBindProgramNV = nativecast(:(GLenum $target, GLuint $id), SDL_GL_GetProcAddress('glBindProgramNV')) or return False;
	&glBindProgramPipeline = nativecast(:(GLuint $pipeline), SDL_GL_GetProcAddress('glBindProgramPipeline')) or return False;
	&glBindProgramPipelineEXT = nativecast(:(GLuint $pipeline), SDL_GL_GetProcAddress('glBindProgramPipelineEXT')) or return False;
	&glBindRenderbuffer = nativecast(:(GLenum $target, GLuint $renderbuffer), SDL_GL_GetProcAddress('glBindRenderbuffer')) or return False;
	&glBindRenderbufferEXT = nativecast(:(GLenum $target, GLuint $renderbuffer), SDL_GL_GetProcAddress('glBindRenderbufferEXT')) or return False;
	&glBindRenderbufferOES = nativecast(:(GLenum $target, GLuint $renderbuffer), SDL_GL_GetProcAddress('glBindRenderbufferOES')) or return False;
	&glBindSampler = nativecast(:(GLuint $unit, GLuint $sampler), SDL_GL_GetProcAddress('glBindSampler')) or return False;
	&glBindSamplers = nativecast(:(GLuint $first, GLsizei $count, CArray[GLuint] $samplers), SDL_GL_GetProcAddress('glBindSamplers')) or return False;
	&glBindShadingRateImageNV = nativecast(:(GLuint $texture), SDL_GL_GetProcAddress('glBindShadingRateImageNV')) or return False;
	&glBindTexGenParameterEXT = nativecast(:(GLenum $unit, GLenum $coord, GLenum $value --> GLuint), SDL_GL_GetProcAddress('glBindTexGenParameterEXT')) or return False;
	&glBindTexture = nativecast(:(GLenum $target, GLuint $texture), SDL_GL_GetProcAddress('glBindTexture')) or return False;
	&glBindTextureEXT = nativecast(:(GLenum $target, GLuint $texture), SDL_GL_GetProcAddress('glBindTextureEXT')) or return False;
	&glBindTextureUnit = nativecast(:(GLuint $unit, GLuint $texture), SDL_GL_GetProcAddress('glBindTextureUnit')) or return False;
	&glBindTextureUnitParameterEXT = nativecast(:(GLenum $unit, GLenum $value --> GLuint), SDL_GL_GetProcAddress('glBindTextureUnitParameterEXT')) or return False;
	&glBindTextures = nativecast(:(GLuint $first, GLsizei $count, CArray[GLuint] $textures), SDL_GL_GetProcAddress('glBindTextures')) or return False;
	&glBindTransformFeedback = nativecast(:(GLenum $target, GLuint $id), SDL_GL_GetProcAddress('glBindTransformFeedback')) or return False;
	&glBindTransformFeedbackNV = nativecast(:(GLenum $target, GLuint $id), SDL_GL_GetProcAddress('glBindTransformFeedbackNV')) or return False;
	&glBindVertexArray = nativecast(:(GLuint $array), SDL_GL_GetProcAddress('glBindVertexArray')) or return False;
	&glBindVertexArrayAPPLE = nativecast(:(GLuint $array), SDL_GL_GetProcAddress('glBindVertexArrayAPPLE')) or return False;
	&glBindVertexArrayOES = nativecast(:(GLuint $array), SDL_GL_GetProcAddress('glBindVertexArrayOES')) or return False;
	&glBindVertexBuffer = nativecast(:(GLuint $bindingindex, GLuint $buffer, GLintptr $offset, GLsizei $stride), SDL_GL_GetProcAddress('glBindVertexBuffer')) or return False;
	&glBindVertexBuffers = nativecast(:(GLuint $first, GLsizei $count, CArray[GLuint] $buffers, CArray[GLintptr] $offsets, CArray[GLsizei] $strides), SDL_GL_GetProcAddress('glBindVertexBuffers')) or return False;
	&glBindVertexShaderEXT = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glBindVertexShaderEXT')) or return False;
	&glBindVideoCaptureStreamBufferNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $frame_region, GLintptrARB $offset), SDL_GL_GetProcAddress('glBindVideoCaptureStreamBufferNV')) or return False;
	&glBindVideoCaptureStreamTextureNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $frame_region, GLenum $target, GLuint $texture), SDL_GL_GetProcAddress('glBindVideoCaptureStreamTextureNV')) or return False;
	&glBinormal3bEXT = nativecast(:(GLbyte $bx, GLbyte $by, GLbyte $bz), SDL_GL_GetProcAddress('glBinormal3bEXT')) or return False;
	&glBinormal3bvEXT = nativecast(:(CArray[GLbyte] $v), SDL_GL_GetProcAddress('glBinormal3bvEXT')) or return False;
	&glBinormal3dEXT = nativecast(:(GLdouble $bx, GLdouble $by, GLdouble $bz), SDL_GL_GetProcAddress('glBinormal3dEXT')) or return False;
	&glBinormal3dvEXT = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glBinormal3dvEXT')) or return False;
	&glBinormal3fEXT = nativecast(:(GLfloat $bx, GLfloat $by, GLfloat $bz), SDL_GL_GetProcAddress('glBinormal3fEXT')) or return False;
	&glBinormal3fvEXT = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glBinormal3fvEXT')) or return False;
	&glBinormal3iEXT = nativecast(:(GLint $bx, GLint $by, GLint $bz), SDL_GL_GetProcAddress('glBinormal3iEXT')) or return False;
	&glBinormal3ivEXT = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glBinormal3ivEXT')) or return False;
	&glBinormal3sEXT = nativecast(:(GLshort $bx, GLshort $by, GLshort $bz), SDL_GL_GetProcAddress('glBinormal3sEXT')) or return False;
	&glBinormal3svEXT = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glBinormal3svEXT')) or return False;
	&glBinormalPointerEXT = nativecast(:(GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glBinormalPointerEXT')) or return False;
	&glBitmap = nativecast(:(GLsizei $width, GLsizei $height, GLfloat $xorig, GLfloat $yorig, GLfloat $xmove, GLfloat $ymove, CArray[GLubyte] $bitmap), SDL_GL_GetProcAddress('glBitmap')) or return False;
	&glBitmapxOES = nativecast(:(GLsizei $width, GLsizei $height, GLfixed $xorig, GLfixed $yorig, GLfixed $xmove, GLfixed $ymove, CArray[GLubyte] $bitmap), SDL_GL_GetProcAddress('glBitmapxOES')) or return False;
	&glBlendBarrier = nativecast(:(), SDL_GL_GetProcAddress('glBlendBarrier')) or return False;
	&glBlendBarrierKHR = nativecast(:(), SDL_GL_GetProcAddress('glBlendBarrierKHR')) or return False;
	&glBlendBarrierNV = nativecast(:(), SDL_GL_GetProcAddress('glBlendBarrierNV')) or return False;
	&glBlendColor = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue, GLfloat $alpha), SDL_GL_GetProcAddress('glBlendColor')) or return False;
	&glBlendColorEXT = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue, GLfloat $alpha), SDL_GL_GetProcAddress('glBlendColorEXT')) or return False;
	&glBlendColorxOES = nativecast(:(GLfixed $red, GLfixed $green, GLfixed $blue, GLfixed $alpha), SDL_GL_GetProcAddress('glBlendColorxOES')) or return False;
	&glBlendEquation = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glBlendEquation')) or return False;
	&glBlendEquationEXT = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glBlendEquationEXT')) or return False;
	&glBlendEquationIndexedAMD = nativecast(:(GLuint $buf, GLenum $mode), SDL_GL_GetProcAddress('glBlendEquationIndexedAMD')) or return False;
	&glBlendEquationOES = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glBlendEquationOES')) or return False;
	&glBlendEquationSeparate = nativecast(:(GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparate')) or return False;
	&glBlendEquationSeparateEXT = nativecast(:(GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparateEXT')) or return False;
	&glBlendEquationSeparateIndexedAMD = nativecast(:(GLuint $buf, GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparateIndexedAMD')) or return False;
	&glBlendEquationSeparateOES = nativecast(:(GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparateOES')) or return False;
	&glBlendEquationSeparatei = nativecast(:(GLuint $buf, GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparatei')) or return False;
	&glBlendEquationSeparateiARB = nativecast(:(GLuint $buf, GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparateiARB')) or return False;
	&glBlendEquationSeparateiEXT = nativecast(:(GLuint $buf, GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparateiEXT')) or return False;
	&glBlendEquationSeparateiOES = nativecast(:(GLuint $buf, GLenum $modeRGB, GLenum $modeAlpha), SDL_GL_GetProcAddress('glBlendEquationSeparateiOES')) or return False;
	&glBlendEquationi = nativecast(:(GLuint $buf, GLenum $mode), SDL_GL_GetProcAddress('glBlendEquationi')) or return False;
	&glBlendEquationiARB = nativecast(:(GLuint $buf, GLenum $mode), SDL_GL_GetProcAddress('glBlendEquationiARB')) or return False;
	&glBlendEquationiEXT = nativecast(:(GLuint $buf, GLenum $mode), SDL_GL_GetProcAddress('glBlendEquationiEXT')) or return False;
	&glBlendEquationiOES = nativecast(:(GLuint $buf, GLenum $mode), SDL_GL_GetProcAddress('glBlendEquationiOES')) or return False;
	&glBlendFunc = nativecast(:(GLenum $sfactor, GLenum $dfactor), SDL_GL_GetProcAddress('glBlendFunc')) or return False;
	&glBlendFuncIndexedAMD = nativecast(:(GLuint $buf, GLenum $src, GLenum $dst), SDL_GL_GetProcAddress('glBlendFuncIndexedAMD')) or return False;
	&glBlendFuncSeparate = nativecast(:(GLenum $sfactorRGB, GLenum $dfactorRGB, GLenum $sfactorAlpha, GLenum $dfactorAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparate')) or return False;
	&glBlendFuncSeparateEXT = nativecast(:(GLenum $sfactorRGB, GLenum $dfactorRGB, GLenum $sfactorAlpha, GLenum $dfactorAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparateEXT')) or return False;
	&glBlendFuncSeparateINGR = nativecast(:(GLenum $sfactorRGB, GLenum $dfactorRGB, GLenum $sfactorAlpha, GLenum $dfactorAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparateINGR')) or return False;
	&glBlendFuncSeparateIndexedAMD = nativecast(:(GLuint $buf, GLenum $srcRGB, GLenum $dstRGB, GLenum $srcAlpha, GLenum $dstAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparateIndexedAMD')) or return False;
	&glBlendFuncSeparateOES = nativecast(:(GLenum $srcRGB, GLenum $dstRGB, GLenum $srcAlpha, GLenum $dstAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparateOES')) or return False;
	&glBlendFuncSeparatei = nativecast(:(GLuint $buf, GLenum $srcRGB, GLenum $dstRGB, GLenum $srcAlpha, GLenum $dstAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparatei')) or return False;
	&glBlendFuncSeparateiARB = nativecast(:(GLuint $buf, GLenum $srcRGB, GLenum $dstRGB, GLenum $srcAlpha, GLenum $dstAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparateiARB')) or return False;
	&glBlendFuncSeparateiEXT = nativecast(:(GLuint $buf, GLenum $srcRGB, GLenum $dstRGB, GLenum $srcAlpha, GLenum $dstAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparateiEXT')) or return False;
	&glBlendFuncSeparateiOES = nativecast(:(GLuint $buf, GLenum $srcRGB, GLenum $dstRGB, GLenum $srcAlpha, GLenum $dstAlpha), SDL_GL_GetProcAddress('glBlendFuncSeparateiOES')) or return False;
	&glBlendFunci = nativecast(:(GLuint $buf, GLenum $src, GLenum $dst), SDL_GL_GetProcAddress('glBlendFunci')) or return False;
	&glBlendFunciARB = nativecast(:(GLuint $buf, GLenum $src, GLenum $dst), SDL_GL_GetProcAddress('glBlendFunciARB')) or return False;
	&glBlendFunciEXT = nativecast(:(GLuint $buf, GLenum $src, GLenum $dst), SDL_GL_GetProcAddress('glBlendFunciEXT')) or return False;
	&glBlendFunciOES = nativecast(:(GLuint $buf, GLenum $src, GLenum $dst), SDL_GL_GetProcAddress('glBlendFunciOES')) or return False;
	&glBlendParameteriNV = nativecast(:(GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glBlendParameteriNV')) or return False;
	&glBlitFramebuffer = nativecast(:(GLint $srcX0, GLint $srcY0, GLint $srcX1, GLint $srcY1, GLint $dstX0, GLint $dstY0, GLint $dstX1, GLint $dstY1, GLbitfield $mask, GLenum $filter), SDL_GL_GetProcAddress('glBlitFramebuffer')) or return False;
	&glBlitFramebufferANGLE = nativecast(:(GLint $srcX0, GLint $srcY0, GLint $srcX1, GLint $srcY1, GLint $dstX0, GLint $dstY0, GLint $dstX1, GLint $dstY1, GLbitfield $mask, GLenum $filter), SDL_GL_GetProcAddress('glBlitFramebufferANGLE')) or return False;
	&glBlitFramebufferEXT = nativecast(:(GLint $srcX0, GLint $srcY0, GLint $srcX1, GLint $srcY1, GLint $dstX0, GLint $dstY0, GLint $dstX1, GLint $dstY1, GLbitfield $mask, GLenum $filter), SDL_GL_GetProcAddress('glBlitFramebufferEXT')) or return False;
	&glBlitFramebufferNV = nativecast(:(GLint $srcX0, GLint $srcY0, GLint $srcX1, GLint $srcY1, GLint $dstX0, GLint $dstY0, GLint $dstX1, GLint $dstY1, GLbitfield $mask, GLenum $filter), SDL_GL_GetProcAddress('glBlitFramebufferNV')) or return False;
	&glBlitNamedFramebuffer = nativecast(:(GLuint $readFramebuffer, GLuint $drawFramebuffer, GLint $srcX0, GLint $srcY0, GLint $srcX1, GLint $srcY1, GLint $dstX0, GLint $dstY0, GLint $dstX1, GLint $dstY1, GLbitfield $mask, GLenum $filter), SDL_GL_GetProcAddress('glBlitNamedFramebuffer')) or return False;
	&glBufferAddressRangeNV = nativecast(:(GLenum $pname, GLuint $index, GLuint64EXT $address, GLsizeiptr $length), SDL_GL_GetProcAddress('glBufferAddressRangeNV')) or return False;
	&glBufferAttachMemoryNV = nativecast(:(GLenum $target, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glBufferAttachMemoryNV')) or return False;
	&glBufferData = nativecast(:(GLenum $target, GLsizeiptr $size, Pointer $data, GLenum $usage), SDL_GL_GetProcAddress('glBufferData')) or return False;
	&glBufferDataARB = nativecast(:(GLenum $target, GLsizeiptrARB $size, Pointer $data, GLenum $usage), SDL_GL_GetProcAddress('glBufferDataARB')) or return False;
	&glBufferPageCommitmentARB = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $size, GLboolean $commit), SDL_GL_GetProcAddress('glBufferPageCommitmentARB')) or return False;
	&glBufferPageCommitmentMemNV = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $size, GLuint $memory, GLuint64 $memOffset, GLboolean $commit), SDL_GL_GetProcAddress('glBufferPageCommitmentMemNV')) or return False;
	&glBufferParameteriAPPLE = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glBufferParameteriAPPLE')) or return False;
	&glBufferStorage = nativecast(:(GLenum $target, GLsizeiptr $size, Pointer $data, GLbitfield $flags), SDL_GL_GetProcAddress('glBufferStorage')) or return False;
	&glBufferStorageEXT = nativecast(:(GLenum $target, GLsizeiptr $size, Pointer $data, GLbitfield $flags), SDL_GL_GetProcAddress('glBufferStorageEXT')) or return False;
	&glBufferStorageExternalEXT = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $size, GLeglClientBufferEXT $clientBuffer, GLbitfield $flags), SDL_GL_GetProcAddress('glBufferStorageExternalEXT')) or return False;
	&glBufferStorageMemEXT = nativecast(:(GLenum $target, GLsizeiptr $size, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glBufferStorageMemEXT')) or return False;
	&glBufferSubData = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glBufferSubData')) or return False;
	&glBufferSubDataARB = nativecast(:(GLenum $target, GLintptrARB $offset, GLsizeiptrARB $size, Pointer $data), SDL_GL_GetProcAddress('glBufferSubDataARB')) or return False;
	&glCallCommandListNV = nativecast(:(GLuint $list), SDL_GL_GetProcAddress('glCallCommandListNV')) or return False;
	&glCallList = nativecast(:(GLuint $list), SDL_GL_GetProcAddress('glCallList')) or return False;
	&glCallLists = nativecast(:(GLsizei $n, GLenum $type, Pointer $lists), SDL_GL_GetProcAddress('glCallLists')) or return False;
	&glCheckFramebufferStatus = nativecast(:(GLenum $target --> GLenum), SDL_GL_GetProcAddress('glCheckFramebufferStatus')) or return False;
	&glCheckFramebufferStatusEXT = nativecast(:(GLenum $target --> GLenum), SDL_GL_GetProcAddress('glCheckFramebufferStatusEXT')) or return False;
	&glCheckFramebufferStatusOES = nativecast(:(GLenum $target --> GLenum), SDL_GL_GetProcAddress('glCheckFramebufferStatusOES')) or return False;
	&glCheckNamedFramebufferStatus = nativecast(:(GLuint $framebuffer, GLenum $target --> GLenum), SDL_GL_GetProcAddress('glCheckNamedFramebufferStatus')) or return False;
	&glCheckNamedFramebufferStatusEXT = nativecast(:(GLuint $framebuffer, GLenum $target --> GLenum), SDL_GL_GetProcAddress('glCheckNamedFramebufferStatusEXT')) or return False;
	&glClampColor = nativecast(:(GLenum $target, GLenum $clamp), SDL_GL_GetProcAddress('glClampColor')) or return False;
	&glClampColorARB = nativecast(:(GLenum $target, GLenum $clamp), SDL_GL_GetProcAddress('glClampColorARB')) or return False;
	&glClear = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glClear')) or return False;
	&glClearAccum = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue, GLfloat $alpha), SDL_GL_GetProcAddress('glClearAccum')) or return False;
	&glClearAccumxOES = nativecast(:(GLfixed $red, GLfixed $green, GLfixed $blue, GLfixed $alpha), SDL_GL_GetProcAddress('glClearAccumxOES')) or return False;
	&glClearBufferData = nativecast(:(GLenum $target, GLenum $internalformat, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearBufferData')) or return False;
	&glClearBufferSubData = nativecast(:(GLenum $target, GLenum $internalformat, GLintptr $offset, GLsizeiptr $size, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearBufferSubData')) or return False;
	&glClearBufferfi = nativecast(:(GLenum $buffer, GLint $drawbuffer, GLfloat $depth, GLint $stencil), SDL_GL_GetProcAddress('glClearBufferfi')) or return False;
	&glClearBufferfv = nativecast(:(GLenum $buffer, GLint $drawbuffer, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glClearBufferfv')) or return False;
	&glClearBufferiv = nativecast(:(GLenum $buffer, GLint $drawbuffer, CArray[GLint] $value), SDL_GL_GetProcAddress('glClearBufferiv')) or return False;
	&glClearBufferuiv = nativecast(:(GLenum $buffer, GLint $drawbuffer, CArray[GLuint] $value), SDL_GL_GetProcAddress('glClearBufferuiv')) or return False;
	&glClearColor = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue, GLfloat $alpha), SDL_GL_GetProcAddress('glClearColor')) or return False;
	&glClearColorIiEXT = nativecast(:(GLint $red, GLint $green, GLint $blue, GLint $alpha), SDL_GL_GetProcAddress('glClearColorIiEXT')) or return False;
	&glClearColorIuiEXT = nativecast(:(GLuint $red, GLuint $green, GLuint $blue, GLuint $alpha), SDL_GL_GetProcAddress('glClearColorIuiEXT')) or return False;
	&glClearColorx = nativecast(:(GLfixed $red, GLfixed $green, GLfixed $blue, GLfixed $alpha), SDL_GL_GetProcAddress('glClearColorx')) or return False;
	&glClearColorxOES = nativecast(:(GLfixed $red, GLfixed $green, GLfixed $blue, GLfixed $alpha), SDL_GL_GetProcAddress('glClearColorxOES')) or return False;
	&glClearDepth = nativecast(:(GLdouble $depth), SDL_GL_GetProcAddress('glClearDepth')) or return False;
	&glClearDepthdNV = nativecast(:(GLdouble $depth), SDL_GL_GetProcAddress('glClearDepthdNV')) or return False;
	&glClearDepthf = nativecast(:(GLfloat $d), SDL_GL_GetProcAddress('glClearDepthf')) or return False;
	&glClearDepthfOES = nativecast(:(GLclampf $depth), SDL_GL_GetProcAddress('glClearDepthfOES')) or return False;
	&glClearDepthx = nativecast(:(GLfixed $depth), SDL_GL_GetProcAddress('glClearDepthx')) or return False;
	&glClearDepthxOES = nativecast(:(GLfixed $depth), SDL_GL_GetProcAddress('glClearDepthxOES')) or return False;
	&glClearIndex = nativecast(:(GLfloat $c), SDL_GL_GetProcAddress('glClearIndex')) or return False;
	&glClearNamedBufferData = nativecast(:(GLuint $buffer, GLenum $internalformat, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearNamedBufferData')) or return False;
	&glClearNamedBufferDataEXT = nativecast(:(GLuint $buffer, GLenum $internalformat, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearNamedBufferDataEXT')) or return False;
	&glClearNamedBufferSubData = nativecast(:(GLuint $buffer, GLenum $internalformat, GLintptr $offset, GLsizeiptr $size, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearNamedBufferSubData')) or return False;
	&glClearNamedBufferSubDataEXT = nativecast(:(GLuint $buffer, GLenum $internalformat, GLsizeiptr $offset, GLsizeiptr $size, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearNamedBufferSubDataEXT')) or return False;
	&glClearNamedFramebufferfi = nativecast(:(GLuint $framebuffer, GLenum $buffer, GLint $drawbuffer, GLfloat $depth, GLint $stencil), SDL_GL_GetProcAddress('glClearNamedFramebufferfi')) or return False;
	&glClearNamedFramebufferfv = nativecast(:(GLuint $framebuffer, GLenum $buffer, GLint $drawbuffer, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glClearNamedFramebufferfv')) or return False;
	&glClearNamedFramebufferiv = nativecast(:(GLuint $framebuffer, GLenum $buffer, GLint $drawbuffer, CArray[GLint] $value), SDL_GL_GetProcAddress('glClearNamedFramebufferiv')) or return False;
	&glClearNamedFramebufferuiv = nativecast(:(GLuint $framebuffer, GLenum $buffer, GLint $drawbuffer, CArray[GLuint] $value), SDL_GL_GetProcAddress('glClearNamedFramebufferuiv')) or return False;
	&glClearPixelLocalStorageuiEXT = nativecast(:(GLsizei $offset, GLsizei $n, CArray[GLuint] $values), SDL_GL_GetProcAddress('glClearPixelLocalStorageuiEXT')) or return False;
	&glClearStencil = nativecast(:(GLint $s), SDL_GL_GetProcAddress('glClearStencil')) or return False;
	&glClearTexImage = nativecast(:(GLuint $texture, GLint $level, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearTexImage')) or return False;
	&glClearTexImageEXT = nativecast(:(GLuint $texture, GLint $level, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearTexImageEXT')) or return False;
	&glClearTexSubImage = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearTexSubImage')) or return False;
	&glClearTexSubImageEXT = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glClearTexSubImageEXT')) or return False;
	&glClientActiveTexture = nativecast(:(GLenum $texture), SDL_GL_GetProcAddress('glClientActiveTexture')) or return False;
	&glClientActiveTextureARB = nativecast(:(GLenum $texture), SDL_GL_GetProcAddress('glClientActiveTextureARB')) or return False;
	&glClientActiveVertexStreamATI = nativecast(:(GLenum $stream), SDL_GL_GetProcAddress('glClientActiveVertexStreamATI')) or return False;
	&glClientAttribDefaultEXT = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glClientAttribDefaultEXT')) or return False;
	&glClientWaitSemaphoreui64NVX = nativecast(:(GLsizei $fenceObjectCount, CArray[GLuint] $semaphoreArray, CArray[GLuint64] $fenceValueArray), SDL_GL_GetProcAddress('glClientWaitSemaphoreui64NVX')) or return False;
	&glClientWaitSync = nativecast(:(GLsync $sync, GLbitfield $flags, GLuint64 $timeout --> GLenum), SDL_GL_GetProcAddress('glClientWaitSync')) or return False;
	&glClientWaitSyncAPPLE = nativecast(:(GLsync $sync, GLbitfield $flags, GLuint64 $timeout --> GLenum), SDL_GL_GetProcAddress('glClientWaitSyncAPPLE')) or return False;
	&glClipControl = nativecast(:(GLenum $origin, GLenum $depth), SDL_GL_GetProcAddress('glClipControl')) or return False;
	&glClipControlEXT = nativecast(:(GLenum $origin, GLenum $depth), SDL_GL_GetProcAddress('glClipControlEXT')) or return False;
	&glClipPlane = nativecast(:(GLenum $plane, CArray[GLdouble] $equation), SDL_GL_GetProcAddress('glClipPlane')) or return False;
	&glClipPlanef = nativecast(:(GLenum $p, CArray[GLfloat] $eqn), SDL_GL_GetProcAddress('glClipPlanef')) or return False;
	&glClipPlanefIMG = nativecast(:(GLenum $p, CArray[GLfloat] $eqn), SDL_GL_GetProcAddress('glClipPlanefIMG')) or return False;
	&glClipPlanefOES = nativecast(:(GLenum $plane, CArray[GLfloat] $equation), SDL_GL_GetProcAddress('glClipPlanefOES')) or return False;
	&glClipPlanex = nativecast(:(GLenum $plane, CArray[GLfixed] $equation), SDL_GL_GetProcAddress('glClipPlanex')) or return False;
	&glClipPlanexIMG = nativecast(:(GLenum $p, CArray[GLfixed] $eqn), SDL_GL_GetProcAddress('glClipPlanexIMG')) or return False;
	&glClipPlanexOES = nativecast(:(GLenum $plane, CArray[GLfixed] $equation), SDL_GL_GetProcAddress('glClipPlanexOES')) or return False;
	&glColor3b = nativecast(:(GLbyte $red, GLbyte $green, GLbyte $blue), SDL_GL_GetProcAddress('glColor3b')) or return False;
	&glColor3bv = nativecast(:(CArray[GLbyte] $v), SDL_GL_GetProcAddress('glColor3bv')) or return False;
	&glColor3d = nativecast(:(GLdouble $red, GLdouble $green, GLdouble $blue), SDL_GL_GetProcAddress('glColor3d')) or return False;
	&glColor3dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glColor3dv')) or return False;
	&glColor3f = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue), SDL_GL_GetProcAddress('glColor3f')) or return False;
	&glColor3fVertex3fSUN = nativecast(:(GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glColor3fVertex3fSUN')) or return False;
	&glColor3fVertex3fvSUN = nativecast(:(CArray[GLfloat] $c, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glColor3fVertex3fvSUN')) or return False;
	&glColor3fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glColor3fv')) or return False;
	&glColor3hNV = nativecast(:(GLhalfNV $red, GLhalfNV $green, GLhalfNV $blue), SDL_GL_GetProcAddress('glColor3hNV')) or return False;
	&glColor3hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glColor3hvNV')) or return False;
	&glColor3i = nativecast(:(GLint $red, GLint $green, GLint $blue), SDL_GL_GetProcAddress('glColor3i')) or return False;
	&glColor3iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glColor3iv')) or return False;
	&glColor3s = nativecast(:(GLshort $red, GLshort $green, GLshort $blue), SDL_GL_GetProcAddress('glColor3s')) or return False;
	&glColor3sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glColor3sv')) or return False;
	&glColor3ub = nativecast(:(GLubyte $red, GLubyte $green, GLubyte $blue), SDL_GL_GetProcAddress('glColor3ub')) or return False;
	&glColor3ubv = nativecast(:(CArray[GLubyte] $v), SDL_GL_GetProcAddress('glColor3ubv')) or return False;
	&glColor3ui = nativecast(:(GLuint $red, GLuint $green, GLuint $blue), SDL_GL_GetProcAddress('glColor3ui')) or return False;
	&glColor3uiv = nativecast(:(CArray[GLuint] $v), SDL_GL_GetProcAddress('glColor3uiv')) or return False;
	&glColor3us = nativecast(:(GLushort $red, GLushort $green, GLushort $blue), SDL_GL_GetProcAddress('glColor3us')) or return False;
	&glColor3usv = nativecast(:(CArray[GLushort] $v), SDL_GL_GetProcAddress('glColor3usv')) or return False;
	&glColor3xOES = nativecast(:(GLfixed $red, GLfixed $green, GLfixed $blue), SDL_GL_GetProcAddress('glColor3xOES')) or return False;
	&glColor3xvOES = nativecast(:(CArray[GLfixed] $components), SDL_GL_GetProcAddress('glColor3xvOES')) or return False;
	&glColor4b = nativecast(:(GLbyte $red, GLbyte $green, GLbyte $blue, GLbyte $alpha), SDL_GL_GetProcAddress('glColor4b')) or return False;
	&glColor4bv = nativecast(:(CArray[GLbyte] $v), SDL_GL_GetProcAddress('glColor4bv')) or return False;
	&glColor4d = nativecast(:(GLdouble $red, GLdouble $green, GLdouble $blue, GLdouble $alpha), SDL_GL_GetProcAddress('glColor4d')) or return False;
	&glColor4dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glColor4dv')) or return False;
	&glColor4f = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue, GLfloat $alpha), SDL_GL_GetProcAddress('glColor4f')) or return False;
	&glColor4fNormal3fVertex3fSUN = nativecast(:(GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $a, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glColor4fNormal3fVertex3fSUN')) or return False;
	&glColor4fNormal3fVertex3fvSUN = nativecast(:(CArray[GLfloat] $c, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glColor4fNormal3fVertex3fvSUN')) or return False;
	&glColor4fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glColor4fv')) or return False;
	&glColor4hNV = nativecast(:(GLhalfNV $red, GLhalfNV $green, GLhalfNV $blue, GLhalfNV $alpha), SDL_GL_GetProcAddress('glColor4hNV')) or return False;
	&glColor4hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glColor4hvNV')) or return False;
	&glColor4i = nativecast(:(GLint $red, GLint $green, GLint $blue, GLint $alpha), SDL_GL_GetProcAddress('glColor4i')) or return False;
	&glColor4iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glColor4iv')) or return False;
	&glColor4s = nativecast(:(GLshort $red, GLshort $green, GLshort $blue, GLshort $alpha), SDL_GL_GetProcAddress('glColor4s')) or return False;
	&glColor4sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glColor4sv')) or return False;
	&glColor4ub = nativecast(:(GLubyte $red, GLubyte $green, GLubyte $blue, GLubyte $alpha), SDL_GL_GetProcAddress('glColor4ub')) or return False;
	&glColor4ubVertex2fSUN = nativecast(:(GLubyte $r, GLubyte $g, GLubyte $b, GLubyte $a, GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glColor4ubVertex2fSUN')) or return False;
	&glColor4ubVertex2fvSUN = nativecast(:(CArray[GLubyte] $c, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glColor4ubVertex2fvSUN')) or return False;
	&glColor4ubVertex3fSUN = nativecast(:(GLubyte $r, GLubyte $g, GLubyte $b, GLubyte $a, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glColor4ubVertex3fSUN')) or return False;
	&glColor4ubVertex3fvSUN = nativecast(:(CArray[GLubyte] $c, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glColor4ubVertex3fvSUN')) or return False;
	&glColor4ubv = nativecast(:(CArray[GLubyte] $v), SDL_GL_GetProcAddress('glColor4ubv')) or return False;
	&glColor4ui = nativecast(:(GLuint $red, GLuint $green, GLuint $blue, GLuint $alpha), SDL_GL_GetProcAddress('glColor4ui')) or return False;
	&glColor4uiv = nativecast(:(CArray[GLuint] $v), SDL_GL_GetProcAddress('glColor4uiv')) or return False;
	&glColor4us = nativecast(:(GLushort $red, GLushort $green, GLushort $blue, GLushort $alpha), SDL_GL_GetProcAddress('glColor4us')) or return False;
	&glColor4usv = nativecast(:(CArray[GLushort] $v), SDL_GL_GetProcAddress('glColor4usv')) or return False;
	&glColor4x = nativecast(:(GLfixed $red, GLfixed $green, GLfixed $blue, GLfixed $alpha), SDL_GL_GetProcAddress('glColor4x')) or return False;
	&glColor4xOES = nativecast(:(GLfixed $red, GLfixed $green, GLfixed $blue, GLfixed $alpha), SDL_GL_GetProcAddress('glColor4xOES')) or return False;
	&glColor4xvOES = nativecast(:(CArray[GLfixed] $components), SDL_GL_GetProcAddress('glColor4xvOES')) or return False;
	&glColorFormatNV = nativecast(:(GLint $size, GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glColorFormatNV')) or return False;
	&glColorFragmentOp1ATI = nativecast(:(GLenum $op, GLuint $dst, GLuint $dstMask, GLuint $dstMod, GLuint $arg1, GLuint $arg1Rep, GLuint $arg1Mod), SDL_GL_GetProcAddress('glColorFragmentOp1ATI')) or return False;
	&glColorFragmentOp2ATI = nativecast(:(GLenum $op, GLuint $dst, GLuint $dstMask, GLuint $dstMod, GLuint $arg1, GLuint $arg1Rep, GLuint $arg1Mod, GLuint $arg2, GLuint $arg2Rep, GLuint $arg2Mod), SDL_GL_GetProcAddress('glColorFragmentOp2ATI')) or return False;
	&glColorFragmentOp3ATI = nativecast(:(GLenum $op, GLuint $dst, GLuint $dstMask, GLuint $dstMod, GLuint $arg1, GLuint $arg1Rep, GLuint $arg1Mod, GLuint $arg2, GLuint $arg2Rep, GLuint $arg2Mod, GLuint $arg3, GLuint $arg3Rep, GLuint $arg3Mod), SDL_GL_GetProcAddress('glColorFragmentOp3ATI')) or return False;
	&glColorMask = nativecast(:(GLboolean $red, GLboolean $green, GLboolean $blue, GLboolean $alpha), SDL_GL_GetProcAddress('glColorMask')) or return False;
	&glColorMaskIndexedEXT = nativecast(:(GLuint $index, GLboolean $r, GLboolean $g, GLboolean $b, GLboolean $a), SDL_GL_GetProcAddress('glColorMaskIndexedEXT')) or return False;
	&glColorMaski = nativecast(:(GLuint $index, GLboolean $r, GLboolean $g, GLboolean $b, GLboolean $a), SDL_GL_GetProcAddress('glColorMaski')) or return False;
	&glColorMaskiEXT = nativecast(:(GLuint $index, GLboolean $r, GLboolean $g, GLboolean $b, GLboolean $a), SDL_GL_GetProcAddress('glColorMaskiEXT')) or return False;
	&glColorMaskiOES = nativecast(:(GLuint $index, GLboolean $r, GLboolean $g, GLboolean $b, GLboolean $a), SDL_GL_GetProcAddress('glColorMaskiOES')) or return False;
	&glColorMaterial = nativecast(:(GLenum $face, GLenum $mode), SDL_GL_GetProcAddress('glColorMaterial')) or return False;
	&glColorP3ui = nativecast(:(GLenum $type, GLuint $color), SDL_GL_GetProcAddress('glColorP3ui')) or return False;
	&glColorP3uiv = nativecast(:(GLenum $type, CArray[GLuint] $color), SDL_GL_GetProcAddress('glColorP3uiv')) or return False;
	&glColorP4ui = nativecast(:(GLenum $type, GLuint $color), SDL_GL_GetProcAddress('glColorP4ui')) or return False;
	&glColorP4uiv = nativecast(:(GLenum $type, CArray[GLuint] $color), SDL_GL_GetProcAddress('glColorP4uiv')) or return False;
	&glColorPointer = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glColorPointer')) or return False;
	&glColorPointerEXT = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, GLsizei $count, Pointer $pointer), SDL_GL_GetProcAddress('glColorPointerEXT')) or return False;
	&glColorPointerListIBM = nativecast(:(GLint $size, GLenum $type, GLint $stride, CArray[Pointer] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glColorPointerListIBM')) or return False;
	&glColorPointervINTEL = nativecast(:(GLint $size, GLenum $type, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glColorPointervINTEL')) or return False;
	&glColorSubTable = nativecast(:(GLenum $target, GLsizei $start, GLsizei $count, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glColorSubTable')) or return False;
	&glColorSubTableEXT = nativecast(:(GLenum $target, GLsizei $start, GLsizei $count, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glColorSubTableEXT')) or return False;
	&glColorTable = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLenum $format, GLenum $type, Pointer $table), SDL_GL_GetProcAddress('glColorTable')) or return False;
	&glColorTableEXT = nativecast(:(GLenum $target, GLenum $internalFormat, GLsizei $width, GLenum $format, GLenum $type, Pointer $table), SDL_GL_GetProcAddress('glColorTableEXT')) or return False;
	&glColorTableParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glColorTableParameterfv')) or return False;
	&glColorTableParameterfvSGI = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glColorTableParameterfvSGI')) or return False;
	&glColorTableParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glColorTableParameteriv')) or return False;
	&glColorTableParameterivSGI = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glColorTableParameterivSGI')) or return False;
	&glColorTableSGI = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLenum $format, GLenum $type, Pointer $table), SDL_GL_GetProcAddress('glColorTableSGI')) or return False;
	&glCombinerInputNV = nativecast(:(GLenum $stage, GLenum $portion, GLenum $variable, GLenum $input, GLenum $mapping, GLenum $componentUsage), SDL_GL_GetProcAddress('glCombinerInputNV')) or return False;
	&glCombinerOutputNV = nativecast(:(GLenum $stage, GLenum $portion, GLenum $abOutput, GLenum $cdOutput, GLenum $sumOutput, GLenum $scale, GLenum $bias, GLboolean $abDotProduct, GLboolean $cdDotProduct, GLboolean $muxSum), SDL_GL_GetProcAddress('glCombinerOutputNV')) or return False;
	&glCombinerParameterfNV = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glCombinerParameterfNV')) or return False;
	&glCombinerParameterfvNV = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glCombinerParameterfvNV')) or return False;
	&glCombinerParameteriNV = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glCombinerParameteriNV')) or return False;
	&glCombinerParameterivNV = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glCombinerParameterivNV')) or return False;
	&glCombinerStageParameterfvNV = nativecast(:(GLenum $stage, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glCombinerStageParameterfvNV')) or return False;
	&glCommandListSegmentsNV = nativecast(:(GLuint $list, GLuint $segments), SDL_GL_GetProcAddress('glCommandListSegmentsNV')) or return False;
	&glCompileCommandListNV = nativecast(:(GLuint $list), SDL_GL_GetProcAddress('glCompileCommandListNV')) or return False;
	&glCompileShader = nativecast(:(GLuint $shader), SDL_GL_GetProcAddress('glCompileShader')) or return False;
	&glCompileShaderARB = nativecast(:(GLhandleARB $shaderObj), SDL_GL_GetProcAddress('glCompileShaderARB')) or return False;
	&glCompileShaderIncludeARB = nativecast(:(GLuint $shader, GLsizei $count, CArray[Str] $path, CArray[GLint] $length), SDL_GL_GetProcAddress('glCompileShaderIncludeARB')) or return False;
	&glCompressedMultiTexImage1DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLint $border, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedMultiTexImage1DEXT')) or return False;
	&glCompressedMultiTexImage2DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLint $border, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedMultiTexImage2DEXT')) or return False;
	&glCompressedMultiTexImage3DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedMultiTexImage3DEXT')) or return False;
	&glCompressedMultiTexSubImage1DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedMultiTexSubImage1DEXT')) or return False;
	&glCompressedMultiTexSubImage2DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedMultiTexSubImage2DEXT')) or return False;
	&glCompressedMultiTexSubImage3DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedMultiTexSubImage3DEXT')) or return False;
	&glCompressedTexImage1D = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLint $border, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexImage1D')) or return False;
	&glCompressedTexImage1DARB = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLint $border, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexImage1DARB')) or return False;
	&glCompressedTexImage2D = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLint $border, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexImage2D')) or return False;
	&glCompressedTexImage2DARB = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLint $border, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexImage2DARB')) or return False;
	&glCompressedTexImage3D = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexImage3D')) or return False;
	&glCompressedTexImage3DARB = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexImage3DARB')) or return False;
	&glCompressedTexImage3DOES = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexImage3DOES')) or return False;
	&glCompressedTexSubImage1D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexSubImage1D')) or return False;
	&glCompressedTexSubImage1DARB = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexSubImage1DARB')) or return False;
	&glCompressedTexSubImage2D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexSubImage2D')) or return False;
	&glCompressedTexSubImage2DARB = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexSubImage2DARB')) or return False;
	&glCompressedTexSubImage3D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexSubImage3D')) or return False;
	&glCompressedTexSubImage3DARB = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexSubImage3DARB')) or return False;
	&glCompressedTexSubImage3DOES = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTexSubImage3DOES')) or return False;
	&glCompressedTextureImage1DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLint $border, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedTextureImage1DEXT')) or return False;
	&glCompressedTextureImage2DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLint $border, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedTextureImage2DEXT')) or return False;
	&glCompressedTextureImage3DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedTextureImage3DEXT')) or return False;
	&glCompressedTextureSubImage1D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTextureSubImage1D')) or return False;
	&glCompressedTextureSubImage1DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedTextureSubImage1DEXT')) or return False;
	&glCompressedTextureSubImage2D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTextureSubImage2D')) or return False;
	&glCompressedTextureSubImage2DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedTextureSubImage2DEXT')) or return False;
	&glCompressedTextureSubImage3D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLsizei $imageSize, Pointer $data), SDL_GL_GetProcAddress('glCompressedTextureSubImage3D')) or return False;
	&glCompressedTextureSubImage3DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLsizei $imageSize, Pointer $bits), SDL_GL_GetProcAddress('glCompressedTextureSubImage3DEXT')) or return False;
	&glConservativeRasterParameterfNV = nativecast(:(GLenum $pname, GLfloat $value), SDL_GL_GetProcAddress('glConservativeRasterParameterfNV')) or return False;
	&glConservativeRasterParameteriNV = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glConservativeRasterParameteriNV')) or return False;
	&glConvolutionFilter1D = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLenum $format, GLenum $type, Pointer $image), SDL_GL_GetProcAddress('glConvolutionFilter1D')) or return False;
	&glConvolutionFilter1DEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLenum $format, GLenum $type, Pointer $image), SDL_GL_GetProcAddress('glConvolutionFilter1DEXT')) or return False;
	&glConvolutionFilter2D = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $image), SDL_GL_GetProcAddress('glConvolutionFilter2D')) or return False;
	&glConvolutionFilter2DEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $image), SDL_GL_GetProcAddress('glConvolutionFilter2DEXT')) or return False;
	&glConvolutionParameterf = nativecast(:(GLenum $target, GLenum $pname, GLfloat $params), SDL_GL_GetProcAddress('glConvolutionParameterf')) or return False;
	&glConvolutionParameterfEXT = nativecast(:(GLenum $target, GLenum $pname, GLfloat $params), SDL_GL_GetProcAddress('glConvolutionParameterfEXT')) or return False;
	&glConvolutionParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glConvolutionParameterfv')) or return False;
	&glConvolutionParameterfvEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glConvolutionParameterfvEXT')) or return False;
	&glConvolutionParameteri = nativecast(:(GLenum $target, GLenum $pname, GLint $params), SDL_GL_GetProcAddress('glConvolutionParameteri')) or return False;
	&glConvolutionParameteriEXT = nativecast(:(GLenum $target, GLenum $pname, GLint $params), SDL_GL_GetProcAddress('glConvolutionParameteriEXT')) or return False;
	&glConvolutionParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glConvolutionParameteriv')) or return False;
	&glConvolutionParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glConvolutionParameterivEXT')) or return False;
	&glConvolutionParameterxOES = nativecast(:(GLenum $target, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glConvolutionParameterxOES')) or return False;
	&glConvolutionParameterxvOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glConvolutionParameterxvOES')) or return False;
	&glCopyBufferSubData = nativecast(:(GLenum $readTarget, GLenum $writeTarget, GLintptr $readOffset, GLintptr $writeOffset, GLsizeiptr $size), SDL_GL_GetProcAddress('glCopyBufferSubData')) or return False;
	&glCopyBufferSubDataNV = nativecast(:(GLenum $readTarget, GLenum $writeTarget, GLintptr $readOffset, GLintptr $writeOffset, GLsizeiptr $size), SDL_GL_GetProcAddress('glCopyBufferSubDataNV')) or return False;
	&glCopyColorSubTable = nativecast(:(GLenum $target, GLsizei $start, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyColorSubTable')) or return False;
	&glCopyColorSubTableEXT = nativecast(:(GLenum $target, GLsizei $start, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyColorSubTableEXT')) or return False;
	&glCopyColorTable = nativecast(:(GLenum $target, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyColorTable')) or return False;
	&glCopyColorTableSGI = nativecast(:(GLenum $target, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyColorTableSGI')) or return False;
	&glCopyConvolutionFilter1D = nativecast(:(GLenum $target, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyConvolutionFilter1D')) or return False;
	&glCopyConvolutionFilter1DEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyConvolutionFilter1DEXT')) or return False;
	&glCopyConvolutionFilter2D = nativecast(:(GLenum $target, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyConvolutionFilter2D')) or return False;
	&glCopyConvolutionFilter2DEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyConvolutionFilter2DEXT')) or return False;
	&glCopyImageSubData = nativecast(:(GLuint $srcName, GLenum $srcTarget, GLint $srcLevel, GLint $srcX, GLint $srcY, GLint $srcZ, GLuint $dstName, GLenum $dstTarget, GLint $dstLevel, GLint $dstX, GLint $dstY, GLint $dstZ, GLsizei $srcWidth, GLsizei $srcHeight, GLsizei $srcDepth), SDL_GL_GetProcAddress('glCopyImageSubData')) or return False;
	&glCopyImageSubDataEXT = nativecast(:(GLuint $srcName, GLenum $srcTarget, GLint $srcLevel, GLint $srcX, GLint $srcY, GLint $srcZ, GLuint $dstName, GLenum $dstTarget, GLint $dstLevel, GLint $dstX, GLint $dstY, GLint $dstZ, GLsizei $srcWidth, GLsizei $srcHeight, GLsizei $srcDepth), SDL_GL_GetProcAddress('glCopyImageSubDataEXT')) or return False;
	&glCopyImageSubDataNV = nativecast(:(GLuint $srcName, GLenum $srcTarget, GLint $srcLevel, GLint $srcX, GLint $srcY, GLint $srcZ, GLuint $dstName, GLenum $dstTarget, GLint $dstLevel, GLint $dstX, GLint $dstY, GLint $dstZ, GLsizei $width, GLsizei $height, GLsizei $depth), SDL_GL_GetProcAddress('glCopyImageSubDataNV')) or return False;
	&glCopyImageSubDataOES = nativecast(:(GLuint $srcName, GLenum $srcTarget, GLint $srcLevel, GLint $srcX, GLint $srcY, GLint $srcZ, GLuint $dstName, GLenum $dstTarget, GLint $dstLevel, GLint $dstX, GLint $dstY, GLint $dstZ, GLsizei $srcWidth, GLsizei $srcHeight, GLsizei $srcDepth), SDL_GL_GetProcAddress('glCopyImageSubDataOES')) or return False;
	&glCopyMultiTexImage1DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLint $border), SDL_GL_GetProcAddress('glCopyMultiTexImage1DEXT')) or return False;
	&glCopyMultiTexImage2DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLint $border), SDL_GL_GetProcAddress('glCopyMultiTexImage2DEXT')) or return False;
	&glCopyMultiTexSubImage1DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyMultiTexSubImage1DEXT')) or return False;
	&glCopyMultiTexSubImage2DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyMultiTexSubImage2DEXT')) or return False;
	&glCopyMultiTexSubImage3DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyMultiTexSubImage3DEXT')) or return False;
	&glCopyNamedBufferSubData = nativecast(:(GLuint $readBuffer, GLuint $writeBuffer, GLintptr $readOffset, GLintptr $writeOffset, GLsizeiptr $size), SDL_GL_GetProcAddress('glCopyNamedBufferSubData')) or return False;
	&glCopyPathNV = nativecast(:(GLuint $resultPath, GLuint $srcPath), SDL_GL_GetProcAddress('glCopyPathNV')) or return False;
	&glCopyPixels = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLenum $type), SDL_GL_GetProcAddress('glCopyPixels')) or return False;
	&glCopyTexImage1D = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLint $border), SDL_GL_GetProcAddress('glCopyTexImage1D')) or return False;
	&glCopyTexImage1DEXT = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLint $border), SDL_GL_GetProcAddress('glCopyTexImage1DEXT')) or return False;
	&glCopyTexImage2D = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLint $border), SDL_GL_GetProcAddress('glCopyTexImage2D')) or return False;
	&glCopyTexImage2DEXT = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLint $border), SDL_GL_GetProcAddress('glCopyTexImage2DEXT')) or return False;
	&glCopyTexSubImage1D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyTexSubImage1D')) or return False;
	&glCopyTexSubImage1DEXT = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyTexSubImage1DEXT')) or return False;
	&glCopyTexSubImage2D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTexSubImage2D')) or return False;
	&glCopyTexSubImage2DEXT = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTexSubImage2DEXT')) or return False;
	&glCopyTexSubImage3D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTexSubImage3D')) or return False;
	&glCopyTexSubImage3DEXT = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTexSubImage3DEXT')) or return False;
	&glCopyTexSubImage3DOES = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTexSubImage3DOES')) or return False;
	&glCopyTextureImage1DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLint $border), SDL_GL_GetProcAddress('glCopyTextureImage1DEXT')) or return False;
	&glCopyTextureImage2DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $internalformat, GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLint $border), SDL_GL_GetProcAddress('glCopyTextureImage2DEXT')) or return False;
	&glCopyTextureLevelsAPPLE = nativecast(:(GLuint $destinationTexture, GLuint $sourceTexture, GLint $sourceBaseLevel, GLsizei $sourceLevelCount), SDL_GL_GetProcAddress('glCopyTextureLevelsAPPLE')) or return False;
	&glCopyTextureSubImage1D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyTextureSubImage1D')) or return False;
	&glCopyTextureSubImage1DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLint $x, GLint $y, GLsizei $width), SDL_GL_GetProcAddress('glCopyTextureSubImage1DEXT')) or return False;
	&glCopyTextureSubImage2D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTextureSubImage2D')) or return False;
	&glCopyTextureSubImage2DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTextureSubImage2DEXT')) or return False;
	&glCopyTextureSubImage3D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTextureSubImage3D')) or return False;
	&glCopyTextureSubImage3DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glCopyTextureSubImage3DEXT')) or return False;
	&glCoverFillPathInstancedNV = nativecast(:(GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLenum $coverMode, GLenum $transformType, CArray[GLfloat] $transformValues), SDL_GL_GetProcAddress('glCoverFillPathInstancedNV')) or return False;
	&glCoverFillPathNV = nativecast(:(GLuint $path, GLenum $coverMode), SDL_GL_GetProcAddress('glCoverFillPathNV')) or return False;
	&glCoverStrokePathInstancedNV = nativecast(:(GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLenum $coverMode, GLenum $transformType, CArray[GLfloat] $transformValues), SDL_GL_GetProcAddress('glCoverStrokePathInstancedNV')) or return False;
	&glCoverStrokePathNV = nativecast(:(GLuint $path, GLenum $coverMode), SDL_GL_GetProcAddress('glCoverStrokePathNV')) or return False;
	&glCoverageMaskNV = nativecast(:(GLboolean $mask), SDL_GL_GetProcAddress('glCoverageMaskNV')) or return False;
	&glCoverageModulationNV = nativecast(:(GLenum $components), SDL_GL_GetProcAddress('glCoverageModulationNV')) or return False;
	&glCoverageModulationTableNV = nativecast(:(GLsizei $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glCoverageModulationTableNV')) or return False;
	&glCoverageOperationNV = nativecast(:(GLenum $operation), SDL_GL_GetProcAddress('glCoverageOperationNV')) or return False;
	&glCreateBuffers = nativecast(:(GLsizei $n, CArray[GLuint] $buffers), SDL_GL_GetProcAddress('glCreateBuffers')) or return False;
	&glCreateCommandListsNV = nativecast(:(GLsizei $n, CArray[GLuint] $lists), SDL_GL_GetProcAddress('glCreateCommandListsNV')) or return False;
	&glCreateFramebuffers = nativecast(:(GLsizei $n, CArray[GLuint] $framebuffers), SDL_GL_GetProcAddress('glCreateFramebuffers')) or return False;
	&glCreateMemoryObjectsEXT = nativecast(:(GLsizei $n, CArray[GLuint] $memoryObjects), SDL_GL_GetProcAddress('glCreateMemoryObjectsEXT')) or return False;
	&glCreatePerfQueryINTEL = nativecast(:(GLuint $queryId, CArray[GLuint] $queryHandle), SDL_GL_GetProcAddress('glCreatePerfQueryINTEL')) or return False;
	&glCreateProgram = nativecast(:( --> GLuint), SDL_GL_GetProcAddress('glCreateProgram')) or return False;
	&glCreateProgramObjectARB = nativecast(:( --> GLhandleARB), SDL_GL_GetProcAddress('glCreateProgramObjectARB')) or return False;
	&glCreateProgramPipelines = nativecast(:(GLsizei $n, CArray[GLuint] $pipelines), SDL_GL_GetProcAddress('glCreateProgramPipelines')) or return False;
	&glCreateProgressFenceNVX = nativecast(:( --> GLuint), SDL_GL_GetProcAddress('glCreateProgressFenceNVX')) or return False;
	&glCreateQueries = nativecast(:(GLenum $target, GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glCreateQueries')) or return False;
	&glCreateRenderbuffers = nativecast(:(GLsizei $n, CArray[GLuint] $renderbuffers), SDL_GL_GetProcAddress('glCreateRenderbuffers')) or return False;
	&glCreateSamplers = nativecast(:(GLsizei $n, CArray[GLuint] $samplers), SDL_GL_GetProcAddress('glCreateSamplers')) or return False;
	&glCreateSemaphoresNV = nativecast(:(GLsizei $n, CArray[GLuint] $semaphores), SDL_GL_GetProcAddress('glCreateSemaphoresNV')) or return False;
	&glCreateShader = nativecast(:(GLenum $type --> GLuint), SDL_GL_GetProcAddress('glCreateShader')) or return False;
	&glCreateShaderObjectARB = nativecast(:(GLenum $shaderType --> GLhandleARB), SDL_GL_GetProcAddress('glCreateShaderObjectARB')) or return False;
	&glCreateShaderProgramEXT = nativecast(:(GLenum $type, Str $string --> GLuint), SDL_GL_GetProcAddress('glCreateShaderProgramEXT')) or return False;
	&glCreateShaderProgramv = nativecast(:(GLenum $type, GLsizei $count, CArray[Str] $strings --> GLuint), SDL_GL_GetProcAddress('glCreateShaderProgramv')) or return False;
	&glCreateShaderProgramvEXT = nativecast(:(GLenum $type, GLsizei $count, CArray[Str] $strings --> GLuint), SDL_GL_GetProcAddress('glCreateShaderProgramvEXT')) or return False;
	&glCreateStatesNV = nativecast(:(GLsizei $n, CArray[GLuint] $states), SDL_GL_GetProcAddress('glCreateStatesNV')) or return False;
	&glCreateTextures = nativecast(:(GLenum $target, GLsizei $n, CArray[GLuint] $textures), SDL_GL_GetProcAddress('glCreateTextures')) or return False;
	&glCreateTransformFeedbacks = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glCreateTransformFeedbacks')) or return False;
	&glCreateVertexArrays = nativecast(:(GLsizei $n, CArray[GLuint] $arrays), SDL_GL_GetProcAddress('glCreateVertexArrays')) or return False;
	&glCullFace = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glCullFace')) or return False;
	&glCullParameterdvEXT = nativecast(:(GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glCullParameterdvEXT')) or return False;
	&glCullParameterfvEXT = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glCullParameterfvEXT')) or return False;
	&glCurrentPaletteMatrixARB = nativecast(:(GLint $index), SDL_GL_GetProcAddress('glCurrentPaletteMatrixARB')) or return False;
	&glCurrentPaletteMatrixOES = nativecast(:(GLuint $matrixpaletteindex), SDL_GL_GetProcAddress('glCurrentPaletteMatrixOES')) or return False;
	&glDebugMessageCallback = nativecast(:(Pointer $userParam), SDL_GL_GetProcAddress('glDebugMessageCallback')) or return False;
	&glDebugMessageCallbackAMD = nativecast(:(Pointer $userParam), SDL_GL_GetProcAddress('glDebugMessageCallbackAMD')) or return False;
	&glDebugMessageCallbackARB = nativecast(:(Pointer $userParam), SDL_GL_GetProcAddress('glDebugMessageCallbackARB')) or return False;
	&glDebugMessageCallbackKHR = nativecast(:(Pointer $userParam), SDL_GL_GetProcAddress('glDebugMessageCallbackKHR')) or return False;
	&glDebugMessageControl = nativecast(:(GLenum $source, GLenum $type, GLenum $severity, GLsizei $count, CArray[GLuint] $ids, GLboolean $enabled), SDL_GL_GetProcAddress('glDebugMessageControl')) or return False;
	&glDebugMessageControlARB = nativecast(:(GLenum $source, GLenum $type, GLenum $severity, GLsizei $count, CArray[GLuint] $ids, GLboolean $enabled), SDL_GL_GetProcAddress('glDebugMessageControlARB')) or return False;
	&glDebugMessageControlKHR = nativecast(:(GLenum $source, GLenum $type, GLenum $severity, GLsizei $count, CArray[GLuint] $ids, GLboolean $enabled), SDL_GL_GetProcAddress('glDebugMessageControlKHR')) or return False;
	&glDebugMessageEnableAMD = nativecast(:(GLenum $category, GLenum $severity, GLsizei $count, CArray[GLuint] $ids, GLboolean $enabled), SDL_GL_GetProcAddress('glDebugMessageEnableAMD')) or return False;
	&glDebugMessageInsert = nativecast(:(GLenum $source, GLenum $type, GLuint $id, GLenum $severity, GLsizei $length, Str $buf), SDL_GL_GetProcAddress('glDebugMessageInsert')) or return False;
	&glDebugMessageInsertAMD = nativecast(:(GLenum $category, GLenum $severity, GLuint $id, GLsizei $length, Str $buf), SDL_GL_GetProcAddress('glDebugMessageInsertAMD')) or return False;
	&glDebugMessageInsertARB = nativecast(:(GLenum $source, GLenum $type, GLuint $id, GLenum $severity, GLsizei $length, Str $buf), SDL_GL_GetProcAddress('glDebugMessageInsertARB')) or return False;
	&glDebugMessageInsertKHR = nativecast(:(GLenum $source, GLenum $type, GLuint $id, GLenum $severity, GLsizei $length, Str $buf), SDL_GL_GetProcAddress('glDebugMessageInsertKHR')) or return False;
	&glDeformSGIX = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glDeformSGIX')) or return False;
	&glDeformationMap3dSGIX = nativecast(:(GLenum $target, GLdouble $u1, GLdouble $u2, GLint $ustride, GLint $uorder, GLdouble $v1, GLdouble $v2, GLint $vstride, GLint $vorder, GLdouble $w1, GLdouble $w2, GLint $wstride, GLint $worder, CArray[GLdouble] $points), SDL_GL_GetProcAddress('glDeformationMap3dSGIX')) or return False;
	&glDeformationMap3fSGIX = nativecast(:(GLenum $target, GLfloat $u1, GLfloat $u2, GLint $ustride, GLint $uorder, GLfloat $v1, GLfloat $v2, GLint $vstride, GLint $vorder, GLfloat $w1, GLfloat $w2, GLint $wstride, GLint $worder, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glDeformationMap3fSGIX')) or return False;
	&glDeleteAsyncMarkersSGIX = nativecast(:(GLuint $marker, GLsizei $range), SDL_GL_GetProcAddress('glDeleteAsyncMarkersSGIX')) or return False;
	&glDeleteBuffers = nativecast(:(GLsizei $n, CArray[GLuint] $buffers), SDL_GL_GetProcAddress('glDeleteBuffers')) or return False;
	&glDeleteBuffersARB = nativecast(:(GLsizei $n, CArray[GLuint] $buffers), SDL_GL_GetProcAddress('glDeleteBuffersARB')) or return False;
	&glDeleteCommandListsNV = nativecast(:(GLsizei $n, CArray[GLuint] $lists), SDL_GL_GetProcAddress('glDeleteCommandListsNV')) or return False;
	&glDeleteFencesAPPLE = nativecast(:(GLsizei $n, CArray[GLuint] $fences), SDL_GL_GetProcAddress('glDeleteFencesAPPLE')) or return False;
	&glDeleteFencesNV = nativecast(:(GLsizei $n, CArray[GLuint] $fences), SDL_GL_GetProcAddress('glDeleteFencesNV')) or return False;
	&glDeleteFragmentShaderATI = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glDeleteFragmentShaderATI')) or return False;
	&glDeleteFramebuffers = nativecast(:(GLsizei $n, CArray[GLuint] $framebuffers), SDL_GL_GetProcAddress('glDeleteFramebuffers')) or return False;
	&glDeleteFramebuffersEXT = nativecast(:(GLsizei $n, CArray[GLuint] $framebuffers), SDL_GL_GetProcAddress('glDeleteFramebuffersEXT')) or return False;
	&glDeleteFramebuffersOES = nativecast(:(GLsizei $n, CArray[GLuint] $framebuffers), SDL_GL_GetProcAddress('glDeleteFramebuffersOES')) or return False;
	&glDeleteLists = nativecast(:(GLuint $list, GLsizei $range), SDL_GL_GetProcAddress('glDeleteLists')) or return False;
	&glDeleteMemoryObjectsEXT = nativecast(:(GLsizei $n, CArray[GLuint] $memoryObjects), SDL_GL_GetProcAddress('glDeleteMemoryObjectsEXT')) or return False;
	&glDeleteNamedStringARB = nativecast(:(GLint $namelen, Str $name), SDL_GL_GetProcAddress('glDeleteNamedStringARB')) or return False;
	&glDeleteNamesAMD = nativecast(:(GLenum $identifier, GLuint $num, CArray[GLuint] $names), SDL_GL_GetProcAddress('glDeleteNamesAMD')) or return False;
	&glDeleteObjectARB = nativecast(:(GLhandleARB $obj), SDL_GL_GetProcAddress('glDeleteObjectARB')) or return False;
	&glDeleteOcclusionQueriesNV = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glDeleteOcclusionQueriesNV')) or return False;
	&glDeletePathsNV = nativecast(:(GLuint $path, GLsizei $range), SDL_GL_GetProcAddress('glDeletePathsNV')) or return False;
	&glDeletePerfMonitorsAMD = nativecast(:(GLsizei $n, CArray[GLuint] $monitors), SDL_GL_GetProcAddress('glDeletePerfMonitorsAMD')) or return False;
	&glDeletePerfQueryINTEL = nativecast(:(GLuint $queryHandle), SDL_GL_GetProcAddress('glDeletePerfQueryINTEL')) or return False;
	&glDeleteProgram = nativecast(:(GLuint $program), SDL_GL_GetProcAddress('glDeleteProgram')) or return False;
	&glDeleteProgramPipelines = nativecast(:(GLsizei $n, CArray[GLuint] $pipelines), SDL_GL_GetProcAddress('glDeleteProgramPipelines')) or return False;
	&glDeleteProgramPipelinesEXT = nativecast(:(GLsizei $n, CArray[GLuint] $pipelines), SDL_GL_GetProcAddress('glDeleteProgramPipelinesEXT')) or return False;
	&glDeleteProgramsARB = nativecast(:(GLsizei $n, CArray[GLuint] $programs), SDL_GL_GetProcAddress('glDeleteProgramsARB')) or return False;
	&glDeleteProgramsNV = nativecast(:(GLsizei $n, CArray[GLuint] $programs), SDL_GL_GetProcAddress('glDeleteProgramsNV')) or return False;
	&glDeleteQueries = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glDeleteQueries')) or return False;
	&glDeleteQueriesARB = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glDeleteQueriesARB')) or return False;
	&glDeleteQueriesEXT = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glDeleteQueriesEXT')) or return False;
	&glDeleteQueryResourceTagNV = nativecast(:(GLsizei $n, CArray[GLint] $tagIds), SDL_GL_GetProcAddress('glDeleteQueryResourceTagNV')) or return False;
	&glDeleteRenderbuffers = nativecast(:(GLsizei $n, CArray[GLuint] $renderbuffers), SDL_GL_GetProcAddress('glDeleteRenderbuffers')) or return False;
	&glDeleteRenderbuffersEXT = nativecast(:(GLsizei $n, CArray[GLuint] $renderbuffers), SDL_GL_GetProcAddress('glDeleteRenderbuffersEXT')) or return False;
	&glDeleteRenderbuffersOES = nativecast(:(GLsizei $n, CArray[GLuint] $renderbuffers), SDL_GL_GetProcAddress('glDeleteRenderbuffersOES')) or return False;
	&glDeleteSamplers = nativecast(:(GLsizei $count, CArray[GLuint] $samplers), SDL_GL_GetProcAddress('glDeleteSamplers')) or return False;
	&glDeleteSemaphoresEXT = nativecast(:(GLsizei $n, CArray[GLuint] $semaphores), SDL_GL_GetProcAddress('glDeleteSemaphoresEXT')) or return False;
	&glDeleteShader = nativecast(:(GLuint $shader), SDL_GL_GetProcAddress('glDeleteShader')) or return False;
	&glDeleteStatesNV = nativecast(:(GLsizei $n, CArray[GLuint] $states), SDL_GL_GetProcAddress('glDeleteStatesNV')) or return False;
	&glDeleteSync = nativecast(:(GLsync $sync), SDL_GL_GetProcAddress('glDeleteSync')) or return False;
	&glDeleteSyncAPPLE = nativecast(:(GLsync $sync), SDL_GL_GetProcAddress('glDeleteSyncAPPLE')) or return False;
	&glDeleteTextures = nativecast(:(GLsizei $n, CArray[GLuint] $textures), SDL_GL_GetProcAddress('glDeleteTextures')) or return False;
	&glDeleteTexturesEXT = nativecast(:(GLsizei $n, CArray[GLuint] $textures), SDL_GL_GetProcAddress('glDeleteTexturesEXT')) or return False;
	&glDeleteTransformFeedbacks = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glDeleteTransformFeedbacks')) or return False;
	&glDeleteTransformFeedbacksNV = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glDeleteTransformFeedbacksNV')) or return False;
	&glDeleteVertexArrays = nativecast(:(GLsizei $n, CArray[GLuint] $arrays), SDL_GL_GetProcAddress('glDeleteVertexArrays')) or return False;
	&glDeleteVertexArraysAPPLE = nativecast(:(GLsizei $n, CArray[GLuint] $arrays), SDL_GL_GetProcAddress('glDeleteVertexArraysAPPLE')) or return False;
	&glDeleteVertexArraysOES = nativecast(:(GLsizei $n, CArray[GLuint] $arrays), SDL_GL_GetProcAddress('glDeleteVertexArraysOES')) or return False;
	&glDeleteVertexShaderEXT = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glDeleteVertexShaderEXT')) or return False;
	&glDepthBoundsEXT = nativecast(:(GLclampd $zmin, GLclampd $zmax), SDL_GL_GetProcAddress('glDepthBoundsEXT')) or return False;
	&glDepthBoundsdNV = nativecast(:(GLdouble $zmin, GLdouble $zmax), SDL_GL_GetProcAddress('glDepthBoundsdNV')) or return False;
	&glDepthFunc = nativecast(:(GLenum $func), SDL_GL_GetProcAddress('glDepthFunc')) or return False;
	&glDepthMask = nativecast(:(GLboolean $flag), SDL_GL_GetProcAddress('glDepthMask')) or return False;
	&glDepthRange = nativecast(:(GLdouble $n, GLdouble $f), SDL_GL_GetProcAddress('glDepthRange')) or return False;
	&glDepthRangeArraydvNV = nativecast(:(GLuint $first, GLsizei $count, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glDepthRangeArraydvNV')) or return False;
	&glDepthRangeArrayfvNV = nativecast(:(GLuint $first, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glDepthRangeArrayfvNV')) or return False;
	&glDepthRangeArrayfvOES = nativecast(:(GLuint $first, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glDepthRangeArrayfvOES')) or return False;
	&glDepthRangeArrayv = nativecast(:(GLuint $first, GLsizei $count, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glDepthRangeArrayv')) or return False;
	&glDepthRangeIndexed = nativecast(:(GLuint $index, GLdouble $n, GLdouble $f), SDL_GL_GetProcAddress('glDepthRangeIndexed')) or return False;
	&glDepthRangeIndexeddNV = nativecast(:(GLuint $index, GLdouble $n, GLdouble $f), SDL_GL_GetProcAddress('glDepthRangeIndexeddNV')) or return False;
	&glDepthRangeIndexedfNV = nativecast(:(GLuint $index, GLfloat $n, GLfloat $f), SDL_GL_GetProcAddress('glDepthRangeIndexedfNV')) or return False;
	&glDepthRangeIndexedfOES = nativecast(:(GLuint $index, GLfloat $n, GLfloat $f), SDL_GL_GetProcAddress('glDepthRangeIndexedfOES')) or return False;
	&glDepthRangedNV = nativecast(:(GLdouble $zNear, GLdouble $zFar), SDL_GL_GetProcAddress('glDepthRangedNV')) or return False;
	&glDepthRangef = nativecast(:(GLfloat $n, GLfloat $f), SDL_GL_GetProcAddress('glDepthRangef')) or return False;
	&glDepthRangefOES = nativecast(:(GLclampf $n, GLclampf $f), SDL_GL_GetProcAddress('glDepthRangefOES')) or return False;
	&glDepthRangex = nativecast(:(GLfixed $n, GLfixed $f), SDL_GL_GetProcAddress('glDepthRangex')) or return False;
	&glDepthRangexOES = nativecast(:(GLfixed $n, GLfixed $f), SDL_GL_GetProcAddress('glDepthRangexOES')) or return False;
	&glDetachObjectARB = nativecast(:(GLhandleARB $containerObj, GLhandleARB $attachedObj), SDL_GL_GetProcAddress('glDetachObjectARB')) or return False;
	&glDetachShader = nativecast(:(GLuint $program, GLuint $shader), SDL_GL_GetProcAddress('glDetachShader')) or return False;
	&glDetailTexFuncSGIS = nativecast(:(GLenum $target, GLsizei $n, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glDetailTexFuncSGIS')) or return False;
	&glDisable = nativecast(:(GLenum $cap), SDL_GL_GetProcAddress('glDisable')) or return False;
	&glDisableClientState = nativecast(:(GLenum $array), SDL_GL_GetProcAddress('glDisableClientState')) or return False;
	&glDisableClientStateIndexedEXT = nativecast(:(GLenum $array, GLuint $index), SDL_GL_GetProcAddress('glDisableClientStateIndexedEXT')) or return False;
	&glDisableClientStateiEXT = nativecast(:(GLenum $array, GLuint $index), SDL_GL_GetProcAddress('glDisableClientStateiEXT')) or return False;
	&glDisableDriverControlQCOM = nativecast(:(GLuint $driverControl), SDL_GL_GetProcAddress('glDisableDriverControlQCOM')) or return False;
	&glDisableIndexedEXT = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glDisableIndexedEXT')) or return False;
	&glDisableVariantClientStateEXT = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glDisableVariantClientStateEXT')) or return False;
	&glDisableVertexArrayAttrib = nativecast(:(GLuint $vaobj, GLuint $index), SDL_GL_GetProcAddress('glDisableVertexArrayAttrib')) or return False;
	&glDisableVertexArrayAttribEXT = nativecast(:(GLuint $vaobj, GLuint $index), SDL_GL_GetProcAddress('glDisableVertexArrayAttribEXT')) or return False;
	&glDisableVertexArrayEXT = nativecast(:(GLuint $vaobj, GLenum $array), SDL_GL_GetProcAddress('glDisableVertexArrayEXT')) or return False;
	&glDisableVertexAttribAPPLE = nativecast(:(GLuint $index, GLenum $pname), SDL_GL_GetProcAddress('glDisableVertexAttribAPPLE')) or return False;
	&glDisableVertexAttribArray = nativecast(:(GLuint $index), SDL_GL_GetProcAddress('glDisableVertexAttribArray')) or return False;
	&glDisableVertexAttribArrayARB = nativecast(:(GLuint $index), SDL_GL_GetProcAddress('glDisableVertexAttribArrayARB')) or return False;
	&glDisablei = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glDisablei')) or return False;
	&glDisableiEXT = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glDisableiEXT')) or return False;
	&glDisableiNV = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glDisableiNV')) or return False;
	&glDisableiOES = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glDisableiOES')) or return False;
	&glDiscardFramebufferEXT = nativecast(:(GLenum $target, GLsizei $numAttachments, CArray[GLenum] $attachments), SDL_GL_GetProcAddress('glDiscardFramebufferEXT')) or return False;
	&glDispatchCompute = nativecast(:(GLuint $num_groups_x, GLuint $num_groups_y, GLuint $num_groups_z), SDL_GL_GetProcAddress('glDispatchCompute')) or return False;
	&glDispatchComputeGroupSizeARB = nativecast(:(GLuint $num_groups_x, GLuint $num_groups_y, GLuint $num_groups_z, GLuint $group_size_x, GLuint $group_size_y, GLuint $group_size_z), SDL_GL_GetProcAddress('glDispatchComputeGroupSizeARB')) or return False;
	&glDispatchComputeIndirect = nativecast(:(GLintptr $indirect), SDL_GL_GetProcAddress('glDispatchComputeIndirect')) or return False;
	&glDrawArrays = nativecast(:(GLenum $mode, GLint $first, GLsizei $count), SDL_GL_GetProcAddress('glDrawArrays')) or return False;
	&glDrawArraysEXT = nativecast(:(GLenum $mode, GLint $first, GLsizei $count), SDL_GL_GetProcAddress('glDrawArraysEXT')) or return False;
	&glDrawArraysIndirect = nativecast(:(GLenum $mode, Pointer $indirect), SDL_GL_GetProcAddress('glDrawArraysIndirect')) or return False;
	&glDrawArraysInstanced = nativecast(:(GLenum $mode, GLint $first, GLsizei $count, GLsizei $instancecount), SDL_GL_GetProcAddress('glDrawArraysInstanced')) or return False;
	&glDrawArraysInstancedANGLE = nativecast(:(GLenum $mode, GLint $first, GLsizei $count, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawArraysInstancedANGLE')) or return False;
	&glDrawArraysInstancedARB = nativecast(:(GLenum $mode, GLint $first, GLsizei $count, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawArraysInstancedARB')) or return False;
	&glDrawArraysInstancedBaseInstance = nativecast(:(GLenum $mode, GLint $first, GLsizei $count, GLsizei $instancecount, GLuint $baseinstance), SDL_GL_GetProcAddress('glDrawArraysInstancedBaseInstance')) or return False;
	&glDrawArraysInstancedBaseInstanceEXT = nativecast(:(GLenum $mode, GLint $first, GLsizei $count, GLsizei $instancecount, GLuint $baseinstance), SDL_GL_GetProcAddress('glDrawArraysInstancedBaseInstanceEXT')) or return False;
	&glDrawArraysInstancedEXT = nativecast(:(GLenum $mode, GLint $start, GLsizei $count, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawArraysInstancedEXT')) or return False;
	&glDrawArraysInstancedNV = nativecast(:(GLenum $mode, GLint $first, GLsizei $count, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawArraysInstancedNV')) or return False;
	&glDrawBuffer = nativecast(:(GLenum $buf), SDL_GL_GetProcAddress('glDrawBuffer')) or return False;
	&glDrawBuffers = nativecast(:(GLsizei $n, CArray[GLenum] $bufs), SDL_GL_GetProcAddress('glDrawBuffers')) or return False;
	&glDrawBuffersARB = nativecast(:(GLsizei $n, CArray[GLenum] $bufs), SDL_GL_GetProcAddress('glDrawBuffersARB')) or return False;
	&glDrawBuffersATI = nativecast(:(GLsizei $n, CArray[GLenum] $bufs), SDL_GL_GetProcAddress('glDrawBuffersATI')) or return False;
	&glDrawBuffersEXT = nativecast(:(GLsizei $n, CArray[GLenum] $bufs), SDL_GL_GetProcAddress('glDrawBuffersEXT')) or return False;
	&glDrawBuffersIndexedEXT = nativecast(:(GLint $n, CArray[GLenum] $location, CArray[GLint] $indices), SDL_GL_GetProcAddress('glDrawBuffersIndexedEXT')) or return False;
	&glDrawBuffersNV = nativecast(:(GLsizei $n, CArray[GLenum] $bufs), SDL_GL_GetProcAddress('glDrawBuffersNV')) or return False;
	&glDrawCommandsAddressNV = nativecast(:(GLenum $primitiveMode, CArray[GLuint64] $indirects, CArray[GLsizei] $sizes, GLuint $count), SDL_GL_GetProcAddress('glDrawCommandsAddressNV')) or return False;
	&glDrawCommandsNV = nativecast(:(GLenum $primitiveMode, GLuint $buffer, CArray[GLintptr] $indirects, CArray[GLsizei] $sizes, GLuint $count), SDL_GL_GetProcAddress('glDrawCommandsNV')) or return False;
	&glDrawCommandsStatesAddressNV = nativecast(:(CArray[GLuint64] $indirects, CArray[GLsizei] $sizes, CArray[GLuint] $states, CArray[GLuint] $fbos, GLuint $count), SDL_GL_GetProcAddress('glDrawCommandsStatesAddressNV')) or return False;
	&glDrawCommandsStatesNV = nativecast(:(GLuint $buffer, CArray[GLintptr] $indirects, CArray[GLsizei] $sizes, CArray[GLuint] $states, CArray[GLuint] $fbos, GLuint $count), SDL_GL_GetProcAddress('glDrawCommandsStatesNV')) or return False;
	&glDrawElementArrayAPPLE = nativecast(:(GLenum $mode, GLint $first, GLsizei $count), SDL_GL_GetProcAddress('glDrawElementArrayAPPLE')) or return False;
	&glDrawElementArrayATI = nativecast(:(GLenum $mode, GLsizei $count), SDL_GL_GetProcAddress('glDrawElementArrayATI')) or return False;
	&glDrawElements = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices), SDL_GL_GetProcAddress('glDrawElements')) or return False;
	&glDrawElementsBaseVertex = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLint $basevertex), SDL_GL_GetProcAddress('glDrawElementsBaseVertex')) or return False;
	&glDrawElementsBaseVertexEXT = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLint $basevertex), SDL_GL_GetProcAddress('glDrawElementsBaseVertexEXT')) or return False;
	&glDrawElementsBaseVertexOES = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLint $basevertex), SDL_GL_GetProcAddress('glDrawElementsBaseVertexOES')) or return False;
	&glDrawElementsIndirect = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect), SDL_GL_GetProcAddress('glDrawElementsIndirect')) or return False;
	&glDrawElementsInstanced = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount), SDL_GL_GetProcAddress('glDrawElementsInstanced')) or return False;
	&glDrawElementsInstancedANGLE = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawElementsInstancedANGLE')) or return False;
	&glDrawElementsInstancedARB = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawElementsInstancedARB')) or return False;
	&glDrawElementsInstancedBaseInstance = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount, GLuint $baseinstance), SDL_GL_GetProcAddress('glDrawElementsInstancedBaseInstance')) or return False;
	&glDrawElementsInstancedBaseInstanceEXT = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount, GLuint $baseinstance), SDL_GL_GetProcAddress('glDrawElementsInstancedBaseInstanceEXT')) or return False;
	&glDrawElementsInstancedBaseVertex = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount, GLint $basevertex), SDL_GL_GetProcAddress('glDrawElementsInstancedBaseVertex')) or return False;
	&glDrawElementsInstancedBaseVertexBaseInstance = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount, GLint $basevertex, GLuint $baseinstance), SDL_GL_GetProcAddress('glDrawElementsInstancedBaseVertexBaseInstance')) or return False;
	&glDrawElementsInstancedBaseVertexBaseInstanceEXT = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount, GLint $basevertex, GLuint $baseinstance), SDL_GL_GetProcAddress('glDrawElementsInstancedBaseVertexBaseInstanceEXT')) or return False;
	&glDrawElementsInstancedBaseVertexEXT = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount, GLint $basevertex), SDL_GL_GetProcAddress('glDrawElementsInstancedBaseVertexEXT')) or return False;
	&glDrawElementsInstancedBaseVertexOES = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $instancecount, GLint $basevertex), SDL_GL_GetProcAddress('glDrawElementsInstancedBaseVertexOES')) or return False;
	&glDrawElementsInstancedEXT = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawElementsInstancedEXT')) or return False;
	&glDrawElementsInstancedNV = nativecast(:(GLenum $mode, GLsizei $count, GLenum $type, Pointer $indices, GLsizei $primcount), SDL_GL_GetProcAddress('glDrawElementsInstancedNV')) or return False;
	&glDrawMeshArraysSUN = nativecast(:(GLenum $mode, GLint $first, GLsizei $count, GLsizei $width), SDL_GL_GetProcAddress('glDrawMeshArraysSUN')) or return False;
	&glDrawMeshTasksNV = nativecast(:(GLuint $first, GLuint $count), SDL_GL_GetProcAddress('glDrawMeshTasksNV')) or return False;
	&glDrawMeshTasksIndirectNV = nativecast(:(GLintptr $indirect), SDL_GL_GetProcAddress('glDrawMeshTasksIndirectNV')) or return False;
	&glDrawPixels = nativecast(:(GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glDrawPixels')) or return False;
	&glDrawRangeElementArrayAPPLE = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, GLint $first, GLsizei $count), SDL_GL_GetProcAddress('glDrawRangeElementArrayAPPLE')) or return False;
	&glDrawRangeElementArrayATI = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, GLsizei $count), SDL_GL_GetProcAddress('glDrawRangeElementArrayATI')) or return False;
	&glDrawRangeElements = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, GLsizei $count, GLenum $type, Pointer $indices), SDL_GL_GetProcAddress('glDrawRangeElements')) or return False;
	&glDrawRangeElementsBaseVertex = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, GLsizei $count, GLenum $type, Pointer $indices, GLint $basevertex), SDL_GL_GetProcAddress('glDrawRangeElementsBaseVertex')) or return False;
	&glDrawRangeElementsBaseVertexEXT = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, GLsizei $count, GLenum $type, Pointer $indices, GLint $basevertex), SDL_GL_GetProcAddress('glDrawRangeElementsBaseVertexEXT')) or return False;
	&glDrawRangeElementsBaseVertexOES = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, GLsizei $count, GLenum $type, Pointer $indices, GLint $basevertex), SDL_GL_GetProcAddress('glDrawRangeElementsBaseVertexOES')) or return False;
	&glDrawRangeElementsEXT = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, GLsizei $count, GLenum $type, Pointer $indices), SDL_GL_GetProcAddress('glDrawRangeElementsEXT')) or return False;
	&glDrawTexfOES = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $width, GLfloat $height), SDL_GL_GetProcAddress('glDrawTexfOES')) or return False;
	&glDrawTexfvOES = nativecast(:(CArray[GLfloat] $coords), SDL_GL_GetProcAddress('glDrawTexfvOES')) or return False;
	&glDrawTexiOES = nativecast(:(GLint $x, GLint $y, GLint $z, GLint $width, GLint $height), SDL_GL_GetProcAddress('glDrawTexiOES')) or return False;
	&glDrawTexivOES = nativecast(:(CArray[GLint] $coords), SDL_GL_GetProcAddress('glDrawTexivOES')) or return False;
	&glDrawTexsOES = nativecast(:(GLshort $x, GLshort $y, GLshort $z, GLshort $width, GLshort $height), SDL_GL_GetProcAddress('glDrawTexsOES')) or return False;
	&glDrawTexsvOES = nativecast(:(CArray[GLshort] $coords), SDL_GL_GetProcAddress('glDrawTexsvOES')) or return False;
	&glDrawTextureNV = nativecast(:(GLuint $texture, GLuint $sampler, GLfloat $x0, GLfloat $y0, GLfloat $x1, GLfloat $y1, GLfloat $z, GLfloat $s0, GLfloat $t0, GLfloat $s1, GLfloat $t1), SDL_GL_GetProcAddress('glDrawTextureNV')) or return False;
	&glDrawTexxOES = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z, GLfixed $width, GLfixed $height), SDL_GL_GetProcAddress('glDrawTexxOES')) or return False;
	&glDrawTexxvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glDrawTexxvOES')) or return False;
	&glDrawTransformFeedback = nativecast(:(GLenum $mode, GLuint $id), SDL_GL_GetProcAddress('glDrawTransformFeedback')) or return False;
	&glDrawTransformFeedbackEXT = nativecast(:(GLenum $mode, GLuint $id), SDL_GL_GetProcAddress('glDrawTransformFeedbackEXT')) or return False;
	&glDrawTransformFeedbackInstanced = nativecast(:(GLenum $mode, GLuint $id, GLsizei $instancecount), SDL_GL_GetProcAddress('glDrawTransformFeedbackInstanced')) or return False;
	&glDrawTransformFeedbackInstancedEXT = nativecast(:(GLenum $mode, GLuint $id, GLsizei $instancecount), SDL_GL_GetProcAddress('glDrawTransformFeedbackInstancedEXT')) or return False;
	&glDrawTransformFeedbackNV = nativecast(:(GLenum $mode, GLuint $id), SDL_GL_GetProcAddress('glDrawTransformFeedbackNV')) or return False;
	&glDrawTransformFeedbackStream = nativecast(:(GLenum $mode, GLuint $id, GLuint $stream), SDL_GL_GetProcAddress('glDrawTransformFeedbackStream')) or return False;
	&glDrawTransformFeedbackStreamInstanced = nativecast(:(GLenum $mode, GLuint $id, GLuint $stream, GLsizei $instancecount), SDL_GL_GetProcAddress('glDrawTransformFeedbackStreamInstanced')) or return False;
	&glEGLImageTargetRenderbufferStorageOES = nativecast(:(GLenum $target, GLeglImageOES $image), SDL_GL_GetProcAddress('glEGLImageTargetRenderbufferStorageOES')) or return False;
	&glEGLImageTargetTexStorageEXT = nativecast(:(GLenum $target, GLeglImageOES $image, CArray[GLint] $attrib_list), SDL_GL_GetProcAddress('glEGLImageTargetTexStorageEXT')) or return False;
	&glEGLImageTargetTexture2DOES = nativecast(:(GLenum $target, GLeglImageOES $image), SDL_GL_GetProcAddress('glEGLImageTargetTexture2DOES')) or return False;
	&glEGLImageTargetTextureStorageEXT = nativecast(:(GLuint $texture, GLeglImageOES $image, CArray[GLint] $attrib_list), SDL_GL_GetProcAddress('glEGLImageTargetTextureStorageEXT')) or return False;
	&glEdgeFlag = nativecast(:(GLboolean $flag), SDL_GL_GetProcAddress('glEdgeFlag')) or return False;
	&glEdgeFlagFormatNV = nativecast(:(GLsizei $stride), SDL_GL_GetProcAddress('glEdgeFlagFormatNV')) or return False;
	&glEdgeFlagPointer = nativecast(:(GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glEdgeFlagPointer')) or return False;
	&glEdgeFlagPointerEXT = nativecast(:(GLsizei $stride, GLsizei $count, CArray[GLboolean] $pointer), SDL_GL_GetProcAddress('glEdgeFlagPointerEXT')) or return False;
	&glEdgeFlagPointerListIBM = nativecast(:(GLint $stride, CArray[CArray[GLboolean]] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glEdgeFlagPointerListIBM')) or return False;
	&glEdgeFlagv = nativecast(:(CArray[GLboolean] $flag), SDL_GL_GetProcAddress('glEdgeFlagv')) or return False;
	&glElementPointerAPPLE = nativecast(:(GLenum $type, Pointer $pointer), SDL_GL_GetProcAddress('glElementPointerAPPLE')) or return False;
	&glElementPointerATI = nativecast(:(GLenum $type, Pointer $pointer), SDL_GL_GetProcAddress('glElementPointerATI')) or return False;
	&glEnable = nativecast(:(GLenum $cap), SDL_GL_GetProcAddress('glEnable')) or return False;
	&glEnableClientState = nativecast(:(GLenum $array), SDL_GL_GetProcAddress('glEnableClientState')) or return False;
	&glEnableClientStateIndexedEXT = nativecast(:(GLenum $array, GLuint $index), SDL_GL_GetProcAddress('glEnableClientStateIndexedEXT')) or return False;
	&glEnableClientStateiEXT = nativecast(:(GLenum $array, GLuint $index), SDL_GL_GetProcAddress('glEnableClientStateiEXT')) or return False;
	&glEnableDriverControlQCOM = nativecast(:(GLuint $driverControl), SDL_GL_GetProcAddress('glEnableDriverControlQCOM')) or return False;
	&glEnableIndexedEXT = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glEnableIndexedEXT')) or return False;
	&glEnableVariantClientStateEXT = nativecast(:(GLuint $id), SDL_GL_GetProcAddress('glEnableVariantClientStateEXT')) or return False;
	&glEnableVertexArrayAttrib = nativecast(:(GLuint $vaobj, GLuint $index), SDL_GL_GetProcAddress('glEnableVertexArrayAttrib')) or return False;
	&glEnableVertexArrayAttribEXT = nativecast(:(GLuint $vaobj, GLuint $index), SDL_GL_GetProcAddress('glEnableVertexArrayAttribEXT')) or return False;
	&glEnableVertexArrayEXT = nativecast(:(GLuint $vaobj, GLenum $array), SDL_GL_GetProcAddress('glEnableVertexArrayEXT')) or return False;
	&glEnableVertexAttribAPPLE = nativecast(:(GLuint $index, GLenum $pname), SDL_GL_GetProcAddress('glEnableVertexAttribAPPLE')) or return False;
	&glEnableVertexAttribArray = nativecast(:(GLuint $index), SDL_GL_GetProcAddress('glEnableVertexAttribArray')) or return False;
	&glEnableVertexAttribArrayARB = nativecast(:(GLuint $index), SDL_GL_GetProcAddress('glEnableVertexAttribArrayARB')) or return False;
	&glEnablei = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glEnablei')) or return False;
	&glEnableiEXT = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glEnableiEXT')) or return False;
	&glEnableiNV = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glEnableiNV')) or return False;
	&glEnableiOES = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glEnableiOES')) or return False;
	&glEnd = nativecast(:(), SDL_GL_GetProcAddress('glEnd')) or return False;
	&glEndConditionalRender = nativecast(:(), SDL_GL_GetProcAddress('glEndConditionalRender')) or return False;
	&glEndConditionalRenderNV = nativecast(:(), SDL_GL_GetProcAddress('glEndConditionalRenderNV')) or return False;
	&glEndConditionalRenderNVX = nativecast(:(), SDL_GL_GetProcAddress('glEndConditionalRenderNVX')) or return False;
	&glEndFragmentShaderATI = nativecast(:(), SDL_GL_GetProcAddress('glEndFragmentShaderATI')) or return False;
	&glEndList = nativecast(:(), SDL_GL_GetProcAddress('glEndList')) or return False;
	&glEndOcclusionQueryNV = nativecast(:(), SDL_GL_GetProcAddress('glEndOcclusionQueryNV')) or return False;
	&glEndPerfMonitorAMD = nativecast(:(GLuint $monitor), SDL_GL_GetProcAddress('glEndPerfMonitorAMD')) or return False;
	&glEndPerfQueryINTEL = nativecast(:(GLuint $queryHandle), SDL_GL_GetProcAddress('glEndPerfQueryINTEL')) or return False;
	&glEndQuery = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glEndQuery')) or return False;
	&glEndQueryARB = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glEndQueryARB')) or return False;
	&glEndQueryEXT = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glEndQueryEXT')) or return False;
	&glEndQueryIndexed = nativecast(:(GLenum $target, GLuint $index), SDL_GL_GetProcAddress('glEndQueryIndexed')) or return False;
	&glEndTilingQCOM = nativecast(:(GLbitfield $preserveMask), SDL_GL_GetProcAddress('glEndTilingQCOM')) or return False;
	&glEndTransformFeedback = nativecast(:(), SDL_GL_GetProcAddress('glEndTransformFeedback')) or return False;
	&glEndTransformFeedbackEXT = nativecast(:(), SDL_GL_GetProcAddress('glEndTransformFeedbackEXT')) or return False;
	&glEndTransformFeedbackNV = nativecast(:(), SDL_GL_GetProcAddress('glEndTransformFeedbackNV')) or return False;
	&glEndVertexShaderEXT = nativecast(:(), SDL_GL_GetProcAddress('glEndVertexShaderEXT')) or return False;
	&glEndVideoCaptureNV = nativecast(:(GLuint $video_capture_slot), SDL_GL_GetProcAddress('glEndVideoCaptureNV')) or return False;
	&glEvalCoord1d = nativecast(:(GLdouble $u), SDL_GL_GetProcAddress('glEvalCoord1d')) or return False;
	&glEvalCoord1dv = nativecast(:(CArray[GLdouble] $u), SDL_GL_GetProcAddress('glEvalCoord1dv')) or return False;
	&glEvalCoord1f = nativecast(:(GLfloat $u), SDL_GL_GetProcAddress('glEvalCoord1f')) or return False;
	&glEvalCoord1fv = nativecast(:(CArray[GLfloat] $u), SDL_GL_GetProcAddress('glEvalCoord1fv')) or return False;
	&glEvalCoord1xOES = nativecast(:(GLfixed $u), SDL_GL_GetProcAddress('glEvalCoord1xOES')) or return False;
	&glEvalCoord1xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glEvalCoord1xvOES')) or return False;
	&glEvalCoord2d = nativecast(:(GLdouble $u, GLdouble $v), SDL_GL_GetProcAddress('glEvalCoord2d')) or return False;
	&glEvalCoord2dv = nativecast(:(CArray[GLdouble] $u), SDL_GL_GetProcAddress('glEvalCoord2dv')) or return False;
	&glEvalCoord2f = nativecast(:(GLfloat $u, GLfloat $v), SDL_GL_GetProcAddress('glEvalCoord2f')) or return False;
	&glEvalCoord2fv = nativecast(:(CArray[GLfloat] $u), SDL_GL_GetProcAddress('glEvalCoord2fv')) or return False;
	&glEvalCoord2xOES = nativecast(:(GLfixed $u, GLfixed $v), SDL_GL_GetProcAddress('glEvalCoord2xOES')) or return False;
	&glEvalCoord2xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glEvalCoord2xvOES')) or return False;
	&glEvalMapsNV = nativecast(:(GLenum $target, GLenum $mode), SDL_GL_GetProcAddress('glEvalMapsNV')) or return False;
	&glEvalMesh1 = nativecast(:(GLenum $mode, GLint $i1, GLint $i2), SDL_GL_GetProcAddress('glEvalMesh1')) or return False;
	&glEvalMesh2 = nativecast(:(GLenum $mode, GLint $i1, GLint $i2, GLint $j1, GLint $j2), SDL_GL_GetProcAddress('glEvalMesh2')) or return False;
	&glEvalPoint1 = nativecast(:(GLint $i), SDL_GL_GetProcAddress('glEvalPoint1')) or return False;
	&glEvalPoint2 = nativecast(:(GLint $i, GLint $j), SDL_GL_GetProcAddress('glEvalPoint2')) or return False;
	&glEvaluateDepthValuesARB = nativecast(:(), SDL_GL_GetProcAddress('glEvaluateDepthValuesARB')) or return False;
	&glExecuteProgramNV = nativecast(:(GLenum $target, GLuint $id, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glExecuteProgramNV')) or return False;
	&glExtGetBufferPointervQCOM = nativecast(:(GLenum $target, CArray[Pointer] $params), SDL_GL_GetProcAddress('glExtGetBufferPointervQCOM')) or return False;
	&glExtGetBuffersQCOM = nativecast(:(CArray[GLuint] $buffers, GLint $maxBuffers, CArray[GLint] $numBuffers), SDL_GL_GetProcAddress('glExtGetBuffersQCOM')) or return False;
	&glExtGetFramebuffersQCOM = nativecast(:(CArray[GLuint] $framebuffers, GLint $maxFramebuffers, CArray[GLint] $numFramebuffers), SDL_GL_GetProcAddress('glExtGetFramebuffersQCOM')) or return False;
	&glExtGetProgramBinarySourceQCOM = nativecast(:(GLuint $program, GLenum $shadertype, Str $source, CArray[GLint] $length), SDL_GL_GetProcAddress('glExtGetProgramBinarySourceQCOM')) or return False;
	&glExtGetProgramsQCOM = nativecast(:(CArray[GLuint] $programs, GLint $maxPrograms, CArray[GLint] $numPrograms), SDL_GL_GetProcAddress('glExtGetProgramsQCOM')) or return False;
	&glExtGetRenderbuffersQCOM = nativecast(:(CArray[GLuint] $renderbuffers, GLint $maxRenderbuffers, CArray[GLint] $numRenderbuffers), SDL_GL_GetProcAddress('glExtGetRenderbuffersQCOM')) or return False;
	&glExtGetShadersQCOM = nativecast(:(CArray[GLuint] $shaders, GLint $maxShaders, CArray[GLint] $numShaders), SDL_GL_GetProcAddress('glExtGetShadersQCOM')) or return False;
	&glExtGetTexLevelParameterivQCOM = nativecast(:(GLuint $texture, GLenum $face, GLint $level, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glExtGetTexLevelParameterivQCOM')) or return False;
	&glExtGetTexSubImageQCOM = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $texels), SDL_GL_GetProcAddress('glExtGetTexSubImageQCOM')) or return False;
	&glExtGetTexturesQCOM = nativecast(:(CArray[GLuint] $textures, GLint $maxTextures, CArray[GLint] $numTextures), SDL_GL_GetProcAddress('glExtGetTexturesQCOM')) or return False;
	&glExtIsProgramBinaryQCOM = nativecast(:(GLuint $program --> GLboolean), SDL_GL_GetProcAddress('glExtIsProgramBinaryQCOM')) or return False;
	&glExtTexObjectStateOverrideiQCOM = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glExtTexObjectStateOverrideiQCOM')) or return False;
	&glExtractComponentEXT = nativecast(:(GLuint $res, GLuint $src, GLuint $num), SDL_GL_GetProcAddress('glExtractComponentEXT')) or return False;
	&glFeedbackBuffer = nativecast(:(GLsizei $size, GLenum $type, CArray[GLfloat] $buffer), SDL_GL_GetProcAddress('glFeedbackBuffer')) or return False;
	&glFeedbackBufferxOES = nativecast(:(GLsizei $n, GLenum $type, CArray[GLfixed] $buffer), SDL_GL_GetProcAddress('glFeedbackBufferxOES')) or return False;
	&glFenceSync = nativecast(:(GLenum $condition, GLbitfield $flags --> GLsync), SDL_GL_GetProcAddress('glFenceSync')) or return False;
	&glFenceSyncAPPLE = nativecast(:(GLenum $condition, GLbitfield $flags --> GLsync), SDL_GL_GetProcAddress('glFenceSyncAPPLE')) or return False;
	&glFinalCombinerInputNV = nativecast(:(GLenum $variable, GLenum $input, GLenum $mapping, GLenum $componentUsage), SDL_GL_GetProcAddress('glFinalCombinerInputNV')) or return False;
	&glFinish = nativecast(:(), SDL_GL_GetProcAddress('glFinish')) or return False;
	&glFinishAsyncSGIX = nativecast(:(CArray[GLuint] $markerp --> GLint), SDL_GL_GetProcAddress('glFinishAsyncSGIX')) or return False;
	&glFinishFenceAPPLE = nativecast(:(GLuint $fence), SDL_GL_GetProcAddress('glFinishFenceAPPLE')) or return False;
	&glFinishFenceNV = nativecast(:(GLuint $fence), SDL_GL_GetProcAddress('glFinishFenceNV')) or return False;
	&glFinishObjectAPPLE = nativecast(:(GLenum $object, GLint $name), SDL_GL_GetProcAddress('glFinishObjectAPPLE')) or return False;
	&glFinishTextureSUNX = nativecast(:(), SDL_GL_GetProcAddress('glFinishTextureSUNX')) or return False;
	&glFlush = nativecast(:(), SDL_GL_GetProcAddress('glFlush')) or return False;
	&glFlushMappedBufferRange = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $length), SDL_GL_GetProcAddress('glFlushMappedBufferRange')) or return False;
	&glFlushMappedBufferRangeAPPLE = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glFlushMappedBufferRangeAPPLE')) or return False;
	&glFlushMappedBufferRangeEXT = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $length), SDL_GL_GetProcAddress('glFlushMappedBufferRangeEXT')) or return False;
	&glFlushMappedNamedBufferRange = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $length), SDL_GL_GetProcAddress('glFlushMappedNamedBufferRange')) or return False;
	&glFlushMappedNamedBufferRangeEXT = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $length), SDL_GL_GetProcAddress('glFlushMappedNamedBufferRangeEXT')) or return False;
	&glFlushPixelDataRangeNV = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glFlushPixelDataRangeNV')) or return False;
	&glFlushRasterSGIX = nativecast(:(), SDL_GL_GetProcAddress('glFlushRasterSGIX')) or return False;
	&glFlushStaticDataIBM = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glFlushStaticDataIBM')) or return False;
	&glFlushVertexArrayRangeAPPLE = nativecast(:(GLsizei $length, Pointer $pointer), SDL_GL_GetProcAddress('glFlushVertexArrayRangeAPPLE')) or return False;
	&glFlushVertexArrayRangeNV = nativecast(:(), SDL_GL_GetProcAddress('glFlushVertexArrayRangeNV')) or return False;
	&glFogCoordFormatNV = nativecast(:(GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glFogCoordFormatNV')) or return False;
	&glFogCoordPointer = nativecast(:(GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glFogCoordPointer')) or return False;
	&glFogCoordPointerEXT = nativecast(:(GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glFogCoordPointerEXT')) or return False;
	&glFogCoordPointerListIBM = nativecast(:(GLenum $type, GLint $stride, CArray[Pointer] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glFogCoordPointerListIBM')) or return False;
	&glFogCoordd = nativecast(:(GLdouble $coord), SDL_GL_GetProcAddress('glFogCoordd')) or return False;
	&glFogCoorddEXT = nativecast(:(GLdouble $coord), SDL_GL_GetProcAddress('glFogCoorddEXT')) or return False;
	&glFogCoorddv = nativecast(:(CArray[GLdouble] $coord), SDL_GL_GetProcAddress('glFogCoorddv')) or return False;
	&glFogCoorddvEXT = nativecast(:(CArray[GLdouble] $coord), SDL_GL_GetProcAddress('glFogCoorddvEXT')) or return False;
	&glFogCoordf = nativecast(:(GLfloat $coord), SDL_GL_GetProcAddress('glFogCoordf')) or return False;
	&glFogCoordfEXT = nativecast(:(GLfloat $coord), SDL_GL_GetProcAddress('glFogCoordfEXT')) or return False;
	&glFogCoordfv = nativecast(:(CArray[GLfloat] $coord), SDL_GL_GetProcAddress('glFogCoordfv')) or return False;
	&glFogCoordfvEXT = nativecast(:(CArray[GLfloat] $coord), SDL_GL_GetProcAddress('glFogCoordfvEXT')) or return False;
	&glFogCoordhNV = nativecast(:(GLhalfNV $fog), SDL_GL_GetProcAddress('glFogCoordhNV')) or return False;
	&glFogCoordhvNV = nativecast(:(CArray[GLhalfNV] $fog), SDL_GL_GetProcAddress('glFogCoordhvNV')) or return False;
	&glFogFuncSGIS = nativecast(:(GLsizei $n, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glFogFuncSGIS')) or return False;
	&glFogf = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glFogf')) or return False;
	&glFogfv = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glFogfv')) or return False;
	&glFogi = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glFogi')) or return False;
	&glFogiv = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glFogiv')) or return False;
	&glFogx = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glFogx')) or return False;
	&glFogxOES = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glFogxOES')) or return False;
	&glFogxv = nativecast(:(GLenum $pname, CArray[GLfixed] $param), SDL_GL_GetProcAddress('glFogxv')) or return False;
	&glFogxvOES = nativecast(:(GLenum $pname, CArray[GLfixed] $param), SDL_GL_GetProcAddress('glFogxvOES')) or return False;
	&glFragmentColorMaterialSGIX = nativecast(:(GLenum $face, GLenum $mode), SDL_GL_GetProcAddress('glFragmentColorMaterialSGIX')) or return False;
	&glFragmentCoverageColorNV = nativecast(:(GLuint $color), SDL_GL_GetProcAddress('glFragmentCoverageColorNV')) or return False;
	&glFragmentLightModelfSGIX = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glFragmentLightModelfSGIX')) or return False;
	&glFragmentLightModelfvSGIX = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glFragmentLightModelfvSGIX')) or return False;
	&glFragmentLightModeliSGIX = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glFragmentLightModeliSGIX')) or return False;
	&glFragmentLightModelivSGIX = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glFragmentLightModelivSGIX')) or return False;
	&glFragmentLightfSGIX = nativecast(:(GLenum $light, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glFragmentLightfSGIX')) or return False;
	&glFragmentLightfvSGIX = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glFragmentLightfvSGIX')) or return False;
	&glFragmentLightiSGIX = nativecast(:(GLenum $light, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glFragmentLightiSGIX')) or return False;
	&glFragmentLightivSGIX = nativecast(:(GLenum $light, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glFragmentLightivSGIX')) or return False;
	&glFragmentMaterialfSGIX = nativecast(:(GLenum $face, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glFragmentMaterialfSGIX')) or return False;
	&glFragmentMaterialfvSGIX = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glFragmentMaterialfvSGIX')) or return False;
	&glFragmentMaterialiSGIX = nativecast(:(GLenum $face, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glFragmentMaterialiSGIX')) or return False;
	&glFragmentMaterialivSGIX = nativecast(:(GLenum $face, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glFragmentMaterialivSGIX')) or return False;
	&glFrameTerminatorGREMEDY = nativecast(:(), SDL_GL_GetProcAddress('glFrameTerminatorGREMEDY')) or return False;
	&glFrameZoomSGIX = nativecast(:(GLint $factor), SDL_GL_GetProcAddress('glFrameZoomSGIX')) or return False;
	&glFramebufferDrawBufferEXT = nativecast(:(GLuint $framebuffer, GLenum $mode), SDL_GL_GetProcAddress('glFramebufferDrawBufferEXT')) or return False;
	&glFramebufferDrawBuffersEXT = nativecast(:(GLuint $framebuffer, GLsizei $n, CArray[GLenum] $bufs), SDL_GL_GetProcAddress('glFramebufferDrawBuffersEXT')) or return False;
	&glFramebufferFetchBarrierEXT = nativecast(:(), SDL_GL_GetProcAddress('glFramebufferFetchBarrierEXT')) or return False;
	&glFramebufferFetchBarrierQCOM = nativecast(:(), SDL_GL_GetProcAddress('glFramebufferFetchBarrierQCOM')) or return False;
	&glFramebufferFoveationConfigQCOM = nativecast(:(GLuint $framebuffer, GLuint $numLayers, GLuint $focalPointsPerLayer, GLuint $requestedFeatures, CArray[GLuint] $providedFeatures), SDL_GL_GetProcAddress('glFramebufferFoveationConfigQCOM')) or return False;
	&glFramebufferFoveationParametersQCOM = nativecast(:(GLuint $framebuffer, GLuint $layer, GLuint $focalPoint, GLfloat $focalX, GLfloat $focalY, GLfloat $gainX, GLfloat $gainY, GLfloat $foveaArea), SDL_GL_GetProcAddress('glFramebufferFoveationParametersQCOM')) or return False;
	&glFramebufferParameteri = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glFramebufferParameteri')) or return False;
	&glFramebufferPixelLocalStorageSizeEXT = nativecast(:(GLuint $target, GLsizei $size), SDL_GL_GetProcAddress('glFramebufferPixelLocalStorageSizeEXT')) or return False;
	&glFramebufferReadBufferEXT = nativecast(:(GLuint $framebuffer, GLenum $mode), SDL_GL_GetProcAddress('glFramebufferReadBufferEXT')) or return False;
	&glFramebufferRenderbuffer = nativecast(:(GLenum $target, GLenum $attachment, GLenum $renderbuffertarget, GLuint $renderbuffer), SDL_GL_GetProcAddress('glFramebufferRenderbuffer')) or return False;
	&glFramebufferRenderbufferEXT = nativecast(:(GLenum $target, GLenum $attachment, GLenum $renderbuffertarget, GLuint $renderbuffer), SDL_GL_GetProcAddress('glFramebufferRenderbufferEXT')) or return False;
	&glFramebufferRenderbufferOES = nativecast(:(GLenum $target, GLenum $attachment, GLenum $renderbuffertarget, GLuint $renderbuffer), SDL_GL_GetProcAddress('glFramebufferRenderbufferOES')) or return False;
	&glFramebufferSampleLocationsfvARB = nativecast(:(GLenum $target, GLuint $start, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glFramebufferSampleLocationsfvARB')) or return False;
	&glFramebufferSampleLocationsfvNV = nativecast(:(GLenum $target, GLuint $start, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glFramebufferSampleLocationsfvNV')) or return False;
	&glFramebufferSamplePositionsfvAMD = nativecast(:(GLenum $target, GLuint $numsamples, GLuint $pixelindex, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glFramebufferSamplePositionsfvAMD')) or return False;
	&glFramebufferTexture = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTexture')) or return False;
	&glFramebufferTexture1D = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTexture1D')) or return False;
	&glFramebufferTexture1DEXT = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTexture1DEXT')) or return False;
	&glFramebufferTexture2D = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTexture2D')) or return False;
	&glFramebufferTexture2DEXT = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTexture2DEXT')) or return False;
	&glFramebufferTexture2DDownsampleIMG = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level, GLint $xscale, GLint $yscale), SDL_GL_GetProcAddress('glFramebufferTexture2DDownsampleIMG')) or return False;
	&glFramebufferTexture2DMultisampleEXT = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level, GLsizei $samples), SDL_GL_GetProcAddress('glFramebufferTexture2DMultisampleEXT')) or return False;
	&glFramebufferTexture2DMultisampleIMG = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level, GLsizei $samples), SDL_GL_GetProcAddress('glFramebufferTexture2DMultisampleIMG')) or return False;
	&glFramebufferTexture2DOES = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTexture2DOES')) or return False;
	&glFramebufferTexture3D = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level, GLint $zoffset), SDL_GL_GetProcAddress('glFramebufferTexture3D')) or return False;
	&glFramebufferTexture3DEXT = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level, GLint $zoffset), SDL_GL_GetProcAddress('glFramebufferTexture3DEXT')) or return False;
	&glFramebufferTexture3DOES = nativecast(:(GLenum $target, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level, GLint $zoffset), SDL_GL_GetProcAddress('glFramebufferTexture3DOES')) or return False;
	&glFramebufferTextureARB = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTextureARB')) or return False;
	&glFramebufferTextureEXT = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTextureEXT')) or return False;
	&glFramebufferTextureFaceARB = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLenum $face), SDL_GL_GetProcAddress('glFramebufferTextureFaceARB')) or return False;
	&glFramebufferTextureFaceEXT = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLenum $face), SDL_GL_GetProcAddress('glFramebufferTextureFaceEXT')) or return False;
	&glFramebufferTextureLayer = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLint $layer), SDL_GL_GetProcAddress('glFramebufferTextureLayer')) or return False;
	&glFramebufferTextureLayerARB = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLint $layer), SDL_GL_GetProcAddress('glFramebufferTextureLayerARB')) or return False;
	&glFramebufferTextureLayerEXT = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLint $layer), SDL_GL_GetProcAddress('glFramebufferTextureLayerEXT')) or return False;
	&glFramebufferTextureLayerDownsampleIMG = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLint $layer, GLint $xscale, GLint $yscale), SDL_GL_GetProcAddress('glFramebufferTextureLayerDownsampleIMG')) or return False;
	&glFramebufferTextureMultisampleMultiviewOVR = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLsizei $samples, GLint $baseViewIndex, GLsizei $numViews), SDL_GL_GetProcAddress('glFramebufferTextureMultisampleMultiviewOVR')) or return False;
	&glFramebufferTextureMultiviewOVR = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level, GLint $baseViewIndex, GLsizei $numViews), SDL_GL_GetProcAddress('glFramebufferTextureMultiviewOVR')) or return False;
	&glFramebufferTextureOES = nativecast(:(GLenum $target, GLenum $attachment, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glFramebufferTextureOES')) or return False;
	&glFreeObjectBufferATI = nativecast(:(GLuint $buffer), SDL_GL_GetProcAddress('glFreeObjectBufferATI')) or return False;
	&glFrontFace = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glFrontFace')) or return False;
	&glFrustum = nativecast(:(GLdouble $left, GLdouble $right, GLdouble $bottom, GLdouble $top, GLdouble $zNear, GLdouble $zFar), SDL_GL_GetProcAddress('glFrustum')) or return False;
	&glFrustumf = nativecast(:(GLfloat $l, GLfloat $r, GLfloat $b, GLfloat $t, GLfloat $n, GLfloat $f), SDL_GL_GetProcAddress('glFrustumf')) or return False;
	&glFrustumfOES = nativecast(:(GLfloat $l, GLfloat $r, GLfloat $b, GLfloat $t, GLfloat $n, GLfloat $f), SDL_GL_GetProcAddress('glFrustumfOES')) or return False;
	&glFrustumx = nativecast(:(GLfixed $l, GLfixed $r, GLfixed $b, GLfixed $t, GLfixed $n, GLfixed $f), SDL_GL_GetProcAddress('glFrustumx')) or return False;
	&glFrustumxOES = nativecast(:(GLfixed $l, GLfixed $r, GLfixed $b, GLfixed $t, GLfixed $n, GLfixed $f), SDL_GL_GetProcAddress('glFrustumxOES')) or return False;
	&glGenAsyncMarkersSGIX = nativecast(:(GLsizei $range --> GLuint), SDL_GL_GetProcAddress('glGenAsyncMarkersSGIX')) or return False;
	&glGenBuffers = nativecast(:(GLsizei $n, CArray[GLuint] $buffers), SDL_GL_GetProcAddress('glGenBuffers')) or return False;
	&glGenBuffersARB = nativecast(:(GLsizei $n, CArray[GLuint] $buffers), SDL_GL_GetProcAddress('glGenBuffersARB')) or return False;
	&glGenFencesAPPLE = nativecast(:(GLsizei $n, CArray[GLuint] $fences), SDL_GL_GetProcAddress('glGenFencesAPPLE')) or return False;
	&glGenFencesNV = nativecast(:(GLsizei $n, CArray[GLuint] $fences), SDL_GL_GetProcAddress('glGenFencesNV')) or return False;
	&glGenFragmentShadersATI = nativecast(:(GLuint $range --> GLuint), SDL_GL_GetProcAddress('glGenFragmentShadersATI')) or return False;
	&glGenFramebuffers = nativecast(:(GLsizei $n, CArray[GLuint] $framebuffers), SDL_GL_GetProcAddress('glGenFramebuffers')) or return False;
	&glGenFramebuffersEXT = nativecast(:(GLsizei $n, CArray[GLuint] $framebuffers), SDL_GL_GetProcAddress('glGenFramebuffersEXT')) or return False;
	&glGenFramebuffersOES = nativecast(:(GLsizei $n, CArray[GLuint] $framebuffers), SDL_GL_GetProcAddress('glGenFramebuffersOES')) or return False;
	&glGenLists = nativecast(:(GLsizei $range --> GLuint), SDL_GL_GetProcAddress('glGenLists')) or return False;
	&glGenNamesAMD = nativecast(:(GLenum $identifier, GLuint $num, CArray[GLuint] $names), SDL_GL_GetProcAddress('glGenNamesAMD')) or return False;
	&glGenOcclusionQueriesNV = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glGenOcclusionQueriesNV')) or return False;
	&glGenPathsNV = nativecast(:(GLsizei $range --> GLuint), SDL_GL_GetProcAddress('glGenPathsNV')) or return False;
	&glGenPerfMonitorsAMD = nativecast(:(GLsizei $n, CArray[GLuint] $monitors), SDL_GL_GetProcAddress('glGenPerfMonitorsAMD')) or return False;
	&glGenProgramPipelines = nativecast(:(GLsizei $n, CArray[GLuint] $pipelines), SDL_GL_GetProcAddress('glGenProgramPipelines')) or return False;
	&glGenProgramPipelinesEXT = nativecast(:(GLsizei $n, CArray[GLuint] $pipelines), SDL_GL_GetProcAddress('glGenProgramPipelinesEXT')) or return False;
	&glGenProgramsARB = nativecast(:(GLsizei $n, CArray[GLuint] $programs), SDL_GL_GetProcAddress('glGenProgramsARB')) or return False;
	&glGenProgramsNV = nativecast(:(GLsizei $n, CArray[GLuint] $programs), SDL_GL_GetProcAddress('glGenProgramsNV')) or return False;
	&glGenQueries = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glGenQueries')) or return False;
	&glGenQueriesARB = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glGenQueriesARB')) or return False;
	&glGenQueriesEXT = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glGenQueriesEXT')) or return False;
	&glGenQueryResourceTagNV = nativecast(:(GLsizei $n, CArray[GLint] $tagIds), SDL_GL_GetProcAddress('glGenQueryResourceTagNV')) or return False;
	&glGenRenderbuffers = nativecast(:(GLsizei $n, CArray[GLuint] $renderbuffers), SDL_GL_GetProcAddress('glGenRenderbuffers')) or return False;
	&glGenRenderbuffersEXT = nativecast(:(GLsizei $n, CArray[GLuint] $renderbuffers), SDL_GL_GetProcAddress('glGenRenderbuffersEXT')) or return False;
	&glGenRenderbuffersOES = nativecast(:(GLsizei $n, CArray[GLuint] $renderbuffers), SDL_GL_GetProcAddress('glGenRenderbuffersOES')) or return False;
	&glGenSamplers = nativecast(:(GLsizei $count, CArray[GLuint] $samplers), SDL_GL_GetProcAddress('glGenSamplers')) or return False;
	&glGenSemaphoresEXT = nativecast(:(GLsizei $n, CArray[GLuint] $semaphores), SDL_GL_GetProcAddress('glGenSemaphoresEXT')) or return False;
	&glGenSymbolsEXT = nativecast(:(GLenum $datatype, GLenum $storagetype, GLenum $range, GLuint $components --> GLuint), SDL_GL_GetProcAddress('glGenSymbolsEXT')) or return False;
	&glGenTextures = nativecast(:(GLsizei $n, CArray[GLuint] $textures), SDL_GL_GetProcAddress('glGenTextures')) or return False;
	&glGenTexturesEXT = nativecast(:(GLsizei $n, CArray[GLuint] $textures), SDL_GL_GetProcAddress('glGenTexturesEXT')) or return False;
	&glGenTransformFeedbacks = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glGenTransformFeedbacks')) or return False;
	&glGenTransformFeedbacksNV = nativecast(:(GLsizei $n, CArray[GLuint] $ids), SDL_GL_GetProcAddress('glGenTransformFeedbacksNV')) or return False;
	&glGenVertexArrays = nativecast(:(GLsizei $n, CArray[GLuint] $arrays), SDL_GL_GetProcAddress('glGenVertexArrays')) or return False;
	&glGenVertexArraysAPPLE = nativecast(:(GLsizei $n, CArray[GLuint] $arrays), SDL_GL_GetProcAddress('glGenVertexArraysAPPLE')) or return False;
	&glGenVertexArraysOES = nativecast(:(GLsizei $n, CArray[GLuint] $arrays), SDL_GL_GetProcAddress('glGenVertexArraysOES')) or return False;
	&glGenVertexShadersEXT = nativecast(:(GLuint $range --> GLuint), SDL_GL_GetProcAddress('glGenVertexShadersEXT')) or return False;
	&glGenerateMipmap = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glGenerateMipmap')) or return False;
	&glGenerateMipmapEXT = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glGenerateMipmapEXT')) or return False;
	&glGenerateMipmapOES = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glGenerateMipmapOES')) or return False;
	&glGenerateMultiTexMipmapEXT = nativecast(:(GLenum $texunit, GLenum $target), SDL_GL_GetProcAddress('glGenerateMultiTexMipmapEXT')) or return False;
	&glGenerateTextureMipmap = nativecast(:(GLuint $texture), SDL_GL_GetProcAddress('glGenerateTextureMipmap')) or return False;
	&glGenerateTextureMipmapEXT = nativecast(:(GLuint $texture, GLenum $target), SDL_GL_GetProcAddress('glGenerateTextureMipmapEXT')) or return False;
	&glGetActiveAtomicCounterBufferiv = nativecast(:(GLuint $program, GLuint $bufferIndex, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetActiveAtomicCounterBufferiv')) or return False;
	&glGetActiveAttrib = nativecast(:(GLuint $program, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, CArray[GLint] $size, CArray[GLenum] $type, Str $name), SDL_GL_GetProcAddress('glGetActiveAttrib')) or return False;
	&glGetActiveAttribARB = nativecast(:(GLhandleARB $programObj, GLuint $index, GLsizei $maxLength, CArray[GLsizei] $length, CArray[GLint] $size, CArray[GLenum] $type, Str $name), SDL_GL_GetProcAddress('glGetActiveAttribARB')) or return False;
	&glGetActiveSubroutineName = nativecast(:(GLuint $program, GLenum $shadertype, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, Str $name), SDL_GL_GetProcAddress('glGetActiveSubroutineName')) or return False;
	&glGetActiveSubroutineUniformName = nativecast(:(GLuint $program, GLenum $shadertype, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, Str $name), SDL_GL_GetProcAddress('glGetActiveSubroutineUniformName')) or return False;
	&glGetActiveSubroutineUniformiv = nativecast(:(GLuint $program, GLenum $shadertype, GLuint $index, GLenum $pname, CArray[GLint] $values), SDL_GL_GetProcAddress('glGetActiveSubroutineUniformiv')) or return False;
	&glGetActiveUniform = nativecast(:(GLuint $program, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, CArray[GLint] $size, CArray[GLenum] $type, Str $name), SDL_GL_GetProcAddress('glGetActiveUniform')) or return False;
	&glGetActiveUniformARB = nativecast(:(GLhandleARB $programObj, GLuint $index, GLsizei $maxLength, CArray[GLsizei] $length, CArray[GLint] $size, CArray[GLenum] $type, Str $name), SDL_GL_GetProcAddress('glGetActiveUniformARB')) or return False;
	&glGetActiveUniformBlockName = nativecast(:(GLuint $program, GLuint $uniformBlockIndex, GLsizei $bufSize, CArray[GLsizei] $length, Str $uniformBlockName), SDL_GL_GetProcAddress('glGetActiveUniformBlockName')) or return False;
	&glGetActiveUniformBlockiv = nativecast(:(GLuint $program, GLuint $uniformBlockIndex, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetActiveUniformBlockiv')) or return False;
	&glGetActiveUniformName = nativecast(:(GLuint $program, GLuint $uniformIndex, GLsizei $bufSize, CArray[GLsizei] $length, Str $uniformName), SDL_GL_GetProcAddress('glGetActiveUniformName')) or return False;
	&glGetActiveUniformsiv = nativecast(:(GLuint $program, GLsizei $uniformCount, CArray[GLuint] $uniformIndices, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetActiveUniformsiv')) or return False;
	&glGetActiveVaryingNV = nativecast(:(GLuint $program, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, CArray[GLsizei] $size, CArray[GLenum] $type, Str $name), SDL_GL_GetProcAddress('glGetActiveVaryingNV')) or return False;
	&glGetArrayObjectfvATI = nativecast(:(GLenum $array, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetArrayObjectfvATI')) or return False;
	&glGetArrayObjectivATI = nativecast(:(GLenum $array, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetArrayObjectivATI')) or return False;
	&glGetAttachedObjectsARB = nativecast(:(GLhandleARB $containerObj, GLsizei $maxCount, CArray[GLsizei] $count, CArray[GLhandleARB] $obj), SDL_GL_GetProcAddress('glGetAttachedObjectsARB')) or return False;
	&glGetAttachedShaders = nativecast(:(GLuint $program, GLsizei $maxCount, CArray[GLsizei] $count, CArray[GLuint] $shaders), SDL_GL_GetProcAddress('glGetAttachedShaders')) or return False;
	&glGetAttribLocation = nativecast(:(GLuint $program, Str $name --> GLint), SDL_GL_GetProcAddress('glGetAttribLocation')) or return False;
	&glGetAttribLocationARB = nativecast(:(GLhandleARB $programObj, Str $name --> GLint), SDL_GL_GetProcAddress('glGetAttribLocationARB')) or return False;
	&glGetBooleanIndexedvEXT = nativecast(:(GLenum $target, GLuint $index, CArray[GLboolean] $data), SDL_GL_GetProcAddress('glGetBooleanIndexedvEXT')) or return False;
	&glGetBooleani_v = nativecast(:(GLenum $target, GLuint $index, CArray[GLboolean] $data), SDL_GL_GetProcAddress('glGetBooleani_v')) or return False;
	&glGetBooleanv = nativecast(:(GLenum $pname, CArray[GLboolean] $data), SDL_GL_GetProcAddress('glGetBooleanv')) or return False;
	&glGetBufferParameteri64v = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetBufferParameteri64v')) or return False;
	&glGetBufferParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetBufferParameteriv')) or return False;
	&glGetBufferParameterivARB = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetBufferParameterivARB')) or return False;
	&glGetBufferParameterui64vNV = nativecast(:(GLenum $target, GLenum $pname, CArray[GLuint64EXT] $params), SDL_GL_GetProcAddress('glGetBufferParameterui64vNV')) or return False;
	&glGetBufferPointerv = nativecast(:(GLenum $target, GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetBufferPointerv')) or return False;
	&glGetBufferPointervARB = nativecast(:(GLenum $target, GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetBufferPointervARB')) or return False;
	&glGetBufferPointervOES = nativecast(:(GLenum $target, GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetBufferPointervOES')) or return False;
	&glGetBufferSubData = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glGetBufferSubData')) or return False;
	&glGetBufferSubDataARB = nativecast(:(GLenum $target, GLintptrARB $offset, GLsizeiptrARB $size, Pointer $data), SDL_GL_GetProcAddress('glGetBufferSubDataARB')) or return False;
	&glGetClipPlane = nativecast(:(GLenum $plane, CArray[GLdouble] $equation), SDL_GL_GetProcAddress('glGetClipPlane')) or return False;
	&glGetClipPlanef = nativecast(:(GLenum $plane, CArray[GLfloat] $equation), SDL_GL_GetProcAddress('glGetClipPlanef')) or return False;
	&glGetClipPlanefOES = nativecast(:(GLenum $plane, CArray[GLfloat] $equation), SDL_GL_GetProcAddress('glGetClipPlanefOES')) or return False;
	&glGetClipPlanex = nativecast(:(GLenum $plane, CArray[GLfixed] $equation), SDL_GL_GetProcAddress('glGetClipPlanex')) or return False;
	&glGetClipPlanexOES = nativecast(:(GLenum $plane, CArray[GLfixed] $equation), SDL_GL_GetProcAddress('glGetClipPlanexOES')) or return False;
	&glGetColorTable = nativecast(:(GLenum $target, GLenum $format, GLenum $type, Pointer $table), SDL_GL_GetProcAddress('glGetColorTable')) or return False;
	&glGetColorTableEXT = nativecast(:(GLenum $target, GLenum $format, GLenum $type, Pointer $data), SDL_GL_GetProcAddress('glGetColorTableEXT')) or return False;
	&glGetColorTableParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetColorTableParameterfv')) or return False;
	&glGetColorTableParameterfvEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetColorTableParameterfvEXT')) or return False;
	&glGetColorTableParameterfvSGI = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetColorTableParameterfvSGI')) or return False;
	&glGetColorTableParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetColorTableParameteriv')) or return False;
	&glGetColorTableParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetColorTableParameterivEXT')) or return False;
	&glGetColorTableParameterivSGI = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetColorTableParameterivSGI')) or return False;
	&glGetColorTableSGI = nativecast(:(GLenum $target, GLenum $format, GLenum $type, Pointer $table), SDL_GL_GetProcAddress('glGetColorTableSGI')) or return False;
	&glGetCombinerInputParameterfvNV = nativecast(:(GLenum $stage, GLenum $portion, GLenum $variable, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetCombinerInputParameterfvNV')) or return False;
	&glGetCombinerInputParameterivNV = nativecast(:(GLenum $stage, GLenum $portion, GLenum $variable, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetCombinerInputParameterivNV')) or return False;
	&glGetCombinerOutputParameterfvNV = nativecast(:(GLenum $stage, GLenum $portion, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetCombinerOutputParameterfvNV')) or return False;
	&glGetCombinerOutputParameterivNV = nativecast(:(GLenum $stage, GLenum $portion, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetCombinerOutputParameterivNV')) or return False;
	&glGetCombinerStageParameterfvNV = nativecast(:(GLenum $stage, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetCombinerStageParameterfvNV')) or return False;
	&glGetCommandHeaderNV = nativecast(:(GLenum $tokenID, GLuint $size --> GLuint), SDL_GL_GetProcAddress('glGetCommandHeaderNV')) or return False;
	&glGetCompressedMultiTexImageEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $lod, Pointer $img), SDL_GL_GetProcAddress('glGetCompressedMultiTexImageEXT')) or return False;
	&glGetCompressedTexImage = nativecast(:(GLenum $target, GLint $level, Pointer $img), SDL_GL_GetProcAddress('glGetCompressedTexImage')) or return False;
	&glGetCompressedTexImageARB = nativecast(:(GLenum $target, GLint $level, Pointer $img), SDL_GL_GetProcAddress('glGetCompressedTexImageARB')) or return False;
	&glGetCompressedTextureImage = nativecast(:(GLuint $texture, GLint $level, GLsizei $bufSize, Pointer $pixels), SDL_GL_GetProcAddress('glGetCompressedTextureImage')) or return False;
	&glGetCompressedTextureImageEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $lod, Pointer $img), SDL_GL_GetProcAddress('glGetCompressedTextureImageEXT')) or return False;
	&glGetCompressedTextureSubImage = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLsizei $bufSize, Pointer $pixels), SDL_GL_GetProcAddress('glGetCompressedTextureSubImage')) or return False;
	&glGetConvolutionFilter = nativecast(:(GLenum $target, GLenum $format, GLenum $type, Pointer $image), SDL_GL_GetProcAddress('glGetConvolutionFilter')) or return False;
	&glGetConvolutionFilterEXT = nativecast(:(GLenum $target, GLenum $format, GLenum $type, Pointer $image), SDL_GL_GetProcAddress('glGetConvolutionFilterEXT')) or return False;
	&glGetConvolutionParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetConvolutionParameterfv')) or return False;
	&glGetConvolutionParameterfvEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetConvolutionParameterfvEXT')) or return False;
	&glGetConvolutionParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetConvolutionParameteriv')) or return False;
	&glGetConvolutionParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetConvolutionParameterivEXT')) or return False;
	&glGetConvolutionParameterxvOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetConvolutionParameterxvOES')) or return False;
	&glGetCoverageModulationTableNV = nativecast(:(GLsizei $bufSize, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glGetCoverageModulationTableNV')) or return False;
	&glGetDebugMessageLog = nativecast(:(GLuint $count, GLsizei $bufSize, CArray[GLenum] $sources, CArray[GLenum] $types, CArray[GLuint] $ids, CArray[GLenum] $severities, CArray[GLsizei] $lengths, Str $messageLog --> GLuint), SDL_GL_GetProcAddress('glGetDebugMessageLog')) or return False;
	&glGetDebugMessageLogAMD = nativecast(:(GLuint $count, GLsizei $bufSize, CArray[GLenum] $categories, CArray[GLuint] $severities, CArray[GLuint] $ids, CArray[GLsizei] $lengths, Str $message --> GLuint), SDL_GL_GetProcAddress('glGetDebugMessageLogAMD')) or return False;
	&glGetDebugMessageLogARB = nativecast(:(GLuint $count, GLsizei $bufSize, CArray[GLenum] $sources, CArray[GLenum] $types, CArray[GLuint] $ids, CArray[GLenum] $severities, CArray[GLsizei] $lengths, Str $messageLog --> GLuint), SDL_GL_GetProcAddress('glGetDebugMessageLogARB')) or return False;
	&glGetDebugMessageLogKHR = nativecast(:(GLuint $count, GLsizei $bufSize, CArray[GLenum] $sources, CArray[GLenum] $types, CArray[GLuint] $ids, CArray[GLenum] $severities, CArray[GLsizei] $lengths, Str $messageLog --> GLuint), SDL_GL_GetProcAddress('glGetDebugMessageLogKHR')) or return False;
	&glGetDetailTexFuncSGIS = nativecast(:(GLenum $target, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glGetDetailTexFuncSGIS')) or return False;
	&glGetDoubleIndexedvEXT = nativecast(:(GLenum $target, GLuint $index, CArray[GLdouble] $data), SDL_GL_GetProcAddress('glGetDoubleIndexedvEXT')) or return False;
	&glGetDoublei_v = nativecast(:(GLenum $target, GLuint $index, CArray[GLdouble] $data), SDL_GL_GetProcAddress('glGetDoublei_v')) or return False;
	&glGetDoublei_vEXT = nativecast(:(GLenum $pname, GLuint $index, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetDoublei_vEXT')) or return False;
	&glGetDoublev = nativecast(:(GLenum $pname, CArray[GLdouble] $data), SDL_GL_GetProcAddress('glGetDoublev')) or return False;
	&glGetDriverControlStringQCOM = nativecast(:(GLuint $driverControl, GLsizei $bufSize, CArray[GLsizei] $length, Str $driverControlString), SDL_GL_GetProcAddress('glGetDriverControlStringQCOM')) or return False;
	&glGetDriverControlsQCOM = nativecast(:(CArray[GLint] $num, GLsizei $size, CArray[GLuint] $driverControls), SDL_GL_GetProcAddress('glGetDriverControlsQCOM')) or return False;
	&glGetError = nativecast(:( --> GLenum), SDL_GL_GetProcAddress('glGetError')) or return False;
	&glGetFenceivNV = nativecast(:(GLuint $fence, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFenceivNV')) or return False;
	&glGetFinalCombinerInputParameterfvNV = nativecast(:(GLenum $variable, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetFinalCombinerInputParameterfvNV')) or return False;
	&glGetFinalCombinerInputParameterivNV = nativecast(:(GLenum $variable, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFinalCombinerInputParameterivNV')) or return False;
	&glGetFirstPerfQueryIdINTEL = nativecast(:(CArray[GLuint] $queryId), SDL_GL_GetProcAddress('glGetFirstPerfQueryIdINTEL')) or return False;
	&glGetFixedv = nativecast(:(GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetFixedv')) or return False;
	&glGetFixedvOES = nativecast(:(GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetFixedvOES')) or return False;
	&glGetFloatIndexedvEXT = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetFloatIndexedvEXT')) or return False;
	&glGetFloati_v = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetFloati_v')) or return False;
	&glGetFloati_vEXT = nativecast(:(GLenum $pname, GLuint $index, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetFloati_vEXT')) or return False;
	&glGetFloati_vNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetFloati_vNV')) or return False;
	&glGetFloati_vOES = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetFloati_vOES')) or return False;
	&glGetFloatv = nativecast(:(GLenum $pname, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetFloatv')) or return False;
	&glGetFogFuncSGIS = nativecast(:(CArray[GLfloat] $points), SDL_GL_GetProcAddress('glGetFogFuncSGIS')) or return False;
	&glGetFragDataIndex = nativecast(:(GLuint $program, Str $name --> GLint), SDL_GL_GetProcAddress('glGetFragDataIndex')) or return False;
	&glGetFragDataIndexEXT = nativecast(:(GLuint $program, Str $name --> GLint), SDL_GL_GetProcAddress('glGetFragDataIndexEXT')) or return False;
	&glGetFragDataLocation = nativecast(:(GLuint $program, Str $name --> GLint), SDL_GL_GetProcAddress('glGetFragDataLocation')) or return False;
	&glGetFragDataLocationEXT = nativecast(:(GLuint $program, Str $name --> GLint), SDL_GL_GetProcAddress('glGetFragDataLocationEXT')) or return False;
	&glGetFragmentLightfvSGIX = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetFragmentLightfvSGIX')) or return False;
	&glGetFragmentLightivSGIX = nativecast(:(GLenum $light, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFragmentLightivSGIX')) or return False;
	&glGetFragmentMaterialfvSGIX = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetFragmentMaterialfvSGIX')) or return False;
	&glGetFragmentMaterialivSGIX = nativecast(:(GLenum $face, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFragmentMaterialivSGIX')) or return False;
	&glGetFramebufferAttachmentParameteriv = nativecast(:(GLenum $target, GLenum $attachment, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFramebufferAttachmentParameteriv')) or return False;
	&glGetFramebufferAttachmentParameterivEXT = nativecast(:(GLenum $target, GLenum $attachment, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFramebufferAttachmentParameterivEXT')) or return False;
	&glGetFramebufferAttachmentParameterivOES = nativecast(:(GLenum $target, GLenum $attachment, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFramebufferAttachmentParameterivOES')) or return False;
	&glGetFramebufferParameterfvAMD = nativecast(:(GLenum $target, GLenum $pname, GLuint $numsamples, GLuint $pixelindex, GLsizei $size, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glGetFramebufferParameterfvAMD')) or return False;
	&glGetFramebufferParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFramebufferParameteriv')) or return False;
	&glGetFramebufferParameterivEXT = nativecast(:(GLuint $framebuffer, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFramebufferParameterivEXT')) or return False;
	&glGetFramebufferPixelLocalStorageSizeEXT = nativecast(:(GLuint $target --> GLsizei), SDL_GL_GetProcAddress('glGetFramebufferPixelLocalStorageSizeEXT')) or return False;
	&glGetGraphicsResetStatus = nativecast(:( --> GLenum), SDL_GL_GetProcAddress('glGetGraphicsResetStatus')) or return False;
	&glGetGraphicsResetStatusARB = nativecast(:( --> GLenum), SDL_GL_GetProcAddress('glGetGraphicsResetStatusARB')) or return False;
	&glGetGraphicsResetStatusEXT = nativecast(:( --> GLenum), SDL_GL_GetProcAddress('glGetGraphicsResetStatusEXT')) or return False;
	&glGetGraphicsResetStatusKHR = nativecast(:( --> GLenum), SDL_GL_GetProcAddress('glGetGraphicsResetStatusKHR')) or return False;
	&glGetHandleARB = nativecast(:(GLenum $pname --> GLhandleARB), SDL_GL_GetProcAddress('glGetHandleARB')) or return False;
	&glGetHistogram = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, Pointer $values), SDL_GL_GetProcAddress('glGetHistogram')) or return False;
	&glGetHistogramEXT = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, Pointer $values), SDL_GL_GetProcAddress('glGetHistogramEXT')) or return False;
	&glGetHistogramParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetHistogramParameterfv')) or return False;
	&glGetHistogramParameterfvEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetHistogramParameterfvEXT')) or return False;
	&glGetHistogramParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetHistogramParameteriv')) or return False;
	&glGetHistogramParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetHistogramParameterivEXT')) or return False;
	&glGetHistogramParameterxvOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetHistogramParameterxvOES')) or return False;
	&glGetImageHandleARB = nativecast(:(GLuint $texture, GLint $level, GLboolean $layered, GLint $layer, GLenum $format --> GLuint64), SDL_GL_GetProcAddress('glGetImageHandleARB')) or return False;
	&glGetImageHandleNV = nativecast(:(GLuint $texture, GLint $level, GLboolean $layered, GLint $layer, GLenum $format --> GLuint64), SDL_GL_GetProcAddress('glGetImageHandleNV')) or return False;
	&glGetImageTransformParameterfvHP = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetImageTransformParameterfvHP')) or return False;
	&glGetImageTransformParameterivHP = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetImageTransformParameterivHP')) or return False;
	&glGetInfoLogARB = nativecast(:(GLhandleARB $obj, GLsizei $maxLength, CArray[GLsizei] $length, Str $infoLog), SDL_GL_GetProcAddress('glGetInfoLogARB')) or return False;
	&glGetInstrumentsSGIX = nativecast(:( --> GLint), SDL_GL_GetProcAddress('glGetInstrumentsSGIX')) or return False;
	&glGetInteger64i_v = nativecast(:(GLenum $target, GLuint $index, CArray[GLint64] $data), SDL_GL_GetProcAddress('glGetInteger64i_v')) or return False;
	&glGetInteger64v = nativecast(:(GLenum $pname, CArray[GLint64] $data), SDL_GL_GetProcAddress('glGetInteger64v')) or return False;
	&glGetInteger64vAPPLE = nativecast(:(GLenum $pname, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetInteger64vAPPLE')) or return False;
	&glGetInteger64vEXT = nativecast(:(GLenum $pname, CArray[GLint64] $data), SDL_GL_GetProcAddress('glGetInteger64vEXT')) or return False;
	&glGetIntegerIndexedvEXT = nativecast(:(GLenum $target, GLuint $index, CArray[GLint] $data), SDL_GL_GetProcAddress('glGetIntegerIndexedvEXT')) or return False;
	&glGetIntegeri_v = nativecast(:(GLenum $target, GLuint $index, CArray[GLint] $data), SDL_GL_GetProcAddress('glGetIntegeri_v')) or return False;
	&glGetIntegeri_vEXT = nativecast(:(GLenum $target, GLuint $index, CArray[GLint] $data), SDL_GL_GetProcAddress('glGetIntegeri_vEXT')) or return False;
	&glGetIntegerui64i_vNV = nativecast(:(GLenum $value, GLuint $index, CArray[GLuint64EXT] $result), SDL_GL_GetProcAddress('glGetIntegerui64i_vNV')) or return False;
	&glGetIntegerui64vNV = nativecast(:(GLenum $value, CArray[GLuint64EXT] $result), SDL_GL_GetProcAddress('glGetIntegerui64vNV')) or return False;
	&glGetIntegerv = nativecast(:(GLenum $pname, CArray[GLint] $data), SDL_GL_GetProcAddress('glGetIntegerv')) or return False;
	&glGetInternalformatSampleivNV = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $samples, GLenum $pname, GLsizei $count, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetInternalformatSampleivNV')) or return False;
	&glGetInternalformati64v = nativecast(:(GLenum $target, GLenum $internalformat, GLenum $pname, GLsizei $count, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetInternalformati64v')) or return False;
	&glGetInternalformativ = nativecast(:(GLenum $target, GLenum $internalformat, GLenum $pname, GLsizei $count, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetInternalformativ')) or return False;
	&glGetInvariantBooleanvEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLboolean] $data), SDL_GL_GetProcAddress('glGetInvariantBooleanvEXT')) or return False;
	&glGetInvariantFloatvEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetInvariantFloatvEXT')) or return False;
	&glGetInvariantIntegervEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLint] $data), SDL_GL_GetProcAddress('glGetInvariantIntegervEXT')) or return False;
	&glGetLightfv = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetLightfv')) or return False;
	&glGetLightiv = nativecast(:(GLenum $light, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetLightiv')) or return False;
	&glGetLightxOES = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetLightxOES')) or return False;
	&glGetLightxv = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetLightxv')) or return False;
	&glGetLightxvOES = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetLightxvOES')) or return False;
	&glGetListParameterfvSGIX = nativecast(:(GLuint $list, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetListParameterfvSGIX')) or return False;
	&glGetListParameterivSGIX = nativecast(:(GLuint $list, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetListParameterivSGIX')) or return False;
	&glGetLocalConstantBooleanvEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLboolean] $data), SDL_GL_GetProcAddress('glGetLocalConstantBooleanvEXT')) or return False;
	&glGetLocalConstantFloatvEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetLocalConstantFloatvEXT')) or return False;
	&glGetLocalConstantIntegervEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLint] $data), SDL_GL_GetProcAddress('glGetLocalConstantIntegervEXT')) or return False;
	&glGetMapAttribParameterfvNV = nativecast(:(GLenum $target, GLuint $index, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMapAttribParameterfvNV')) or return False;
	&glGetMapAttribParameterivNV = nativecast(:(GLenum $target, GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMapAttribParameterivNV')) or return False;
	&glGetMapControlPointsNV = nativecast(:(GLenum $target, GLuint $index, GLenum $type, GLsizei $ustride, GLsizei $vstride, GLboolean $packed, Pointer $points), SDL_GL_GetProcAddress('glGetMapControlPointsNV')) or return False;
	&glGetMapParameterfvNV = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMapParameterfvNV')) or return False;
	&glGetMapParameterivNV = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMapParameterivNV')) or return False;
	&glGetMapdv = nativecast(:(GLenum $target, GLenum $query, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glGetMapdv')) or return False;
	&glGetMapfv = nativecast(:(GLenum $target, GLenum $query, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glGetMapfv')) or return False;
	&glGetMapiv = nativecast(:(GLenum $target, GLenum $query, CArray[GLint] $v), SDL_GL_GetProcAddress('glGetMapiv')) or return False;
	&glGetMapxvOES = nativecast(:(GLenum $target, GLenum $query, CArray[GLfixed] $v), SDL_GL_GetProcAddress('glGetMapxvOES')) or return False;
	&glGetMaterialfv = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMaterialfv')) or return False;
	&glGetMaterialiv = nativecast(:(GLenum $face, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMaterialiv')) or return False;
	&glGetMaterialxOES = nativecast(:(GLenum $face, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glGetMaterialxOES')) or return False;
	&glGetMaterialxv = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetMaterialxv')) or return False;
	&glGetMaterialxvOES = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetMaterialxvOES')) or return False;
	&glGetMemoryObjectDetachedResourcesuivNV = nativecast(:(GLuint $memory, GLenum $pname, GLint $first, GLsizei $count, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetMemoryObjectDetachedResourcesuivNV')) or return False;
	&glGetMemoryObjectParameterivEXT = nativecast(:(GLuint $memoryObject, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMemoryObjectParameterivEXT')) or return False;
	&glGetMinmax = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, Pointer $values), SDL_GL_GetProcAddress('glGetMinmax')) or return False;
	&glGetMinmaxEXT = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, Pointer $values), SDL_GL_GetProcAddress('glGetMinmaxEXT')) or return False;
	&glGetMinmaxParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMinmaxParameterfv')) or return False;
	&glGetMinmaxParameterfvEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMinmaxParameterfvEXT')) or return False;
	&glGetMinmaxParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMinmaxParameteriv')) or return False;
	&glGetMinmaxParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMinmaxParameterivEXT')) or return False;
	&glGetMultiTexEnvfvEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMultiTexEnvfvEXT')) or return False;
	&glGetMultiTexEnvivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMultiTexEnvivEXT')) or return False;
	&glGetMultiTexGendvEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetMultiTexGendvEXT')) or return False;
	&glGetMultiTexGenfvEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMultiTexGenfvEXT')) or return False;
	&glGetMultiTexGenivEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMultiTexGenivEXT')) or return False;
	&glGetMultiTexImageEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glGetMultiTexImageEXT')) or return False;
	&glGetMultiTexLevelParameterfvEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMultiTexLevelParameterfvEXT')) or return False;
	&glGetMultiTexLevelParameterivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMultiTexLevelParameterivEXT')) or return False;
	&glGetMultiTexParameterIivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMultiTexParameterIivEXT')) or return False;
	&glGetMultiTexParameterIuivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetMultiTexParameterIuivEXT')) or return False;
	&glGetMultiTexParameterfvEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetMultiTexParameterfvEXT')) or return False;
	&glGetMultiTexParameterivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetMultiTexParameterivEXT')) or return False;
	&glGetMultisamplefv = nativecast(:(GLenum $pname, GLuint $index, CArray[GLfloat] $val), SDL_GL_GetProcAddress('glGetMultisamplefv')) or return False;
	&glGetMultisamplefvNV = nativecast(:(GLenum $pname, GLuint $index, CArray[GLfloat] $val), SDL_GL_GetProcAddress('glGetMultisamplefvNV')) or return False;
	&glGetNamedBufferParameteri64v = nativecast(:(GLuint $buffer, GLenum $pname, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetNamedBufferParameteri64v')) or return False;
	&glGetNamedBufferParameteriv = nativecast(:(GLuint $buffer, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedBufferParameteriv')) or return False;
	&glGetNamedBufferParameterivEXT = nativecast(:(GLuint $buffer, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedBufferParameterivEXT')) or return False;
	&glGetNamedBufferParameterui64vNV = nativecast(:(GLuint $buffer, GLenum $pname, CArray[GLuint64EXT] $params), SDL_GL_GetProcAddress('glGetNamedBufferParameterui64vNV')) or return False;
	&glGetNamedBufferPointerv = nativecast(:(GLuint $buffer, GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetNamedBufferPointerv')) or return False;
	&glGetNamedBufferPointervEXT = nativecast(:(GLuint $buffer, GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetNamedBufferPointervEXT')) or return False;
	&glGetNamedBufferSubData = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glGetNamedBufferSubData')) or return False;
	&glGetNamedBufferSubDataEXT = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glGetNamedBufferSubDataEXT')) or return False;
	&glGetNamedFramebufferParameterfvAMD = nativecast(:(GLuint $framebuffer, GLenum $pname, GLuint $numsamples, GLuint $pixelindex, GLsizei $size, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glGetNamedFramebufferParameterfvAMD')) or return False;
	&glGetNamedFramebufferAttachmentParameteriv = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedFramebufferAttachmentParameteriv')) or return False;
	&glGetNamedFramebufferAttachmentParameterivEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedFramebufferAttachmentParameterivEXT')) or return False;
	&glGetNamedFramebufferParameteriv = nativecast(:(GLuint $framebuffer, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetNamedFramebufferParameteriv')) or return False;
	&glGetNamedFramebufferParameterivEXT = nativecast(:(GLuint $framebuffer, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedFramebufferParameterivEXT')) or return False;
	&glGetNamedProgramLocalParameterIivEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedProgramLocalParameterIivEXT')) or return False;
	&glGetNamedProgramLocalParameterIuivEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetNamedProgramLocalParameterIuivEXT')) or return False;
	&glGetNamedProgramLocalParameterdvEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetNamedProgramLocalParameterdvEXT')) or return False;
	&glGetNamedProgramLocalParameterfvEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetNamedProgramLocalParameterfvEXT')) or return False;
	&glGetNamedProgramStringEXT = nativecast(:(GLuint $program, GLenum $target, GLenum $pname, Pointer $string), SDL_GL_GetProcAddress('glGetNamedProgramStringEXT')) or return False;
	&glGetNamedProgramivEXT = nativecast(:(GLuint $program, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedProgramivEXT')) or return False;
	&glGetNamedRenderbufferParameteriv = nativecast(:(GLuint $renderbuffer, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedRenderbufferParameteriv')) or return False;
	&glGetNamedRenderbufferParameterivEXT = nativecast(:(GLuint $renderbuffer, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedRenderbufferParameterivEXT')) or return False;
	&glGetNamedStringARB = nativecast(:(GLint $namelen, Str $name, GLsizei $bufSize, CArray[GLint] $stringlen, Str $string), SDL_GL_GetProcAddress('glGetNamedStringARB')) or return False;
	&glGetNamedStringivARB = nativecast(:(GLint $namelen, Str $name, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetNamedStringivARB')) or return False;
	&glGetNextPerfQueryIdINTEL = nativecast(:(GLuint $queryId, CArray[GLuint] $nextQueryId), SDL_GL_GetProcAddress('glGetNextPerfQueryIdINTEL')) or return False;
	&glGetObjectBufferfvATI = nativecast(:(GLuint $buffer, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetObjectBufferfvATI')) or return False;
	&glGetObjectBufferivATI = nativecast(:(GLuint $buffer, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetObjectBufferivATI')) or return False;
	&glGetObjectLabel = nativecast(:(GLenum $identifier, GLuint $name, GLsizei $bufSize, CArray[GLsizei] $length, Str $label), SDL_GL_GetProcAddress('glGetObjectLabel')) or return False;
	&glGetObjectLabelEXT = nativecast(:(GLenum $type, GLuint $object, GLsizei $bufSize, CArray[GLsizei] $length, Str $label), SDL_GL_GetProcAddress('glGetObjectLabelEXT')) or return False;
	&glGetObjectLabelKHR = nativecast(:(GLenum $identifier, GLuint $name, GLsizei $bufSize, CArray[GLsizei] $length, Str $label), SDL_GL_GetProcAddress('glGetObjectLabelKHR')) or return False;
	&glGetObjectParameterfvARB = nativecast(:(GLhandleARB $obj, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetObjectParameterfvARB')) or return False;
	&glGetObjectParameterivAPPLE = nativecast(:(GLenum $objectType, GLuint $name, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetObjectParameterivAPPLE')) or return False;
	&glGetObjectParameterivARB = nativecast(:(GLhandleARB $obj, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetObjectParameterivARB')) or return False;
	&glGetObjectPtrLabel = nativecast(:(Pointer $ptr, GLsizei $bufSize, CArray[GLsizei] $length, Str $label), SDL_GL_GetProcAddress('glGetObjectPtrLabel')) or return False;
	&glGetObjectPtrLabelKHR = nativecast(:(Pointer $ptr, GLsizei $bufSize, CArray[GLsizei] $length, Str $label), SDL_GL_GetProcAddress('glGetObjectPtrLabelKHR')) or return False;
	&glGetOcclusionQueryivNV = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetOcclusionQueryivNV')) or return False;
	&glGetOcclusionQueryuivNV = nativecast(:(GLuint $id, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetOcclusionQueryuivNV')) or return False;
	&glGetPathColorGenfvNV = nativecast(:(GLenum $color, GLenum $pname, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glGetPathColorGenfvNV')) or return False;
	&glGetPathColorGenivNV = nativecast(:(GLenum $color, GLenum $pname, CArray[GLint] $value), SDL_GL_GetProcAddress('glGetPathColorGenivNV')) or return False;
	&glGetPathCommandsNV = nativecast(:(GLuint $path, CArray[GLubyte] $commands), SDL_GL_GetProcAddress('glGetPathCommandsNV')) or return False;
	&glGetPathCoordsNV = nativecast(:(GLuint $path, CArray[GLfloat] $coords), SDL_GL_GetProcAddress('glGetPathCoordsNV')) or return False;
	&glGetPathDashArrayNV = nativecast(:(GLuint $path, CArray[GLfloat] $dashArray), SDL_GL_GetProcAddress('glGetPathDashArrayNV')) or return False;
	&glGetPathLengthNV = nativecast(:(GLuint $path, GLsizei $startSegment, GLsizei $numSegments --> GLfloat), SDL_GL_GetProcAddress('glGetPathLengthNV')) or return False;
	&glGetPathMetricRangeNV = nativecast(:(GLbitfield $metricQueryMask, GLuint $firstPathName, GLsizei $numPaths, GLsizei $stride, CArray[GLfloat] $metrics), SDL_GL_GetProcAddress('glGetPathMetricRangeNV')) or return False;
	&glGetPathMetricsNV = nativecast(:(GLbitfield $metricQueryMask, GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLsizei $stride, CArray[GLfloat] $metrics), SDL_GL_GetProcAddress('glGetPathMetricsNV')) or return False;
	&glGetPathParameterfvNV = nativecast(:(GLuint $path, GLenum $pname, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glGetPathParameterfvNV')) or return False;
	&glGetPathParameterivNV = nativecast(:(GLuint $path, GLenum $pname, CArray[GLint] $value), SDL_GL_GetProcAddress('glGetPathParameterivNV')) or return False;
	&glGetPathSpacingNV = nativecast(:(GLenum $pathListMode, GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLfloat $advanceScale, GLfloat $kerningScale, GLenum $transformType, CArray[GLfloat] $returnedSpacing), SDL_GL_GetProcAddress('glGetPathSpacingNV')) or return False;
	&glGetPathTexGenfvNV = nativecast(:(GLenum $texCoordSet, GLenum $pname, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glGetPathTexGenfvNV')) or return False;
	&glGetPathTexGenivNV = nativecast(:(GLenum $texCoordSet, GLenum $pname, CArray[GLint] $value), SDL_GL_GetProcAddress('glGetPathTexGenivNV')) or return False;
	&glGetPerfCounterInfoINTEL = nativecast(:(GLuint $queryId, GLuint $counterId, GLuint $counterNameLength, Str $counterName, GLuint $counterDescLength, Str $counterDesc, CArray[GLuint] $counterOffset, CArray[GLuint] $counterDataSize, CArray[GLuint] $counterTypeEnum, CArray[GLuint] $counterDataTypeEnum, CArray[GLuint64] $rawCounterMaxValue), SDL_GL_GetProcAddress('glGetPerfCounterInfoINTEL')) or return False;
	&glGetPerfMonitorCounterDataAMD = nativecast(:(GLuint $monitor, GLenum $pname, GLsizei $dataSize, CArray[GLuint] $data, CArray[GLint] $bytesWritten), SDL_GL_GetProcAddress('glGetPerfMonitorCounterDataAMD')) or return False;
	&glGetPerfMonitorCounterInfoAMD = nativecast(:(GLuint $group, GLuint $counter, GLenum $pname, Pointer $data), SDL_GL_GetProcAddress('glGetPerfMonitorCounterInfoAMD')) or return False;
	&glGetPerfMonitorCounterStringAMD = nativecast(:(GLuint $group, GLuint $counter, GLsizei $bufSize, CArray[GLsizei] $length, Str $counterString), SDL_GL_GetProcAddress('glGetPerfMonitorCounterStringAMD')) or return False;
	&glGetPerfMonitorCountersAMD = nativecast(:(GLuint $group, CArray[GLint] $numCounters, CArray[GLint] $maxActiveCounters, GLsizei $counterSize, CArray[GLuint] $counters), SDL_GL_GetProcAddress('glGetPerfMonitorCountersAMD')) or return False;
	&glGetPerfMonitorGroupStringAMD = nativecast(:(GLuint $group, GLsizei $bufSize, CArray[GLsizei] $length, Str $groupString), SDL_GL_GetProcAddress('glGetPerfMonitorGroupStringAMD')) or return False;
	&glGetPerfMonitorGroupsAMD = nativecast(:(CArray[GLint] $numGroups, GLsizei $groupsSize, CArray[GLuint] $groups), SDL_GL_GetProcAddress('glGetPerfMonitorGroupsAMD')) or return False;
	&glGetPerfQueryDataINTEL = nativecast(:(GLuint $queryHandle, GLuint $flags, GLsizei $dataSize, Pointer $data, CArray[GLuint] $bytesWritten), SDL_GL_GetProcAddress('glGetPerfQueryDataINTEL')) or return False;
	&glGetPerfQueryIdByNameINTEL = nativecast(:(Str $queryName, CArray[GLuint] $queryId), SDL_GL_GetProcAddress('glGetPerfQueryIdByNameINTEL')) or return False;
	&glGetPerfQueryInfoINTEL = nativecast(:(GLuint $queryId, GLuint $queryNameLength, Str $queryName, CArray[GLuint] $dataSize, CArray[GLuint] $noCounters, CArray[GLuint] $noInstances, CArray[GLuint] $capsMask), SDL_GL_GetProcAddress('glGetPerfQueryInfoINTEL')) or return False;
	&glGetPixelMapfv = nativecast(:(GLenum $map, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glGetPixelMapfv')) or return False;
	&glGetPixelMapuiv = nativecast(:(GLenum $map, CArray[GLuint] $values), SDL_GL_GetProcAddress('glGetPixelMapuiv')) or return False;
	&glGetPixelMapusv = nativecast(:(GLenum $map, CArray[GLushort] $values), SDL_GL_GetProcAddress('glGetPixelMapusv')) or return False;
	&glGetPixelMapxv = nativecast(:(GLenum $map, GLint $size, CArray[GLfixed] $values), SDL_GL_GetProcAddress('glGetPixelMapxv')) or return False;
	&glGetPixelTexGenParameterfvSGIS = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetPixelTexGenParameterfvSGIS')) or return False;
	&glGetPixelTexGenParameterivSGIS = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetPixelTexGenParameterivSGIS')) or return False;
	&glGetPixelTransformParameterfvEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetPixelTransformParameterfvEXT')) or return False;
	&glGetPixelTransformParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetPixelTransformParameterivEXT')) or return False;
	&glGetPointerIndexedvEXT = nativecast(:(GLenum $target, GLuint $index, CArray[Pointer] $data), SDL_GL_GetProcAddress('glGetPointerIndexedvEXT')) or return False;
	&glGetPointeri_vEXT = nativecast(:(GLenum $pname, GLuint $index, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetPointeri_vEXT')) or return False;
	&glGetPointerv = nativecast(:(GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetPointerv')) or return False;
	&glGetPointervEXT = nativecast(:(GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetPointervEXT')) or return False;
	&glGetPointervKHR = nativecast(:(GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetPointervKHR')) or return False;
	&glGetPolygonStipple = nativecast(:(CArray[GLubyte] $mask), SDL_GL_GetProcAddress('glGetPolygonStipple')) or return False;
	&glGetProgramBinary = nativecast(:(GLuint $program, GLsizei $bufSize, CArray[GLsizei] $length, CArray[GLenum] $binaryFormat, Pointer $binary), SDL_GL_GetProcAddress('glGetProgramBinary')) or return False;
	&glGetProgramBinaryOES = nativecast(:(GLuint $program, GLsizei $bufSize, CArray[GLsizei] $length, CArray[GLenum] $binaryFormat, Pointer $binary), SDL_GL_GetProcAddress('glGetProgramBinaryOES')) or return False;
	&glGetProgramEnvParameterIivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramEnvParameterIivNV')) or return False;
	&glGetProgramEnvParameterIuivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetProgramEnvParameterIuivNV')) or return False;
	&glGetProgramEnvParameterdvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetProgramEnvParameterdvARB')) or return False;
	&glGetProgramEnvParameterfvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetProgramEnvParameterfvARB')) or return False;
	&glGetProgramInfoLog = nativecast(:(GLuint $program, GLsizei $bufSize, CArray[GLsizei] $length, Str $infoLog), SDL_GL_GetProcAddress('glGetProgramInfoLog')) or return False;
	&glGetProgramInterfaceiv = nativecast(:(GLuint $program, GLenum $programInterface, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramInterfaceiv')) or return False;
	&glGetProgramLocalParameterIivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramLocalParameterIivNV')) or return False;
	&glGetProgramLocalParameterIuivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetProgramLocalParameterIuivNV')) or return False;
	&glGetProgramLocalParameterdvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetProgramLocalParameterdvARB')) or return False;
	&glGetProgramLocalParameterfvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetProgramLocalParameterfvARB')) or return False;
	&glGetProgramNamedParameterdvNV = nativecast(:(GLuint $id, GLsizei $len, CArray[GLubyte] $name, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetProgramNamedParameterdvNV')) or return False;
	&glGetProgramNamedParameterfvNV = nativecast(:(GLuint $id, GLsizei $len, CArray[GLubyte] $name, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetProgramNamedParameterfvNV')) or return False;
	&glGetProgramParameterdvNV = nativecast(:(GLenum $target, GLuint $index, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetProgramParameterdvNV')) or return False;
	&glGetProgramParameterfvNV = nativecast(:(GLenum $target, GLuint $index, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetProgramParameterfvNV')) or return False;
	&glGetProgramPipelineInfoLog = nativecast(:(GLuint $pipeline, GLsizei $bufSize, CArray[GLsizei] $length, Str $infoLog), SDL_GL_GetProcAddress('glGetProgramPipelineInfoLog')) or return False;
	&glGetProgramPipelineInfoLogEXT = nativecast(:(GLuint $pipeline, GLsizei $bufSize, CArray[GLsizei] $length, Str $infoLog), SDL_GL_GetProcAddress('glGetProgramPipelineInfoLogEXT')) or return False;
	&glGetProgramPipelineiv = nativecast(:(GLuint $pipeline, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramPipelineiv')) or return False;
	&glGetProgramPipelineivEXT = nativecast(:(GLuint $pipeline, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramPipelineivEXT')) or return False;
	&glGetProgramResourceIndex = nativecast(:(GLuint $program, GLenum $programInterface, Str $name --> GLuint), SDL_GL_GetProcAddress('glGetProgramResourceIndex')) or return False;
	&glGetProgramResourceLocation = nativecast(:(GLuint $program, GLenum $programInterface, Str $name --> GLint), SDL_GL_GetProcAddress('glGetProgramResourceLocation')) or return False;
	&glGetProgramResourceLocationIndex = nativecast(:(GLuint $program, GLenum $programInterface, Str $name --> GLint), SDL_GL_GetProcAddress('glGetProgramResourceLocationIndex')) or return False;
	&glGetProgramResourceLocationIndexEXT = nativecast(:(GLuint $program, GLenum $programInterface, Str $name --> GLint), SDL_GL_GetProcAddress('glGetProgramResourceLocationIndexEXT')) or return False;
	&glGetProgramResourceName = nativecast(:(GLuint $program, GLenum $programInterface, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, Str $name), SDL_GL_GetProcAddress('glGetProgramResourceName')) or return False;
	&glGetProgramResourcefvNV = nativecast(:(GLuint $program, GLenum $programInterface, GLuint $index, GLsizei $propCount, CArray[GLenum] $props, GLsizei $count, CArray[GLsizei] $length, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetProgramResourcefvNV')) or return False;
	&glGetProgramResourceiv = nativecast(:(GLuint $program, GLenum $programInterface, GLuint $index, GLsizei $propCount, CArray[GLenum] $props, GLsizei $count, CArray[GLsizei] $length, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramResourceiv')) or return False;
	&glGetProgramStageiv = nativecast(:(GLuint $program, GLenum $shadertype, GLenum $pname, CArray[GLint] $values), SDL_GL_GetProcAddress('glGetProgramStageiv')) or return False;
	&glGetProgramStringARB = nativecast(:(GLenum $target, GLenum $pname, Pointer $string), SDL_GL_GetProcAddress('glGetProgramStringARB')) or return False;
	&glGetProgramStringNV = nativecast(:(GLuint $id, GLenum $pname, CArray[GLubyte] $program), SDL_GL_GetProcAddress('glGetProgramStringNV')) or return False;
	&glGetProgramSubroutineParameteruivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLuint] $param), SDL_GL_GetProcAddress('glGetProgramSubroutineParameteruivNV')) or return False;
	&glGetProgramiv = nativecast(:(GLuint $program, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramiv')) or return False;
	&glGetProgramivARB = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramivARB')) or return False;
	&glGetProgramivNV = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetProgramivNV')) or return False;
	&glGetQueryBufferObjecti64v = nativecast(:(GLuint $id, GLuint $buffer, GLenum $pname, GLintptr $offset), SDL_GL_GetProcAddress('glGetQueryBufferObjecti64v')) or return False;
	&glGetQueryBufferObjectiv = nativecast(:(GLuint $id, GLuint $buffer, GLenum $pname, GLintptr $offset), SDL_GL_GetProcAddress('glGetQueryBufferObjectiv')) or return False;
	&glGetQueryBufferObjectui64v = nativecast(:(GLuint $id, GLuint $buffer, GLenum $pname, GLintptr $offset), SDL_GL_GetProcAddress('glGetQueryBufferObjectui64v')) or return False;
	&glGetQueryBufferObjectuiv = nativecast(:(GLuint $id, GLuint $buffer, GLenum $pname, GLintptr $offset), SDL_GL_GetProcAddress('glGetQueryBufferObjectuiv')) or return False;
	&glGetQueryIndexediv = nativecast(:(GLenum $target, GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetQueryIndexediv')) or return False;
	&glGetQueryObjecti64v = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetQueryObjecti64v')) or return False;
	&glGetQueryObjecti64vEXT = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetQueryObjecti64vEXT')) or return False;
	&glGetQueryObjectiv = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetQueryObjectiv')) or return False;
	&glGetQueryObjectivARB = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetQueryObjectivARB')) or return False;
	&glGetQueryObjectivEXT = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetQueryObjectivEXT')) or return False;
	&glGetQueryObjectui64v = nativecast(:(GLuint $id, GLenum $pname, CArray[GLuint64] $params), SDL_GL_GetProcAddress('glGetQueryObjectui64v')) or return False;
	&glGetQueryObjectui64vEXT = nativecast(:(GLuint $id, GLenum $pname, CArray[GLuint64] $params), SDL_GL_GetProcAddress('glGetQueryObjectui64vEXT')) or return False;
	&glGetQueryObjectuiv = nativecast(:(GLuint $id, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetQueryObjectuiv')) or return False;
	&glGetQueryObjectuivARB = nativecast(:(GLuint $id, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetQueryObjectuivARB')) or return False;
	&glGetQueryObjectuivEXT = nativecast(:(GLuint $id, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetQueryObjectuivEXT')) or return False;
	&glGetQueryiv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetQueryiv')) or return False;
	&glGetQueryivARB = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetQueryivARB')) or return False;
	&glGetQueryivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetQueryivEXT')) or return False;
	&glGetRenderbufferParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetRenderbufferParameteriv')) or return False;
	&glGetRenderbufferParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetRenderbufferParameterivEXT')) or return False;
	&glGetRenderbufferParameterivOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetRenderbufferParameterivOES')) or return False;
	&glGetSamplerParameterIiv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetSamplerParameterIiv')) or return False;
	&glGetSamplerParameterIivEXT = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetSamplerParameterIivEXT')) or return False;
	&glGetSamplerParameterIivOES = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetSamplerParameterIivOES')) or return False;
	&glGetSamplerParameterIuiv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetSamplerParameterIuiv')) or return False;
	&glGetSamplerParameterIuivEXT = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetSamplerParameterIuivEXT')) or return False;
	&glGetSamplerParameterIuivOES = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetSamplerParameterIuivOES')) or return False;
	&glGetSamplerParameterfv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetSamplerParameterfv')) or return False;
	&glGetSamplerParameteriv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetSamplerParameteriv')) or return False;
	&glGetSemaphoreParameterivNV = nativecast(:(GLuint $semaphore, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetSemaphoreParameterivNV')) or return False;
	&glGetSemaphoreParameterui64vEXT = nativecast(:(GLuint $semaphore, GLenum $pname, CArray[GLuint64] $params), SDL_GL_GetProcAddress('glGetSemaphoreParameterui64vEXT')) or return False;
	&glGetSeparableFilter = nativecast(:(GLenum $target, GLenum $format, GLenum $type, Pointer $row, Pointer $column, Pointer $span), SDL_GL_GetProcAddress('glGetSeparableFilter')) or return False;
	&glGetSeparableFilterEXT = nativecast(:(GLenum $target, GLenum $format, GLenum $type, Pointer $row, Pointer $column, Pointer $span), SDL_GL_GetProcAddress('glGetSeparableFilterEXT')) or return False;
	&glGetShaderInfoLog = nativecast(:(GLuint $shader, GLsizei $bufSize, CArray[GLsizei] $length, Str $infoLog), SDL_GL_GetProcAddress('glGetShaderInfoLog')) or return False;
	&glGetShaderPrecisionFormat = nativecast(:(GLenum $shadertype, GLenum $precisiontype, CArray[GLint] $range, CArray[GLint] $precision), SDL_GL_GetProcAddress('glGetShaderPrecisionFormat')) or return False;
	&glGetShaderSource = nativecast(:(GLuint $shader, GLsizei $bufSize, CArray[GLsizei] $length, Str $source), SDL_GL_GetProcAddress('glGetShaderSource')) or return False;
	&glGetShaderSourceARB = nativecast(:(GLhandleARB $obj, GLsizei $maxLength, CArray[GLsizei] $length, Str $source), SDL_GL_GetProcAddress('glGetShaderSourceARB')) or return False;
	&glGetShaderiv = nativecast(:(GLuint $shader, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetShaderiv')) or return False;
	&glGetShadingRateImagePaletteNV = nativecast(:(GLuint $viewport, GLuint $entry, CArray[GLenum] $rate), SDL_GL_GetProcAddress('glGetShadingRateImagePaletteNV')) or return False;
	&glGetShadingRateSampleLocationivNV = nativecast(:(GLenum $rate, GLuint $samples, GLuint $index, CArray[GLint] $location), SDL_GL_GetProcAddress('glGetShadingRateSampleLocationivNV')) or return False;
	&glGetSharpenTexFuncSGIS = nativecast(:(GLenum $target, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glGetSharpenTexFuncSGIS')) or return False;
	&glGetStageIndexNV = nativecast(:(GLenum $shadertype --> GLushort), SDL_GL_GetProcAddress('glGetStageIndexNV')) or return False;
	&glGetString = nativecast(:(GLenum $name --> Str), SDL_GL_GetProcAddress('glGetString')) or return False;
	&glGetStringi = nativecast(:(GLenum $name, GLuint $index --> Str), SDL_GL_GetProcAddress('glGetStringi')) or return False;
	&glGetSubroutineIndex = nativecast(:(GLuint $program, GLenum $shadertype, Str $name --> GLuint), SDL_GL_GetProcAddress('glGetSubroutineIndex')) or return False;
	&glGetSubroutineUniformLocation = nativecast(:(GLuint $program, GLenum $shadertype, Str $name --> GLint), SDL_GL_GetProcAddress('glGetSubroutineUniformLocation')) or return False;
	&glGetSynciv = nativecast(:(GLsync $sync, GLenum $pname, GLsizei $count, CArray[GLsizei] $length, CArray[GLint] $values), SDL_GL_GetProcAddress('glGetSynciv')) or return False;
	&glGetSyncivAPPLE = nativecast(:(GLsync $sync, GLenum $pname, GLsizei $count, CArray[GLsizei] $length, CArray[GLint] $values), SDL_GL_GetProcAddress('glGetSyncivAPPLE')) or return False;
	&glGetTexBumpParameterfvATI = nativecast(:(GLenum $pname, CArray[GLfloat] $param), SDL_GL_GetProcAddress('glGetTexBumpParameterfvATI')) or return False;
	&glGetTexBumpParameterivATI = nativecast(:(GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetTexBumpParameterivATI')) or return False;
	&glGetTexEnvfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTexEnvfv')) or return False;
	&glGetTexEnviv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexEnviv')) or return False;
	&glGetTexEnvxv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetTexEnvxv')) or return False;
	&glGetTexEnvxvOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetTexEnvxvOES')) or return False;
	&glGetTexFilterFuncSGIS = nativecast(:(GLenum $target, GLenum $filter, CArray[GLfloat] $weights), SDL_GL_GetProcAddress('glGetTexFilterFuncSGIS')) or return False;
	&glGetTexGendv = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetTexGendv')) or return False;
	&glGetTexGenfv = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTexGenfv')) or return False;
	&glGetTexGenfvOES = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTexGenfvOES')) or return False;
	&glGetTexGeniv = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexGeniv')) or return False;
	&glGetTexGenivOES = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexGenivOES')) or return False;
	&glGetTexGenxvOES = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetTexGenxvOES')) or return False;
	&glGetTexImage = nativecast(:(GLenum $target, GLint $level, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glGetTexImage')) or return False;
	&glGetTexLevelParameterfv = nativecast(:(GLenum $target, GLint $level, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTexLevelParameterfv')) or return False;
	&glGetTexLevelParameteriv = nativecast(:(GLenum $target, GLint $level, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexLevelParameteriv')) or return False;
	&glGetTexLevelParameterxvOES = nativecast(:(GLenum $target, GLint $level, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetTexLevelParameterxvOES')) or return False;
	&glGetTexParameterIiv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexParameterIiv')) or return False;
	&glGetTexParameterIivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexParameterIivEXT')) or return False;
	&glGetTexParameterIivOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexParameterIivOES')) or return False;
	&glGetTexParameterIuiv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetTexParameterIuiv')) or return False;
	&glGetTexParameterIuivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetTexParameterIuivEXT')) or return False;
	&glGetTexParameterIuivOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetTexParameterIuivOES')) or return False;
	&glGetTexParameterPointervAPPLE = nativecast(:(GLenum $target, GLenum $pname, CArray[Pointer] $params), SDL_GL_GetProcAddress('glGetTexParameterPointervAPPLE')) or return False;
	&glGetTexParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTexParameterfv')) or return False;
	&glGetTexParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTexParameteriv')) or return False;
	&glGetTexParameterxv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetTexParameterxv')) or return False;
	&glGetTexParameterxvOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glGetTexParameterxvOES')) or return False;
	&glGetTextureHandleARB = nativecast(:(GLuint $texture --> GLuint64), SDL_GL_GetProcAddress('glGetTextureHandleARB')) or return False;
	&glGetTextureHandleIMG = nativecast(:(GLuint $texture --> GLuint64), SDL_GL_GetProcAddress('glGetTextureHandleIMG')) or return False;
	&glGetTextureHandleNV = nativecast(:(GLuint $texture --> GLuint64), SDL_GL_GetProcAddress('glGetTextureHandleNV')) or return False;
	&glGetTextureImage = nativecast(:(GLuint $texture, GLint $level, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $pixels), SDL_GL_GetProcAddress('glGetTextureImage')) or return False;
	&glGetTextureImageEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glGetTextureImageEXT')) or return False;
	&glGetTextureLevelParameterfv = nativecast(:(GLuint $texture, GLint $level, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTextureLevelParameterfv')) or return False;
	&glGetTextureLevelParameterfvEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTextureLevelParameterfvEXT')) or return False;
	&glGetTextureLevelParameteriv = nativecast(:(GLuint $texture, GLint $level, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTextureLevelParameteriv')) or return False;
	&glGetTextureLevelParameterivEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTextureLevelParameterivEXT')) or return False;
	&glGetTextureParameterIiv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTextureParameterIiv')) or return False;
	&glGetTextureParameterIivEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTextureParameterIivEXT')) or return False;
	&glGetTextureParameterIuiv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetTextureParameterIuiv')) or return False;
	&glGetTextureParameterIuivEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetTextureParameterIuivEXT')) or return False;
	&glGetTextureParameterfv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTextureParameterfv')) or return False;
	&glGetTextureParameterfvEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetTextureParameterfvEXT')) or return False;
	&glGetTextureParameteriv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTextureParameteriv')) or return False;
	&glGetTextureParameterivEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTextureParameterivEXT')) or return False;
	&glGetTextureSamplerHandleARB = nativecast(:(GLuint $texture, GLuint $sampler --> GLuint64), SDL_GL_GetProcAddress('glGetTextureSamplerHandleARB')) or return False;
	&glGetTextureSamplerHandleIMG = nativecast(:(GLuint $texture, GLuint $sampler --> GLuint64), SDL_GL_GetProcAddress('glGetTextureSamplerHandleIMG')) or return False;
	&glGetTextureSamplerHandleNV = nativecast(:(GLuint $texture, GLuint $sampler --> GLuint64), SDL_GL_GetProcAddress('glGetTextureSamplerHandleNV')) or return False;
	&glGetTextureSubImage = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $pixels), SDL_GL_GetProcAddress('glGetTextureSubImage')) or return False;
	&glGetTrackMatrixivNV = nativecast(:(GLenum $target, GLuint $address, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetTrackMatrixivNV')) or return False;
	&glGetTransformFeedbackVarying = nativecast(:(GLuint $program, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, CArray[GLsizei] $size, CArray[GLenum] $type, Str $name), SDL_GL_GetProcAddress('glGetTransformFeedbackVarying')) or return False;
	&glGetTransformFeedbackVaryingEXT = nativecast(:(GLuint $program, GLuint $index, GLsizei $bufSize, CArray[GLsizei] $length, CArray[GLsizei] $size, CArray[GLenum] $type, Str $name), SDL_GL_GetProcAddress('glGetTransformFeedbackVaryingEXT')) or return False;
	&glGetTransformFeedbackVaryingNV = nativecast(:(GLuint $program, GLuint $index, CArray[GLint] $location), SDL_GL_GetProcAddress('glGetTransformFeedbackVaryingNV')) or return False;
	&glGetTransformFeedbacki64_v = nativecast(:(GLuint $xfb, GLenum $pname, GLuint $index, CArray[GLint64] $param), SDL_GL_GetProcAddress('glGetTransformFeedbacki64_v')) or return False;
	&glGetTransformFeedbacki_v = nativecast(:(GLuint $xfb, GLenum $pname, GLuint $index, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetTransformFeedbacki_v')) or return False;
	&glGetTransformFeedbackiv = nativecast(:(GLuint $xfb, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetTransformFeedbackiv')) or return False;
	&glGetTranslatedShaderSourceANGLE = nativecast(:(GLuint $shader, GLsizei $bufSize, CArray[GLsizei] $length, Str $source), SDL_GL_GetProcAddress('glGetTranslatedShaderSourceANGLE')) or return False;
	&glGetUniformBlockIndex = nativecast(:(GLuint $program, Str $uniformBlockName --> GLuint), SDL_GL_GetProcAddress('glGetUniformBlockIndex')) or return False;
	&glGetUniformBufferSizeEXT = nativecast(:(GLuint $program, GLint $location --> GLint), SDL_GL_GetProcAddress('glGetUniformBufferSizeEXT')) or return False;
	&glGetUniformIndices = nativecast(:(GLuint $program, GLsizei $uniformCount, CArray[Str] $uniformNames, CArray[GLuint] $uniformIndices), SDL_GL_GetProcAddress('glGetUniformIndices')) or return False;
	&glGetUniformLocation = nativecast(:(GLuint $program, Str $name --> GLint), SDL_GL_GetProcAddress('glGetUniformLocation')) or return False;
	&glGetUniformLocationARB = nativecast(:(GLhandleARB $programObj, Str $name --> GLint), SDL_GL_GetProcAddress('glGetUniformLocationARB')) or return False;
	&glGetUniformOffsetEXT = nativecast(:(GLuint $program, GLint $location --> GLintptr), SDL_GL_GetProcAddress('glGetUniformOffsetEXT')) or return False;
	&glGetUniformSubroutineuiv = nativecast(:(GLenum $shadertype, GLint $location, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetUniformSubroutineuiv')) or return False;
	&glGetUniformdv = nativecast(:(GLuint $program, GLint $location, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetUniformdv')) or return False;
	&glGetUniformfv = nativecast(:(GLuint $program, GLint $location, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetUniformfv')) or return False;
	&glGetUniformfvARB = nativecast(:(GLhandleARB $programObj, GLint $location, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetUniformfvARB')) or return False;
	&glGetUniformi64vARB = nativecast(:(GLuint $program, GLint $location, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetUniformi64vARB')) or return False;
	&glGetUniformi64vNV = nativecast(:(GLuint $program, GLint $location, CArray[GLint64EXT] $params), SDL_GL_GetProcAddress('glGetUniformi64vNV')) or return False;
	&glGetUniformiv = nativecast(:(GLuint $program, GLint $location, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetUniformiv')) or return False;
	&glGetUniformivARB = nativecast(:(GLhandleARB $programObj, GLint $location, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetUniformivARB')) or return False;
	&glGetUniformui64vARB = nativecast(:(GLuint $program, GLint $location, CArray[GLuint64] $params), SDL_GL_GetProcAddress('glGetUniformui64vARB')) or return False;
	&glGetUniformui64vNV = nativecast(:(GLuint $program, GLint $location, CArray[GLuint64EXT] $params), SDL_GL_GetProcAddress('glGetUniformui64vNV')) or return False;
	&glGetUniformuiv = nativecast(:(GLuint $program, GLint $location, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetUniformuiv')) or return False;
	&glGetUniformuivEXT = nativecast(:(GLuint $program, GLint $location, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetUniformuivEXT')) or return False;
	&glGetUnsignedBytevEXT = nativecast(:(GLenum $pname, CArray[GLubyte] $data), SDL_GL_GetProcAddress('glGetUnsignedBytevEXT')) or return False;
	&glGetUnsignedBytei_vEXT = nativecast(:(GLenum $target, GLuint $index, CArray[GLubyte] $data), SDL_GL_GetProcAddress('glGetUnsignedBytei_vEXT')) or return False;
	&glGetVariantArrayObjectfvATI = nativecast(:(GLuint $id, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetVariantArrayObjectfvATI')) or return False;
	&glGetVariantArrayObjectivATI = nativecast(:(GLuint $id, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVariantArrayObjectivATI')) or return False;
	&glGetVariantBooleanvEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLboolean] $data), SDL_GL_GetProcAddress('glGetVariantBooleanvEXT')) or return False;
	&glGetVariantFloatvEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLfloat] $data), SDL_GL_GetProcAddress('glGetVariantFloatvEXT')) or return False;
	&glGetVariantIntegervEXT = nativecast(:(GLuint $id, GLenum $value, CArray[GLint] $data), SDL_GL_GetProcAddress('glGetVariantIntegervEXT')) or return False;
	&glGetVariantPointervEXT = nativecast(:(GLuint $id, GLenum $value, CArray[Pointer] $data), SDL_GL_GetProcAddress('glGetVariantPointervEXT')) or return False;
	&glGetVaryingLocationNV = nativecast(:(GLuint $program, Str $name --> GLint), SDL_GL_GetProcAddress('glGetVaryingLocationNV')) or return False;
	&glGetVertexArrayIndexed64iv = nativecast(:(GLuint $vaobj, GLuint $index, GLenum $pname, CArray[GLint64] $param), SDL_GL_GetProcAddress('glGetVertexArrayIndexed64iv')) or return False;
	&glGetVertexArrayIndexediv = nativecast(:(GLuint $vaobj, GLuint $index, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetVertexArrayIndexediv')) or return False;
	&glGetVertexArrayIntegeri_vEXT = nativecast(:(GLuint $vaobj, GLuint $index, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetVertexArrayIntegeri_vEXT')) or return False;
	&glGetVertexArrayIntegervEXT = nativecast(:(GLuint $vaobj, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetVertexArrayIntegervEXT')) or return False;
	&glGetVertexArrayPointeri_vEXT = nativecast(:(GLuint $vaobj, GLuint $index, GLenum $pname, CArray[Pointer] $param), SDL_GL_GetProcAddress('glGetVertexArrayPointeri_vEXT')) or return False;
	&glGetVertexArrayPointervEXT = nativecast(:(GLuint $vaobj, GLenum $pname, CArray[Pointer] $param), SDL_GL_GetProcAddress('glGetVertexArrayPointervEXT')) or return False;
	&glGetVertexArrayiv = nativecast(:(GLuint $vaobj, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glGetVertexArrayiv')) or return False;
	&glGetVertexAttribArrayObjectfvATI = nativecast(:(GLuint $index, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetVertexAttribArrayObjectfvATI')) or return False;
	&glGetVertexAttribArrayObjectivATI = nativecast(:(GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVertexAttribArrayObjectivATI')) or return False;
	&glGetVertexAttribIiv = nativecast(:(GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVertexAttribIiv')) or return False;
	&glGetVertexAttribIivEXT = nativecast(:(GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVertexAttribIivEXT')) or return False;
	&glGetVertexAttribIuiv = nativecast(:(GLuint $index, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetVertexAttribIuiv')) or return False;
	&glGetVertexAttribIuivEXT = nativecast(:(GLuint $index, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetVertexAttribIuivEXT')) or return False;
	&glGetVertexAttribLdv = nativecast(:(GLuint $index, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetVertexAttribLdv')) or return False;
	&glGetVertexAttribLdvEXT = nativecast(:(GLuint $index, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetVertexAttribLdvEXT')) or return False;
	&glGetVertexAttribLi64vNV = nativecast(:(GLuint $index, GLenum $pname, CArray[GLint64EXT] $params), SDL_GL_GetProcAddress('glGetVertexAttribLi64vNV')) or return False;
	&glGetVertexAttribLui64vARB = nativecast(:(GLuint $index, GLenum $pname, CArray[GLuint64EXT] $params), SDL_GL_GetProcAddress('glGetVertexAttribLui64vARB')) or return False;
	&glGetVertexAttribLui64vNV = nativecast(:(GLuint $index, GLenum $pname, CArray[GLuint64EXT] $params), SDL_GL_GetProcAddress('glGetVertexAttribLui64vNV')) or return False;
	&glGetVertexAttribPointerv = nativecast(:(GLuint $index, GLenum $pname, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glGetVertexAttribPointerv')) or return False;
	&glGetVertexAttribPointervARB = nativecast(:(GLuint $index, GLenum $pname, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glGetVertexAttribPointervARB')) or return False;
	&glGetVertexAttribPointervNV = nativecast(:(GLuint $index, GLenum $pname, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glGetVertexAttribPointervNV')) or return False;
	&glGetVertexAttribdv = nativecast(:(GLuint $index, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetVertexAttribdv')) or return False;
	&glGetVertexAttribdvARB = nativecast(:(GLuint $index, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetVertexAttribdvARB')) or return False;
	&glGetVertexAttribdvNV = nativecast(:(GLuint $index, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetVertexAttribdvNV')) or return False;
	&glGetVertexAttribfv = nativecast(:(GLuint $index, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetVertexAttribfv')) or return False;
	&glGetVertexAttribfvARB = nativecast(:(GLuint $index, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetVertexAttribfvARB')) or return False;
	&glGetVertexAttribfvNV = nativecast(:(GLuint $index, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetVertexAttribfvNV')) or return False;
	&glGetVertexAttribiv = nativecast(:(GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVertexAttribiv')) or return False;
	&glGetVertexAttribivARB = nativecast(:(GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVertexAttribivARB')) or return False;
	&glGetVertexAttribivNV = nativecast(:(GLuint $index, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVertexAttribivNV')) or return False;
	&glGetVideoCaptureStreamdvNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetVideoCaptureStreamdvNV')) or return False;
	&glGetVideoCaptureStreamfvNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetVideoCaptureStreamfvNV')) or return False;
	&glGetVideoCaptureStreamivNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVideoCaptureStreamivNV')) or return False;
	&glGetVideoCaptureivNV = nativecast(:(GLuint $video_capture_slot, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVideoCaptureivNV')) or return False;
	&glGetVideoi64vNV = nativecast(:(GLuint $video_slot, GLenum $pname, CArray[GLint64EXT] $params), SDL_GL_GetProcAddress('glGetVideoi64vNV')) or return False;
	&glGetVideoivNV = nativecast(:(GLuint $video_slot, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetVideoivNV')) or return False;
	&glGetVideoui64vNV = nativecast(:(GLuint $video_slot, GLenum $pname, CArray[GLuint64EXT] $params), SDL_GL_GetProcAddress('glGetVideoui64vNV')) or return False;
	&glGetVideouivNV = nativecast(:(GLuint $video_slot, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetVideouivNV')) or return False;
	&glGetnColorTable = nativecast(:(GLenum $target, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $table), SDL_GL_GetProcAddress('glGetnColorTable')) or return False;
	&glGetnColorTableARB = nativecast(:(GLenum $target, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $table), SDL_GL_GetProcAddress('glGetnColorTableARB')) or return False;
	&glGetnCompressedTexImage = nativecast(:(GLenum $target, GLint $lod, GLsizei $bufSize, Pointer $pixels), SDL_GL_GetProcAddress('glGetnCompressedTexImage')) or return False;
	&glGetnCompressedTexImageARB = nativecast(:(GLenum $target, GLint $lod, GLsizei $bufSize, Pointer $img), SDL_GL_GetProcAddress('glGetnCompressedTexImageARB')) or return False;
	&glGetnConvolutionFilter = nativecast(:(GLenum $target, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $image), SDL_GL_GetProcAddress('glGetnConvolutionFilter')) or return False;
	&glGetnConvolutionFilterARB = nativecast(:(GLenum $target, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $image), SDL_GL_GetProcAddress('glGetnConvolutionFilterARB')) or return False;
	&glGetnHistogram = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $values), SDL_GL_GetProcAddress('glGetnHistogram')) or return False;
	&glGetnHistogramARB = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $values), SDL_GL_GetProcAddress('glGetnHistogramARB')) or return False;
	&glGetnMapdv = nativecast(:(GLenum $target, GLenum $query, GLsizei $bufSize, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glGetnMapdv')) or return False;
	&glGetnMapdvARB = nativecast(:(GLenum $target, GLenum $query, GLsizei $bufSize, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glGetnMapdvARB')) or return False;
	&glGetnMapfv = nativecast(:(GLenum $target, GLenum $query, GLsizei $bufSize, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glGetnMapfv')) or return False;
	&glGetnMapfvARB = nativecast(:(GLenum $target, GLenum $query, GLsizei $bufSize, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glGetnMapfvARB')) or return False;
	&glGetnMapiv = nativecast(:(GLenum $target, GLenum $query, GLsizei $bufSize, CArray[GLint] $v), SDL_GL_GetProcAddress('glGetnMapiv')) or return False;
	&glGetnMapivARB = nativecast(:(GLenum $target, GLenum $query, GLsizei $bufSize, CArray[GLint] $v), SDL_GL_GetProcAddress('glGetnMapivARB')) or return False;
	&glGetnMinmax = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $values), SDL_GL_GetProcAddress('glGetnMinmax')) or return False;
	&glGetnMinmaxARB = nativecast(:(GLenum $target, GLboolean $reset, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $values), SDL_GL_GetProcAddress('glGetnMinmaxARB')) or return False;
	&glGetnPixelMapfv = nativecast(:(GLenum $map, GLsizei $bufSize, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glGetnPixelMapfv')) or return False;
	&glGetnPixelMapfvARB = nativecast(:(GLenum $map, GLsizei $bufSize, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glGetnPixelMapfvARB')) or return False;
	&glGetnPixelMapuiv = nativecast(:(GLenum $map, GLsizei $bufSize, CArray[GLuint] $values), SDL_GL_GetProcAddress('glGetnPixelMapuiv')) or return False;
	&glGetnPixelMapuivARB = nativecast(:(GLenum $map, GLsizei $bufSize, CArray[GLuint] $values), SDL_GL_GetProcAddress('glGetnPixelMapuivARB')) or return False;
	&glGetnPixelMapusv = nativecast(:(GLenum $map, GLsizei $bufSize, CArray[GLushort] $values), SDL_GL_GetProcAddress('glGetnPixelMapusv')) or return False;
	&glGetnPixelMapusvARB = nativecast(:(GLenum $map, GLsizei $bufSize, CArray[GLushort] $values), SDL_GL_GetProcAddress('glGetnPixelMapusvARB')) or return False;
	&glGetnPolygonStipple = nativecast(:(GLsizei $bufSize, CArray[GLubyte] $pattern), SDL_GL_GetProcAddress('glGetnPolygonStipple')) or return False;
	&glGetnPolygonStippleARB = nativecast(:(GLsizei $bufSize, CArray[GLubyte] $pattern), SDL_GL_GetProcAddress('glGetnPolygonStippleARB')) or return False;
	&glGetnSeparableFilter = nativecast(:(GLenum $target, GLenum $format, GLenum $type, GLsizei $rowBufSize, Pointer $row, GLsizei $columnBufSize, Pointer $column, Pointer $span), SDL_GL_GetProcAddress('glGetnSeparableFilter')) or return False;
	&glGetnSeparableFilterARB = nativecast(:(GLenum $target, GLenum $format, GLenum $type, GLsizei $rowBufSize, Pointer $row, GLsizei $columnBufSize, Pointer $column, Pointer $span), SDL_GL_GetProcAddress('glGetnSeparableFilterARB')) or return False;
	&glGetnTexImage = nativecast(:(GLenum $target, GLint $level, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $pixels), SDL_GL_GetProcAddress('glGetnTexImage')) or return False;
	&glGetnTexImageARB = nativecast(:(GLenum $target, GLint $level, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $img), SDL_GL_GetProcAddress('glGetnTexImageARB')) or return False;
	&glGetnUniformdv = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetnUniformdv')) or return False;
	&glGetnUniformdvARB = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glGetnUniformdvARB')) or return False;
	&glGetnUniformfv = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetnUniformfv')) or return False;
	&glGetnUniformfvARB = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetnUniformfvARB')) or return False;
	&glGetnUniformfvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetnUniformfvEXT')) or return False;
	&glGetnUniformfvKHR = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glGetnUniformfvKHR')) or return False;
	&glGetnUniformi64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLint64] $params), SDL_GL_GetProcAddress('glGetnUniformi64vARB')) or return False;
	&glGetnUniformiv = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetnUniformiv')) or return False;
	&glGetnUniformivARB = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetnUniformivARB')) or return False;
	&glGetnUniformivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetnUniformivEXT')) or return False;
	&glGetnUniformivKHR = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetnUniformivKHR')) or return False;
	&glGetnUniformui64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLuint64] $params), SDL_GL_GetProcAddress('glGetnUniformui64vARB')) or return False;
	&glGetnUniformuiv = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetnUniformuiv')) or return False;
	&glGetnUniformuivARB = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetnUniformuivARB')) or return False;
	&glGetnUniformuivKHR = nativecast(:(GLuint $program, GLint $location, GLsizei $bufSize, CArray[GLuint] $params), SDL_GL_GetProcAddress('glGetnUniformuivKHR')) or return False;
	&glGlobalAlphaFactorbSUN = nativecast(:(GLbyte $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactorbSUN')) or return False;
	&glGlobalAlphaFactordSUN = nativecast(:(GLdouble $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactordSUN')) or return False;
	&glGlobalAlphaFactorfSUN = nativecast(:(GLfloat $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactorfSUN')) or return False;
	&glGlobalAlphaFactoriSUN = nativecast(:(GLint $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactoriSUN')) or return False;
	&glGlobalAlphaFactorsSUN = nativecast(:(GLshort $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactorsSUN')) or return False;
	&glGlobalAlphaFactorubSUN = nativecast(:(GLubyte $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactorubSUN')) or return False;
	&glGlobalAlphaFactoruiSUN = nativecast(:(GLuint $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactoruiSUN')) or return False;
	&glGlobalAlphaFactorusSUN = nativecast(:(GLushort $factor), SDL_GL_GetProcAddress('glGlobalAlphaFactorusSUN')) or return False;
	&glHint = nativecast(:(GLenum $target, GLenum $mode), SDL_GL_GetProcAddress('glHint')) or return False;
	&glHintPGI = nativecast(:(GLenum $target, GLint $mode), SDL_GL_GetProcAddress('glHintPGI')) or return False;
	&glHistogram = nativecast(:(GLenum $target, GLsizei $width, GLenum $internalformat, GLboolean $sink), SDL_GL_GetProcAddress('glHistogram')) or return False;
	&glHistogramEXT = nativecast(:(GLenum $target, GLsizei $width, GLenum $internalformat, GLboolean $sink), SDL_GL_GetProcAddress('glHistogramEXT')) or return False;
	&glIglooInterfaceSGIX = nativecast(:(GLenum $pname, Pointer $params), SDL_GL_GetProcAddress('glIglooInterfaceSGIX')) or return False;
	&glImageTransformParameterfHP = nativecast(:(GLenum $target, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glImageTransformParameterfHP')) or return False;
	&glImageTransformParameterfvHP = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glImageTransformParameterfvHP')) or return False;
	&glImageTransformParameteriHP = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glImageTransformParameteriHP')) or return False;
	&glImageTransformParameterivHP = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glImageTransformParameterivHP')) or return False;
	&glImportMemoryFdEXT = nativecast(:(GLuint $memory, GLuint64 $size, GLenum $handleType, GLint $fd), SDL_GL_GetProcAddress('glImportMemoryFdEXT')) or return False;
	&glImportMemoryWin32HandleEXT = nativecast(:(GLuint $memory, GLuint64 $size, GLenum $handleType, Pointer $handle), SDL_GL_GetProcAddress('glImportMemoryWin32HandleEXT')) or return False;
	&glImportMemoryWin32NameEXT = nativecast(:(GLuint $memory, GLuint64 $size, GLenum $handleType, Pointer $name), SDL_GL_GetProcAddress('glImportMemoryWin32NameEXT')) or return False;
	&glImportSemaphoreFdEXT = nativecast(:(GLuint $semaphore, GLenum $handleType, GLint $fd), SDL_GL_GetProcAddress('glImportSemaphoreFdEXT')) or return False;
	&glImportSemaphoreWin32HandleEXT = nativecast(:(GLuint $semaphore, GLenum $handleType, Pointer $handle), SDL_GL_GetProcAddress('glImportSemaphoreWin32HandleEXT')) or return False;
	&glImportSemaphoreWin32NameEXT = nativecast(:(GLuint $semaphore, GLenum $handleType, Pointer $name), SDL_GL_GetProcAddress('glImportSemaphoreWin32NameEXT')) or return False;
	&glImportSyncEXT = nativecast(:(GLenum $external_sync_type, GLintptr $external_sync, GLbitfield $flags --> GLsync), SDL_GL_GetProcAddress('glImportSyncEXT')) or return False;
	&glIndexFormatNV = nativecast(:(GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glIndexFormatNV')) or return False;
	&glIndexFuncEXT = nativecast(:(GLenum $func, GLclampf $ref), SDL_GL_GetProcAddress('glIndexFuncEXT')) or return False;
	&glIndexMask = nativecast(:(GLuint $mask), SDL_GL_GetProcAddress('glIndexMask')) or return False;
	&glIndexMaterialEXT = nativecast(:(GLenum $face, GLenum $mode), SDL_GL_GetProcAddress('glIndexMaterialEXT')) or return False;
	&glIndexPointer = nativecast(:(GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glIndexPointer')) or return False;
	&glIndexPointerEXT = nativecast(:(GLenum $type, GLsizei $stride, GLsizei $count, Pointer $pointer), SDL_GL_GetProcAddress('glIndexPointerEXT')) or return False;
	&glIndexPointerListIBM = nativecast(:(GLenum $type, GLint $stride, CArray[Pointer] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glIndexPointerListIBM')) or return False;
	&glIndexd = nativecast(:(GLdouble $c), SDL_GL_GetProcAddress('glIndexd')) or return False;
	&glIndexdv = nativecast(:(CArray[GLdouble] $c), SDL_GL_GetProcAddress('glIndexdv')) or return False;
	&glIndexf = nativecast(:(GLfloat $c), SDL_GL_GetProcAddress('glIndexf')) or return False;
	&glIndexfv = nativecast(:(CArray[GLfloat] $c), SDL_GL_GetProcAddress('glIndexfv')) or return False;
	&glIndexi = nativecast(:(GLint $c), SDL_GL_GetProcAddress('glIndexi')) or return False;
	&glIndexiv = nativecast(:(CArray[GLint] $c), SDL_GL_GetProcAddress('glIndexiv')) or return False;
	&glIndexs = nativecast(:(GLshort $c), SDL_GL_GetProcAddress('glIndexs')) or return False;
	&glIndexsv = nativecast(:(CArray[GLshort] $c), SDL_GL_GetProcAddress('glIndexsv')) or return False;
	&glIndexub = nativecast(:(GLubyte $c), SDL_GL_GetProcAddress('glIndexub')) or return False;
	&glIndexubv = nativecast(:(CArray[GLubyte] $c), SDL_GL_GetProcAddress('glIndexubv')) or return False;
	&glIndexxOES = nativecast(:(GLfixed $component), SDL_GL_GetProcAddress('glIndexxOES')) or return False;
	&glIndexxvOES = nativecast(:(CArray[GLfixed] $component), SDL_GL_GetProcAddress('glIndexxvOES')) or return False;
	&glInitNames = nativecast(:(), SDL_GL_GetProcAddress('glInitNames')) or return False;
	&glInsertComponentEXT = nativecast(:(GLuint $res, GLuint $src, GLuint $num), SDL_GL_GetProcAddress('glInsertComponentEXT')) or return False;
	&glInsertEventMarkerEXT = nativecast(:(GLsizei $length, Str $marker), SDL_GL_GetProcAddress('glInsertEventMarkerEXT')) or return False;
	&glInstrumentsBufferSGIX = nativecast(:(GLsizei $size, CArray[GLint] $buffer), SDL_GL_GetProcAddress('glInstrumentsBufferSGIX')) or return False;
	&glInterleavedArrays = nativecast(:(GLenum $format, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glInterleavedArrays')) or return False;
	&glInterpolatePathsNV = nativecast(:(GLuint $resultPath, GLuint $pathA, GLuint $pathB, GLfloat $weight), SDL_GL_GetProcAddress('glInterpolatePathsNV')) or return False;
	&glInvalidateBufferData = nativecast(:(GLuint $buffer), SDL_GL_GetProcAddress('glInvalidateBufferData')) or return False;
	&glInvalidateBufferSubData = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $length), SDL_GL_GetProcAddress('glInvalidateBufferSubData')) or return False;
	&glInvalidateFramebuffer = nativecast(:(GLenum $target, GLsizei $numAttachments, CArray[GLenum] $attachments), SDL_GL_GetProcAddress('glInvalidateFramebuffer')) or return False;
	&glInvalidateNamedFramebufferData = nativecast(:(GLuint $framebuffer, GLsizei $numAttachments, CArray[GLenum] $attachments), SDL_GL_GetProcAddress('glInvalidateNamedFramebufferData')) or return False;
	&glInvalidateNamedFramebufferSubData = nativecast(:(GLuint $framebuffer, GLsizei $numAttachments, CArray[GLenum] $attachments, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glInvalidateNamedFramebufferSubData')) or return False;
	&glInvalidateSubFramebuffer = nativecast(:(GLenum $target, GLsizei $numAttachments, CArray[GLenum] $attachments, GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glInvalidateSubFramebuffer')) or return False;
	&glInvalidateTexImage = nativecast(:(GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glInvalidateTexImage')) or return False;
	&glInvalidateTexSubImage = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth), SDL_GL_GetProcAddress('glInvalidateTexSubImage')) or return False;
	&glIsAsyncMarkerSGIX = nativecast(:(GLuint $marker --> GLboolean), SDL_GL_GetProcAddress('glIsAsyncMarkerSGIX')) or return False;
	&glIsBuffer = nativecast(:(GLuint $buffer --> GLboolean), SDL_GL_GetProcAddress('glIsBuffer')) or return False;
	&glIsBufferARB = nativecast(:(GLuint $buffer --> GLboolean), SDL_GL_GetProcAddress('glIsBufferARB')) or return False;
	&glIsBufferResidentNV = nativecast(:(GLenum $target --> GLboolean), SDL_GL_GetProcAddress('glIsBufferResidentNV')) or return False;
	&glIsCommandListNV = nativecast(:(GLuint $list --> GLboolean), SDL_GL_GetProcAddress('glIsCommandListNV')) or return False;
	&glIsEnabled = nativecast(:(GLenum $cap --> GLboolean), SDL_GL_GetProcAddress('glIsEnabled')) or return False;
	&glIsEnabledIndexedEXT = nativecast(:(GLenum $target, GLuint $index --> GLboolean), SDL_GL_GetProcAddress('glIsEnabledIndexedEXT')) or return False;
	&glIsEnabledi = nativecast(:(GLenum $target, GLuint $index --> GLboolean), SDL_GL_GetProcAddress('glIsEnabledi')) or return False;
	&glIsEnablediEXT = nativecast(:(GLenum $target, GLuint $index --> GLboolean), SDL_GL_GetProcAddress('glIsEnablediEXT')) or return False;
	&glIsEnablediNV = nativecast(:(GLenum $target, GLuint $index --> GLboolean), SDL_GL_GetProcAddress('glIsEnablediNV')) or return False;
	&glIsEnablediOES = nativecast(:(GLenum $target, GLuint $index --> GLboolean), SDL_GL_GetProcAddress('glIsEnablediOES')) or return False;
	&glIsFenceAPPLE = nativecast(:(GLuint $fence --> GLboolean), SDL_GL_GetProcAddress('glIsFenceAPPLE')) or return False;
	&glIsFenceNV = nativecast(:(GLuint $fence --> GLboolean), SDL_GL_GetProcAddress('glIsFenceNV')) or return False;
	&glIsFramebuffer = nativecast(:(GLuint $framebuffer --> GLboolean), SDL_GL_GetProcAddress('glIsFramebuffer')) or return False;
	&glIsFramebufferEXT = nativecast(:(GLuint $framebuffer --> GLboolean), SDL_GL_GetProcAddress('glIsFramebufferEXT')) or return False;
	&glIsFramebufferOES = nativecast(:(GLuint $framebuffer --> GLboolean), SDL_GL_GetProcAddress('glIsFramebufferOES')) or return False;
	&glIsImageHandleResidentARB = nativecast(:(GLuint64 $handle --> GLboolean), SDL_GL_GetProcAddress('glIsImageHandleResidentARB')) or return False;
	&glIsImageHandleResidentNV = nativecast(:(GLuint64 $handle --> GLboolean), SDL_GL_GetProcAddress('glIsImageHandleResidentNV')) or return False;
	&glIsList = nativecast(:(GLuint $list --> GLboolean), SDL_GL_GetProcAddress('glIsList')) or return False;
	&glIsMemoryObjectEXT = nativecast(:(GLuint $memoryObject --> GLboolean), SDL_GL_GetProcAddress('glIsMemoryObjectEXT')) or return False;
	&glIsNameAMD = nativecast(:(GLenum $identifier, GLuint $name --> GLboolean), SDL_GL_GetProcAddress('glIsNameAMD')) or return False;
	&glIsNamedBufferResidentNV = nativecast(:(GLuint $buffer --> GLboolean), SDL_GL_GetProcAddress('glIsNamedBufferResidentNV')) or return False;
	&glIsNamedStringARB = nativecast(:(GLint $namelen, Str $name --> GLboolean), SDL_GL_GetProcAddress('glIsNamedStringARB')) or return False;
	&glIsObjectBufferATI = nativecast(:(GLuint $buffer --> GLboolean), SDL_GL_GetProcAddress('glIsObjectBufferATI')) or return False;
	&glIsOcclusionQueryNV = nativecast(:(GLuint $id --> GLboolean), SDL_GL_GetProcAddress('glIsOcclusionQueryNV')) or return False;
	&glIsPathNV = nativecast(:(GLuint $path --> GLboolean), SDL_GL_GetProcAddress('glIsPathNV')) or return False;
	&glIsPointInFillPathNV = nativecast(:(GLuint $path, GLuint $mask, GLfloat $x, GLfloat $y --> GLboolean), SDL_GL_GetProcAddress('glIsPointInFillPathNV')) or return False;
	&glIsPointInStrokePathNV = nativecast(:(GLuint $path, GLfloat $x, GLfloat $y --> GLboolean), SDL_GL_GetProcAddress('glIsPointInStrokePathNV')) or return False;
	&glIsProgram = nativecast(:(GLuint $program --> GLboolean), SDL_GL_GetProcAddress('glIsProgram')) or return False;
	&glIsProgramARB = nativecast(:(GLuint $program --> GLboolean), SDL_GL_GetProcAddress('glIsProgramARB')) or return False;
	&glIsProgramNV = nativecast(:(GLuint $id --> GLboolean), SDL_GL_GetProcAddress('glIsProgramNV')) or return False;
	&glIsProgramPipeline = nativecast(:(GLuint $pipeline --> GLboolean), SDL_GL_GetProcAddress('glIsProgramPipeline')) or return False;
	&glIsProgramPipelineEXT = nativecast(:(GLuint $pipeline --> GLboolean), SDL_GL_GetProcAddress('glIsProgramPipelineEXT')) or return False;
	&glIsQuery = nativecast(:(GLuint $id --> GLboolean), SDL_GL_GetProcAddress('glIsQuery')) or return False;
	&glIsQueryARB = nativecast(:(GLuint $id --> GLboolean), SDL_GL_GetProcAddress('glIsQueryARB')) or return False;
	&glIsQueryEXT = nativecast(:(GLuint $id --> GLboolean), SDL_GL_GetProcAddress('glIsQueryEXT')) or return False;
	&glIsRenderbuffer = nativecast(:(GLuint $renderbuffer --> GLboolean), SDL_GL_GetProcAddress('glIsRenderbuffer')) or return False;
	&glIsRenderbufferEXT = nativecast(:(GLuint $renderbuffer --> GLboolean), SDL_GL_GetProcAddress('glIsRenderbufferEXT')) or return False;
	&glIsRenderbufferOES = nativecast(:(GLuint $renderbuffer --> GLboolean), SDL_GL_GetProcAddress('glIsRenderbufferOES')) or return False;
	&glIsSemaphoreEXT = nativecast(:(GLuint $semaphore --> GLboolean), SDL_GL_GetProcAddress('glIsSemaphoreEXT')) or return False;
	&glIsSampler = nativecast(:(GLuint $sampler --> GLboolean), SDL_GL_GetProcAddress('glIsSampler')) or return False;
	&glIsShader = nativecast(:(GLuint $shader --> GLboolean), SDL_GL_GetProcAddress('glIsShader')) or return False;
	&glIsStateNV = nativecast(:(GLuint $state --> GLboolean), SDL_GL_GetProcAddress('glIsStateNV')) or return False;
	&glIsSync = nativecast(:(GLsync $sync --> GLboolean), SDL_GL_GetProcAddress('glIsSync')) or return False;
	&glIsSyncAPPLE = nativecast(:(GLsync $sync --> GLboolean), SDL_GL_GetProcAddress('glIsSyncAPPLE')) or return False;
	&glIsTexture = nativecast(:(GLuint $texture --> GLboolean), SDL_GL_GetProcAddress('glIsTexture')) or return False;
	&glIsTextureEXT = nativecast(:(GLuint $texture --> GLboolean), SDL_GL_GetProcAddress('glIsTextureEXT')) or return False;
	&glIsTextureHandleResidentARB = nativecast(:(GLuint64 $handle --> GLboolean), SDL_GL_GetProcAddress('glIsTextureHandleResidentARB')) or return False;
	&glIsTextureHandleResidentNV = nativecast(:(GLuint64 $handle --> GLboolean), SDL_GL_GetProcAddress('glIsTextureHandleResidentNV')) or return False;
	&glIsTransformFeedback = nativecast(:(GLuint $id --> GLboolean), SDL_GL_GetProcAddress('glIsTransformFeedback')) or return False;
	&glIsTransformFeedbackNV = nativecast(:(GLuint $id --> GLboolean), SDL_GL_GetProcAddress('glIsTransformFeedbackNV')) or return False;
	&glIsVariantEnabledEXT = nativecast(:(GLuint $id, GLenum $cap --> GLboolean), SDL_GL_GetProcAddress('glIsVariantEnabledEXT')) or return False;
	&glIsVertexArray = nativecast(:(GLuint $array --> GLboolean), SDL_GL_GetProcAddress('glIsVertexArray')) or return False;
	&glIsVertexArrayAPPLE = nativecast(:(GLuint $array --> GLboolean), SDL_GL_GetProcAddress('glIsVertexArrayAPPLE')) or return False;
	&glIsVertexArrayOES = nativecast(:(GLuint $array --> GLboolean), SDL_GL_GetProcAddress('glIsVertexArrayOES')) or return False;
	&glIsVertexAttribEnabledAPPLE = nativecast(:(GLuint $index, GLenum $pname --> GLboolean), SDL_GL_GetProcAddress('glIsVertexAttribEnabledAPPLE')) or return False;
	&glLGPUCopyImageSubDataNVX = nativecast(:(GLuint $sourceGpu, GLbitfield $destinationGpuMask, GLuint $srcName, GLenum $srcTarget, GLint $srcLevel, GLint $srcX, GLint $srxY, GLint $srcZ, GLuint $dstName, GLenum $dstTarget, GLint $dstLevel, GLint $dstX, GLint $dstY, GLint $dstZ, GLsizei $width, GLsizei $height, GLsizei $depth), SDL_GL_GetProcAddress('glLGPUCopyImageSubDataNVX')) or return False;
	&glLGPUInterlockNVX = nativecast(:(), SDL_GL_GetProcAddress('glLGPUInterlockNVX')) or return False;
	&glLGPUNamedBufferSubDataNVX = nativecast(:(GLbitfield $gpuMask, GLuint $buffer, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glLGPUNamedBufferSubDataNVX')) or return False;
	&glLabelObjectEXT = nativecast(:(GLenum $type, GLuint $object, GLsizei $length, Str $label), SDL_GL_GetProcAddress('glLabelObjectEXT')) or return False;
	&glLightEnviSGIX = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glLightEnviSGIX')) or return False;
	&glLightModelf = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glLightModelf')) or return False;
	&glLightModelfv = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glLightModelfv')) or return False;
	&glLightModeli = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glLightModeli')) or return False;
	&glLightModeliv = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glLightModeliv')) or return False;
	&glLightModelx = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glLightModelx')) or return False;
	&glLightModelxOES = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glLightModelxOES')) or return False;
	&glLightModelxv = nativecast(:(GLenum $pname, CArray[GLfixed] $param), SDL_GL_GetProcAddress('glLightModelxv')) or return False;
	&glLightModelxvOES = nativecast(:(GLenum $pname, CArray[GLfixed] $param), SDL_GL_GetProcAddress('glLightModelxvOES')) or return False;
	&glLightf = nativecast(:(GLenum $light, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glLightf')) or return False;
	&glLightfv = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glLightfv')) or return False;
	&glLighti = nativecast(:(GLenum $light, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glLighti')) or return False;
	&glLightiv = nativecast(:(GLenum $light, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glLightiv')) or return False;
	&glLightx = nativecast(:(GLenum $light, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glLightx')) or return False;
	&glLightxOES = nativecast(:(GLenum $light, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glLightxOES')) or return False;
	&glLightxv = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glLightxv')) or return False;
	&glLightxvOES = nativecast(:(GLenum $light, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glLightxvOES')) or return False;
	&glLineStipple = nativecast(:(GLint $factor, GLushort $pattern), SDL_GL_GetProcAddress('glLineStipple')) or return False;
	&glLineWidth = nativecast(:(GLfloat $width), SDL_GL_GetProcAddress('glLineWidth')) or return False;
	&glLineWidthx = nativecast(:(GLfixed $width), SDL_GL_GetProcAddress('glLineWidthx')) or return False;
	&glLineWidthxOES = nativecast(:(GLfixed $width), SDL_GL_GetProcAddress('glLineWidthxOES')) or return False;
	&glLinkProgram = nativecast(:(GLuint $program), SDL_GL_GetProcAddress('glLinkProgram')) or return False;
	&glLinkProgramARB = nativecast(:(GLhandleARB $programObj), SDL_GL_GetProcAddress('glLinkProgramARB')) or return False;
	&glListBase = nativecast(:(GLuint $base), SDL_GL_GetProcAddress('glListBase')) or return False;
	&glListDrawCommandsStatesClientNV = nativecast(:(GLuint $list, GLuint $segment, CArray[Pointer] $indirects, CArray[GLsizei] $sizes, CArray[GLuint] $states, CArray[GLuint] $fbos, GLuint $count), SDL_GL_GetProcAddress('glListDrawCommandsStatesClientNV')) or return False;
	&glListParameterfSGIX = nativecast(:(GLuint $list, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glListParameterfSGIX')) or return False;
	&glListParameterfvSGIX = nativecast(:(GLuint $list, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glListParameterfvSGIX')) or return False;
	&glListParameteriSGIX = nativecast(:(GLuint $list, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glListParameteriSGIX')) or return False;
	&glListParameterivSGIX = nativecast(:(GLuint $list, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glListParameterivSGIX')) or return False;
	&glLoadIdentity = nativecast(:(), SDL_GL_GetProcAddress('glLoadIdentity')) or return False;
	&glLoadIdentityDeformationMapSGIX = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glLoadIdentityDeformationMapSGIX')) or return False;
	&glLoadMatrixd = nativecast(:(CArray[GLdouble] $m), SDL_GL_GetProcAddress('glLoadMatrixd')) or return False;
	&glLoadMatrixf = nativecast(:(CArray[GLfloat] $m), SDL_GL_GetProcAddress('glLoadMatrixf')) or return False;
	&glLoadMatrixx = nativecast(:(CArray[GLfixed] $m), SDL_GL_GetProcAddress('glLoadMatrixx')) or return False;
	&glLoadMatrixxOES = nativecast(:(CArray[GLfixed] $m), SDL_GL_GetProcAddress('glLoadMatrixxOES')) or return False;
	&glLoadName = nativecast(:(GLuint $name), SDL_GL_GetProcAddress('glLoadName')) or return False;
	&glLoadPaletteFromModelViewMatrixOES = nativecast(:(), SDL_GL_GetProcAddress('glLoadPaletteFromModelViewMatrixOES')) or return False;
	&glLoadProgramNV = nativecast(:(GLenum $target, GLuint $id, GLsizei $len, CArray[GLubyte] $program), SDL_GL_GetProcAddress('glLoadProgramNV')) or return False;
	&glLoadTransposeMatrixd = nativecast(:(CArray[GLdouble] $m), SDL_GL_GetProcAddress('glLoadTransposeMatrixd')) or return False;
	&glLoadTransposeMatrixdARB = nativecast(:(CArray[GLdouble] $m), SDL_GL_GetProcAddress('glLoadTransposeMatrixdARB')) or return False;
	&glLoadTransposeMatrixf = nativecast(:(CArray[GLfloat] $m), SDL_GL_GetProcAddress('glLoadTransposeMatrixf')) or return False;
	&glLoadTransposeMatrixfARB = nativecast(:(CArray[GLfloat] $m), SDL_GL_GetProcAddress('glLoadTransposeMatrixfARB')) or return False;
	&glLoadTransposeMatrixxOES = nativecast(:(CArray[GLfixed] $m), SDL_GL_GetProcAddress('glLoadTransposeMatrixxOES')) or return False;
	&glLockArraysEXT = nativecast(:(GLint $first, GLsizei $count), SDL_GL_GetProcAddress('glLockArraysEXT')) or return False;
	&glLogicOp = nativecast(:(GLenum $opcode), SDL_GL_GetProcAddress('glLogicOp')) or return False;
	&glMakeBufferNonResidentNV = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glMakeBufferNonResidentNV')) or return False;
	&glMakeBufferResidentNV = nativecast(:(GLenum $target, GLenum $access), SDL_GL_GetProcAddress('glMakeBufferResidentNV')) or return False;
	&glMakeImageHandleNonResidentARB = nativecast(:(GLuint64 $handle), SDL_GL_GetProcAddress('glMakeImageHandleNonResidentARB')) or return False;
	&glMakeImageHandleNonResidentNV = nativecast(:(GLuint64 $handle), SDL_GL_GetProcAddress('glMakeImageHandleNonResidentNV')) or return False;
	&glMakeImageHandleResidentARB = nativecast(:(GLuint64 $handle, GLenum $access), SDL_GL_GetProcAddress('glMakeImageHandleResidentARB')) or return False;
	&glMakeImageHandleResidentNV = nativecast(:(GLuint64 $handle, GLenum $access), SDL_GL_GetProcAddress('glMakeImageHandleResidentNV')) or return False;
	&glMakeNamedBufferNonResidentNV = nativecast(:(GLuint $buffer), SDL_GL_GetProcAddress('glMakeNamedBufferNonResidentNV')) or return False;
	&glMakeNamedBufferResidentNV = nativecast(:(GLuint $buffer, GLenum $access), SDL_GL_GetProcAddress('glMakeNamedBufferResidentNV')) or return False;
	&glMakeTextureHandleNonResidentARB = nativecast(:(GLuint64 $handle), SDL_GL_GetProcAddress('glMakeTextureHandleNonResidentARB')) or return False;
	&glMakeTextureHandleNonResidentNV = nativecast(:(GLuint64 $handle), SDL_GL_GetProcAddress('glMakeTextureHandleNonResidentNV')) or return False;
	&glMakeTextureHandleResidentARB = nativecast(:(GLuint64 $handle), SDL_GL_GetProcAddress('glMakeTextureHandleResidentARB')) or return False;
	&glMakeTextureHandleResidentNV = nativecast(:(GLuint64 $handle), SDL_GL_GetProcAddress('glMakeTextureHandleResidentNV')) or return False;
	&glMap1d = nativecast(:(GLenum $target, GLdouble $u1, GLdouble $u2, GLint $stride, GLint $order, CArray[GLdouble] $points), SDL_GL_GetProcAddress('glMap1d')) or return False;
	&glMap1f = nativecast(:(GLenum $target, GLfloat $u1, GLfloat $u2, GLint $stride, GLint $order, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glMap1f')) or return False;
	&glMap1xOES = nativecast(:(GLenum $target, GLfixed $u1, GLfixed $u2, GLint $stride, GLint $order, GLfixed $points), SDL_GL_GetProcAddress('glMap1xOES')) or return False;
	&glMap2d = nativecast(:(GLenum $target, GLdouble $u1, GLdouble $u2, GLint $ustride, GLint $uorder, GLdouble $v1, GLdouble $v2, GLint $vstride, GLint $vorder, CArray[GLdouble] $points), SDL_GL_GetProcAddress('glMap2d')) or return False;
	&glMap2f = nativecast(:(GLenum $target, GLfloat $u1, GLfloat $u2, GLint $ustride, GLint $uorder, GLfloat $v1, GLfloat $v2, GLint $vstride, GLint $vorder, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glMap2f')) or return False;
	&glMap2xOES = nativecast(:(GLenum $target, GLfixed $u1, GLfixed $u2, GLint $ustride, GLint $uorder, GLfixed $v1, GLfixed $v2, GLint $vstride, GLint $vorder, GLfixed $points), SDL_GL_GetProcAddress('glMap2xOES')) or return False;
	&glMapBuffer = nativecast(:(GLenum $target, GLenum $access --> Pointer), SDL_GL_GetProcAddress('glMapBuffer')) or return False;
	&glMapBufferARB = nativecast(:(GLenum $target, GLenum $access --> Pointer), SDL_GL_GetProcAddress('glMapBufferARB')) or return False;
	&glMapBufferOES = nativecast(:(GLenum $target, GLenum $access --> Pointer), SDL_GL_GetProcAddress('glMapBufferOES')) or return False;
	&glMapBufferRange = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $length, GLbitfield $access --> Pointer), SDL_GL_GetProcAddress('glMapBufferRange')) or return False;
	&glMapBufferRangeEXT = nativecast(:(GLenum $target, GLintptr $offset, GLsizeiptr $length, GLbitfield $access --> Pointer), SDL_GL_GetProcAddress('glMapBufferRangeEXT')) or return False;
	&glMapControlPointsNV = nativecast(:(GLenum $target, GLuint $index, GLenum $type, GLsizei $ustride, GLsizei $vstride, GLint $uorder, GLint $vorder, GLboolean $packed, Pointer $points), SDL_GL_GetProcAddress('glMapControlPointsNV')) or return False;
	&glMapGrid1d = nativecast(:(GLint $un, GLdouble $u1, GLdouble $u2), SDL_GL_GetProcAddress('glMapGrid1d')) or return False;
	&glMapGrid1f = nativecast(:(GLint $un, GLfloat $u1, GLfloat $u2), SDL_GL_GetProcAddress('glMapGrid1f')) or return False;
	&glMapGrid1xOES = nativecast(:(GLint $n, GLfixed $u1, GLfixed $u2), SDL_GL_GetProcAddress('glMapGrid1xOES')) or return False;
	&glMapGrid2d = nativecast(:(GLint $un, GLdouble $u1, GLdouble $u2, GLint $vn, GLdouble $v1, GLdouble $v2), SDL_GL_GetProcAddress('glMapGrid2d')) or return False;
	&glMapGrid2f = nativecast(:(GLint $un, GLfloat $u1, GLfloat $u2, GLint $vn, GLfloat $v1, GLfloat $v2), SDL_GL_GetProcAddress('glMapGrid2f')) or return False;
	&glMapGrid2xOES = nativecast(:(GLint $n, GLfixed $u1, GLfixed $u2, GLfixed $v1, GLfixed $v2), SDL_GL_GetProcAddress('glMapGrid2xOES')) or return False;
	&glMapNamedBuffer = nativecast(:(GLuint $buffer, GLenum $access --> Pointer), SDL_GL_GetProcAddress('glMapNamedBuffer')) or return False;
	&glMapNamedBufferEXT = nativecast(:(GLuint $buffer, GLenum $access --> Pointer), SDL_GL_GetProcAddress('glMapNamedBufferEXT')) or return False;
	&glMapNamedBufferRange = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $length, GLbitfield $access --> Pointer), SDL_GL_GetProcAddress('glMapNamedBufferRange')) or return False;
	&glMapNamedBufferRangeEXT = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $length, GLbitfield $access --> Pointer), SDL_GL_GetProcAddress('glMapNamedBufferRangeEXT')) or return False;
	&glMapObjectBufferATI = nativecast(:(GLuint $buffer --> Pointer), SDL_GL_GetProcAddress('glMapObjectBufferATI')) or return False;
	&glMapParameterfvNV = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glMapParameterfvNV')) or return False;
	&glMapParameterivNV = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMapParameterivNV')) or return False;
	&glMapTexture2DINTEL = nativecast(:(GLuint $texture, GLint $level, GLbitfield $access, CArray[GLint] $stride, CArray[GLenum] $layout --> Pointer), SDL_GL_GetProcAddress('glMapTexture2DINTEL')) or return False;
	&glMapVertexAttrib1dAPPLE = nativecast(:(GLuint $index, GLuint $size, GLdouble $u1, GLdouble $u2, GLint $stride, GLint $order, CArray[GLdouble] $points), SDL_GL_GetProcAddress('glMapVertexAttrib1dAPPLE')) or return False;
	&glMapVertexAttrib1fAPPLE = nativecast(:(GLuint $index, GLuint $size, GLfloat $u1, GLfloat $u2, GLint $stride, GLint $order, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glMapVertexAttrib1fAPPLE')) or return False;
	&glMapVertexAttrib2dAPPLE = nativecast(:(GLuint $index, GLuint $size, GLdouble $u1, GLdouble $u2, GLint $ustride, GLint $uorder, GLdouble $v1, GLdouble $v2, GLint $vstride, GLint $vorder, CArray[GLdouble] $points), SDL_GL_GetProcAddress('glMapVertexAttrib2dAPPLE')) or return False;
	&glMapVertexAttrib2fAPPLE = nativecast(:(GLuint $index, GLuint $size, GLfloat $u1, GLfloat $u2, GLint $ustride, GLint $uorder, GLfloat $v1, GLfloat $v2, GLint $vstride, GLint $vorder, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glMapVertexAttrib2fAPPLE')) or return False;
	&glMaterialf = nativecast(:(GLenum $face, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glMaterialf')) or return False;
	&glMaterialfv = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glMaterialfv')) or return False;
	&glMateriali = nativecast(:(GLenum $face, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glMateriali')) or return False;
	&glMaterialiv = nativecast(:(GLenum $face, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMaterialiv')) or return False;
	&glMaterialx = nativecast(:(GLenum $face, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glMaterialx')) or return False;
	&glMaterialxOES = nativecast(:(GLenum $face, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glMaterialxOES')) or return False;
	&glMaterialxv = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfixed] $param), SDL_GL_GetProcAddress('glMaterialxv')) or return False;
	&glMaterialxvOES = nativecast(:(GLenum $face, GLenum $pname, CArray[GLfixed] $param), SDL_GL_GetProcAddress('glMaterialxvOES')) or return False;
	&glMatrixFrustumEXT = nativecast(:(GLenum $mode, GLdouble $left, GLdouble $right, GLdouble $bottom, GLdouble $top, GLdouble $zNear, GLdouble $zFar), SDL_GL_GetProcAddress('glMatrixFrustumEXT')) or return False;
	&glMatrixIndexPointerARB = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glMatrixIndexPointerARB')) or return False;
	&glMatrixIndexPointerOES = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glMatrixIndexPointerOES')) or return False;
	&glMatrixIndexubvARB = nativecast(:(GLint $size, CArray[GLubyte] $indices), SDL_GL_GetProcAddress('glMatrixIndexubvARB')) or return False;
	&glMatrixIndexuivARB = nativecast(:(GLint $size, CArray[GLuint] $indices), SDL_GL_GetProcAddress('glMatrixIndexuivARB')) or return False;
	&glMatrixIndexusvARB = nativecast(:(GLint $size, CArray[GLushort] $indices), SDL_GL_GetProcAddress('glMatrixIndexusvARB')) or return False;
	&glMatrixLoad3x2fNV = nativecast(:(GLenum $matrixMode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixLoad3x2fNV')) or return False;
	&glMatrixLoad3x3fNV = nativecast(:(GLenum $matrixMode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixLoad3x3fNV')) or return False;
	&glMatrixLoadIdentityEXT = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glMatrixLoadIdentityEXT')) or return False;
	&glMatrixLoadTranspose3x3fNV = nativecast(:(GLenum $matrixMode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixLoadTranspose3x3fNV')) or return False;
	&glMatrixLoadTransposedEXT = nativecast(:(GLenum $mode, CArray[GLdouble] $m), SDL_GL_GetProcAddress('glMatrixLoadTransposedEXT')) or return False;
	&glMatrixLoadTransposefEXT = nativecast(:(GLenum $mode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixLoadTransposefEXT')) or return False;
	&glMatrixLoaddEXT = nativecast(:(GLenum $mode, CArray[GLdouble] $m), SDL_GL_GetProcAddress('glMatrixLoaddEXT')) or return False;
	&glMatrixLoadfEXT = nativecast(:(GLenum $mode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixLoadfEXT')) or return False;
	&glMatrixMode = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glMatrixMode')) or return False;
	&glMatrixMult3x2fNV = nativecast(:(GLenum $matrixMode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixMult3x2fNV')) or return False;
	&glMatrixMult3x3fNV = nativecast(:(GLenum $matrixMode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixMult3x3fNV')) or return False;
	&glMatrixMultTranspose3x3fNV = nativecast(:(GLenum $matrixMode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixMultTranspose3x3fNV')) or return False;
	&glMatrixMultTransposedEXT = nativecast(:(GLenum $mode, CArray[GLdouble] $m), SDL_GL_GetProcAddress('glMatrixMultTransposedEXT')) or return False;
	&glMatrixMultTransposefEXT = nativecast(:(GLenum $mode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixMultTransposefEXT')) or return False;
	&glMatrixMultdEXT = nativecast(:(GLenum $mode, CArray[GLdouble] $m), SDL_GL_GetProcAddress('glMatrixMultdEXT')) or return False;
	&glMatrixMultfEXT = nativecast(:(GLenum $mode, CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMatrixMultfEXT')) or return False;
	&glMatrixOrthoEXT = nativecast(:(GLenum $mode, GLdouble $left, GLdouble $right, GLdouble $bottom, GLdouble $top, GLdouble $zNear, GLdouble $zFar), SDL_GL_GetProcAddress('glMatrixOrthoEXT')) or return False;
	&glMatrixPopEXT = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glMatrixPopEXT')) or return False;
	&glMatrixPushEXT = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glMatrixPushEXT')) or return False;
	&glMatrixRotatedEXT = nativecast(:(GLenum $mode, GLdouble $angle, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glMatrixRotatedEXT')) or return False;
	&glMatrixRotatefEXT = nativecast(:(GLenum $mode, GLfloat $angle, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glMatrixRotatefEXT')) or return False;
	&glMatrixScaledEXT = nativecast(:(GLenum $mode, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glMatrixScaledEXT')) or return False;
	&glMatrixScalefEXT = nativecast(:(GLenum $mode, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glMatrixScalefEXT')) or return False;
	&glMatrixTranslatedEXT = nativecast(:(GLenum $mode, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glMatrixTranslatedEXT')) or return False;
	&glMatrixTranslatefEXT = nativecast(:(GLenum $mode, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glMatrixTranslatefEXT')) or return False;
	&glMaxShaderCompilerThreadsKHR = nativecast(:(GLuint $count), SDL_GL_GetProcAddress('glMaxShaderCompilerThreadsKHR')) or return False;
	&glMaxShaderCompilerThreadsARB = nativecast(:(GLuint $count), SDL_GL_GetProcAddress('glMaxShaderCompilerThreadsARB')) or return False;
	&glMemoryBarrier = nativecast(:(GLbitfield $barriers), SDL_GL_GetProcAddress('glMemoryBarrier')) or return False;
	&glMemoryBarrierByRegion = nativecast(:(GLbitfield $barriers), SDL_GL_GetProcAddress('glMemoryBarrierByRegion')) or return False;
	&glMemoryBarrierEXT = nativecast(:(GLbitfield $barriers), SDL_GL_GetProcAddress('glMemoryBarrierEXT')) or return False;
	&glMemoryObjectParameterivEXT = nativecast(:(GLuint $memoryObject, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMemoryObjectParameterivEXT')) or return False;
	&glMinSampleShading = nativecast(:(GLfloat $value), SDL_GL_GetProcAddress('glMinSampleShading')) or return False;
	&glMinSampleShadingARB = nativecast(:(GLfloat $value), SDL_GL_GetProcAddress('glMinSampleShadingARB')) or return False;
	&glMinSampleShadingOES = nativecast(:(GLfloat $value), SDL_GL_GetProcAddress('glMinSampleShadingOES')) or return False;
	&glMinmax = nativecast(:(GLenum $target, GLenum $internalformat, GLboolean $sink), SDL_GL_GetProcAddress('glMinmax')) or return False;
	&glMinmaxEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLboolean $sink), SDL_GL_GetProcAddress('glMinmaxEXT')) or return False;
	&glMultMatrixd = nativecast(:(CArray[GLdouble] $m), SDL_GL_GetProcAddress('glMultMatrixd')) or return False;
	&glMultMatrixf = nativecast(:(CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMultMatrixf')) or return False;
	&glMultMatrixx = nativecast(:(CArray[GLfixed] $m), SDL_GL_GetProcAddress('glMultMatrixx')) or return False;
	&glMultMatrixxOES = nativecast(:(CArray[GLfixed] $m), SDL_GL_GetProcAddress('glMultMatrixxOES')) or return False;
	&glMultTransposeMatrixd = nativecast(:(CArray[GLdouble] $m), SDL_GL_GetProcAddress('glMultTransposeMatrixd')) or return False;
	&glMultTransposeMatrixdARB = nativecast(:(CArray[GLdouble] $m), SDL_GL_GetProcAddress('glMultTransposeMatrixdARB')) or return False;
	&glMultTransposeMatrixf = nativecast(:(CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMultTransposeMatrixf')) or return False;
	&glMultTransposeMatrixfARB = nativecast(:(CArray[GLfloat] $m), SDL_GL_GetProcAddress('glMultTransposeMatrixfARB')) or return False;
	&glMultTransposeMatrixxOES = nativecast(:(CArray[GLfixed] $m), SDL_GL_GetProcAddress('glMultTransposeMatrixxOES')) or return False;
	&glMultiDrawArrays = nativecast(:(GLenum $mode, CArray[GLint] $first, CArray[GLsizei] $count, GLsizei $drawcount), SDL_GL_GetProcAddress('glMultiDrawArrays')) or return False;
	&glMultiDrawArraysEXT = nativecast(:(GLenum $mode, CArray[GLint] $first, CArray[GLsizei] $count, GLsizei $primcount), SDL_GL_GetProcAddress('glMultiDrawArraysEXT')) or return False;
	&glMultiDrawArraysIndirect = nativecast(:(GLenum $mode, Pointer $indirect, GLsizei $drawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawArraysIndirect')) or return False;
	&glMultiDrawArraysIndirectAMD = nativecast(:(GLenum $mode, Pointer $indirect, GLsizei $primcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawArraysIndirectAMD')) or return False;
	&glMultiDrawArraysIndirectBindlessCountNV = nativecast(:(GLenum $mode, Pointer $indirect, GLsizei $drawCount, GLsizei $maxDrawCount, GLsizei $stride, GLint $vertexBufferCount), SDL_GL_GetProcAddress('glMultiDrawArraysIndirectBindlessCountNV')) or return False;
	&glMultiDrawArraysIndirectBindlessNV = nativecast(:(GLenum $mode, Pointer $indirect, GLsizei $drawCount, GLsizei $stride, GLint $vertexBufferCount), SDL_GL_GetProcAddress('glMultiDrawArraysIndirectBindlessNV')) or return False;
	&glMultiDrawArraysIndirectCount = nativecast(:(GLenum $mode, Pointer $indirect, GLintptr $drawcount, GLsizei $maxdrawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawArraysIndirectCount')) or return False;
	&glMultiDrawArraysIndirectCountARB = nativecast(:(GLenum $mode, Pointer $indirect, GLintptr $drawcount, GLsizei $maxdrawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawArraysIndirectCountARB')) or return False;
	&glMultiDrawArraysIndirectEXT = nativecast(:(GLenum $mode, Pointer $indirect, GLsizei $drawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawArraysIndirectEXT')) or return False;
	&glMultiDrawElementArrayAPPLE = nativecast(:(GLenum $mode, CArray[GLint] $first, CArray[GLsizei] $count, GLsizei $primcount), SDL_GL_GetProcAddress('glMultiDrawElementArrayAPPLE')) or return False;
	&glMultiDrawElements = nativecast(:(GLenum $mode, CArray[GLsizei] $count, GLenum $type, CArray[Pointer] $indices, GLsizei $drawcount), SDL_GL_GetProcAddress('glMultiDrawElements')) or return False;
	&glMultiDrawElementsBaseVertex = nativecast(:(GLenum $mode, CArray[GLsizei] $count, GLenum $type, CArray[Pointer] $indices, GLsizei $drawcount, CArray[GLint] $basevertex), SDL_GL_GetProcAddress('glMultiDrawElementsBaseVertex')) or return False;
	&glMultiDrawElementsBaseVertexEXT = nativecast(:(GLenum $mode, CArray[GLsizei] $count, GLenum $type, CArray[Pointer] $indices, GLsizei $drawcount, CArray[GLint] $basevertex), SDL_GL_GetProcAddress('glMultiDrawElementsBaseVertexEXT')) or return False;
	&glMultiDrawElementsEXT = nativecast(:(GLenum $mode, CArray[GLsizei] $count, GLenum $type, CArray[Pointer] $indices, GLsizei $primcount), SDL_GL_GetProcAddress('glMultiDrawElementsEXT')) or return False;
	&glMultiDrawElementsIndirect = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect, GLsizei $drawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawElementsIndirect')) or return False;
	&glMultiDrawElementsIndirectAMD = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect, GLsizei $primcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawElementsIndirectAMD')) or return False;
	&glMultiDrawElementsIndirectBindlessCountNV = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect, GLsizei $drawCount, GLsizei $maxDrawCount, GLsizei $stride, GLint $vertexBufferCount), SDL_GL_GetProcAddress('glMultiDrawElementsIndirectBindlessCountNV')) or return False;
	&glMultiDrawElementsIndirectBindlessNV = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect, GLsizei $drawCount, GLsizei $stride, GLint $vertexBufferCount), SDL_GL_GetProcAddress('glMultiDrawElementsIndirectBindlessNV')) or return False;
	&glMultiDrawElementsIndirectCount = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect, GLintptr $drawcount, GLsizei $maxdrawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawElementsIndirectCount')) or return False;
	&glMultiDrawElementsIndirectCountARB = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect, GLintptr $drawcount, GLsizei $maxdrawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawElementsIndirectCountARB')) or return False;
	&glMultiDrawElementsIndirectEXT = nativecast(:(GLenum $mode, GLenum $type, Pointer $indirect, GLsizei $drawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawElementsIndirectEXT')) or return False;
	&glMultiDrawMeshTasksIndirectNV = nativecast(:(GLintptr $indirect, GLsizei $drawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawMeshTasksIndirectNV')) or return False;
	&glMultiDrawMeshTasksIndirectCountNV = nativecast(:(GLintptr $indirect, GLintptr $drawcount, GLsizei $maxdrawcount, GLsizei $stride), SDL_GL_GetProcAddress('glMultiDrawMeshTasksIndirectCountNV')) or return False;
	&glMultiDrawRangeElementArrayAPPLE = nativecast(:(GLenum $mode, GLuint $start, GLuint $end, CArray[GLint] $first, CArray[GLsizei] $count, GLsizei $primcount), SDL_GL_GetProcAddress('glMultiDrawRangeElementArrayAPPLE')) or return False;
	&glMultiModeDrawArraysIBM = nativecast(:(CArray[GLenum] $mode, CArray[GLint] $first, CArray[GLsizei] $count, GLsizei $primcount, GLint $modestride), SDL_GL_GetProcAddress('glMultiModeDrawArraysIBM')) or return False;
	&glMultiModeDrawElementsIBM = nativecast(:(CArray[GLenum] $mode, CArray[GLsizei] $count, GLenum $type, CArray[Pointer] $indices, GLsizei $primcount, GLint $modestride), SDL_GL_GetProcAddress('glMultiModeDrawElementsIBM')) or return False;
	&glMultiTexBufferEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $internalformat, GLuint $buffer), SDL_GL_GetProcAddress('glMultiTexBufferEXT')) or return False;
	&glMultiTexCoord1bOES = nativecast(:(GLenum $texture, GLbyte $s), SDL_GL_GetProcAddress('glMultiTexCoord1bOES')) or return False;
	&glMultiTexCoord1bvOES = nativecast(:(GLenum $texture, CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glMultiTexCoord1bvOES')) or return False;
	&glMultiTexCoord1d = nativecast(:(GLenum $target, GLdouble $s), SDL_GL_GetProcAddress('glMultiTexCoord1d')) or return False;
	&glMultiTexCoord1dARB = nativecast(:(GLenum $target, GLdouble $s), SDL_GL_GetProcAddress('glMultiTexCoord1dARB')) or return False;
	&glMultiTexCoord1dv = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord1dv')) or return False;
	&glMultiTexCoord1dvARB = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord1dvARB')) or return False;
	&glMultiTexCoord1f = nativecast(:(GLenum $target, GLfloat $s), SDL_GL_GetProcAddress('glMultiTexCoord1f')) or return False;
	&glMultiTexCoord1fARB = nativecast(:(GLenum $target, GLfloat $s), SDL_GL_GetProcAddress('glMultiTexCoord1fARB')) or return False;
	&glMultiTexCoord1fv = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord1fv')) or return False;
	&glMultiTexCoord1fvARB = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord1fvARB')) or return False;
	&glMultiTexCoord1hNV = nativecast(:(GLenum $target, GLhalfNV $s), SDL_GL_GetProcAddress('glMultiTexCoord1hNV')) or return False;
	&glMultiTexCoord1hvNV = nativecast(:(GLenum $target, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glMultiTexCoord1hvNV')) or return False;
	&glMultiTexCoord1i = nativecast(:(GLenum $target, GLint $s), SDL_GL_GetProcAddress('glMultiTexCoord1i')) or return False;
	&glMultiTexCoord1iARB = nativecast(:(GLenum $target, GLint $s), SDL_GL_GetProcAddress('glMultiTexCoord1iARB')) or return False;
	&glMultiTexCoord1iv = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord1iv')) or return False;
	&glMultiTexCoord1ivARB = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord1ivARB')) or return False;
	&glMultiTexCoord1s = nativecast(:(GLenum $target, GLshort $s), SDL_GL_GetProcAddress('glMultiTexCoord1s')) or return False;
	&glMultiTexCoord1sARB = nativecast(:(GLenum $target, GLshort $s), SDL_GL_GetProcAddress('glMultiTexCoord1sARB')) or return False;
	&glMultiTexCoord1sv = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord1sv')) or return False;
	&glMultiTexCoord1svARB = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord1svARB')) or return False;
	&glMultiTexCoord1xOES = nativecast(:(GLenum $texture, GLfixed $s), SDL_GL_GetProcAddress('glMultiTexCoord1xOES')) or return False;
	&glMultiTexCoord1xvOES = nativecast(:(GLenum $texture, CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glMultiTexCoord1xvOES')) or return False;
	&glMultiTexCoord2bOES = nativecast(:(GLenum $texture, GLbyte $s, GLbyte $t), SDL_GL_GetProcAddress('glMultiTexCoord2bOES')) or return False;
	&glMultiTexCoord2bvOES = nativecast(:(GLenum $texture, CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glMultiTexCoord2bvOES')) or return False;
	&glMultiTexCoord2d = nativecast(:(GLenum $target, GLdouble $s, GLdouble $t), SDL_GL_GetProcAddress('glMultiTexCoord2d')) or return False;
	&glMultiTexCoord2dARB = nativecast(:(GLenum $target, GLdouble $s, GLdouble $t), SDL_GL_GetProcAddress('glMultiTexCoord2dARB')) or return False;
	&glMultiTexCoord2dv = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord2dv')) or return False;
	&glMultiTexCoord2dvARB = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord2dvARB')) or return False;
	&glMultiTexCoord2f = nativecast(:(GLenum $target, GLfloat $s, GLfloat $t), SDL_GL_GetProcAddress('glMultiTexCoord2f')) or return False;
	&glMultiTexCoord2fARB = nativecast(:(GLenum $target, GLfloat $s, GLfloat $t), SDL_GL_GetProcAddress('glMultiTexCoord2fARB')) or return False;
	&glMultiTexCoord2fv = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord2fv')) or return False;
	&glMultiTexCoord2fvARB = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord2fvARB')) or return False;
	&glMultiTexCoord2hNV = nativecast(:(GLenum $target, GLhalfNV $s, GLhalfNV $t), SDL_GL_GetProcAddress('glMultiTexCoord2hNV')) or return False;
	&glMultiTexCoord2hvNV = nativecast(:(GLenum $target, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glMultiTexCoord2hvNV')) or return False;
	&glMultiTexCoord2i = nativecast(:(GLenum $target, GLint $s, GLint $t), SDL_GL_GetProcAddress('glMultiTexCoord2i')) or return False;
	&glMultiTexCoord2iARB = nativecast(:(GLenum $target, GLint $s, GLint $t), SDL_GL_GetProcAddress('glMultiTexCoord2iARB')) or return False;
	&glMultiTexCoord2iv = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord2iv')) or return False;
	&glMultiTexCoord2ivARB = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord2ivARB')) or return False;
	&glMultiTexCoord2s = nativecast(:(GLenum $target, GLshort $s, GLshort $t), SDL_GL_GetProcAddress('glMultiTexCoord2s')) or return False;
	&glMultiTexCoord2sARB = nativecast(:(GLenum $target, GLshort $s, GLshort $t), SDL_GL_GetProcAddress('glMultiTexCoord2sARB')) or return False;
	&glMultiTexCoord2sv = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord2sv')) or return False;
	&glMultiTexCoord2svARB = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord2svARB')) or return False;
	&glMultiTexCoord2xOES = nativecast(:(GLenum $texture, GLfixed $s, GLfixed $t), SDL_GL_GetProcAddress('glMultiTexCoord2xOES')) or return False;
	&glMultiTexCoord2xvOES = nativecast(:(GLenum $texture, CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glMultiTexCoord2xvOES')) or return False;
	&glMultiTexCoord3bOES = nativecast(:(GLenum $texture, GLbyte $s, GLbyte $t, GLbyte $r), SDL_GL_GetProcAddress('glMultiTexCoord3bOES')) or return False;
	&glMultiTexCoord3bvOES = nativecast(:(GLenum $texture, CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glMultiTexCoord3bvOES')) or return False;
	&glMultiTexCoord3d = nativecast(:(GLenum $target, GLdouble $s, GLdouble $t, GLdouble $r), SDL_GL_GetProcAddress('glMultiTexCoord3d')) or return False;
	&glMultiTexCoord3dARB = nativecast(:(GLenum $target, GLdouble $s, GLdouble $t, GLdouble $r), SDL_GL_GetProcAddress('glMultiTexCoord3dARB')) or return False;
	&glMultiTexCoord3dv = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord3dv')) or return False;
	&glMultiTexCoord3dvARB = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord3dvARB')) or return False;
	&glMultiTexCoord3f = nativecast(:(GLenum $target, GLfloat $s, GLfloat $t, GLfloat $r), SDL_GL_GetProcAddress('glMultiTexCoord3f')) or return False;
	&glMultiTexCoord3fARB = nativecast(:(GLenum $target, GLfloat $s, GLfloat $t, GLfloat $r), SDL_GL_GetProcAddress('glMultiTexCoord3fARB')) or return False;
	&glMultiTexCoord3fv = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord3fv')) or return False;
	&glMultiTexCoord3fvARB = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord3fvARB')) or return False;
	&glMultiTexCoord3hNV = nativecast(:(GLenum $target, GLhalfNV $s, GLhalfNV $t, GLhalfNV $r), SDL_GL_GetProcAddress('glMultiTexCoord3hNV')) or return False;
	&glMultiTexCoord3hvNV = nativecast(:(GLenum $target, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glMultiTexCoord3hvNV')) or return False;
	&glMultiTexCoord3i = nativecast(:(GLenum $target, GLint $s, GLint $t, GLint $r), SDL_GL_GetProcAddress('glMultiTexCoord3i')) or return False;
	&glMultiTexCoord3iARB = nativecast(:(GLenum $target, GLint $s, GLint $t, GLint $r), SDL_GL_GetProcAddress('glMultiTexCoord3iARB')) or return False;
	&glMultiTexCoord3iv = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord3iv')) or return False;
	&glMultiTexCoord3ivARB = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord3ivARB')) or return False;
	&glMultiTexCoord3s = nativecast(:(GLenum $target, GLshort $s, GLshort $t, GLshort $r), SDL_GL_GetProcAddress('glMultiTexCoord3s')) or return False;
	&glMultiTexCoord3sARB = nativecast(:(GLenum $target, GLshort $s, GLshort $t, GLshort $r), SDL_GL_GetProcAddress('glMultiTexCoord3sARB')) or return False;
	&glMultiTexCoord3sv = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord3sv')) or return False;
	&glMultiTexCoord3svARB = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord3svARB')) or return False;
	&glMultiTexCoord3xOES = nativecast(:(GLenum $texture, GLfixed $s, GLfixed $t, GLfixed $r), SDL_GL_GetProcAddress('glMultiTexCoord3xOES')) or return False;
	&glMultiTexCoord3xvOES = nativecast(:(GLenum $texture, CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glMultiTexCoord3xvOES')) or return False;
	&glMultiTexCoord4bOES = nativecast(:(GLenum $texture, GLbyte $s, GLbyte $t, GLbyte $r, GLbyte $q), SDL_GL_GetProcAddress('glMultiTexCoord4bOES')) or return False;
	&glMultiTexCoord4bvOES = nativecast(:(GLenum $texture, CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glMultiTexCoord4bvOES')) or return False;
	&glMultiTexCoord4d = nativecast(:(GLenum $target, GLdouble $s, GLdouble $t, GLdouble $r, GLdouble $q), SDL_GL_GetProcAddress('glMultiTexCoord4d')) or return False;
	&glMultiTexCoord4dARB = nativecast(:(GLenum $target, GLdouble $s, GLdouble $t, GLdouble $r, GLdouble $q), SDL_GL_GetProcAddress('glMultiTexCoord4dARB')) or return False;
	&glMultiTexCoord4dv = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord4dv')) or return False;
	&glMultiTexCoord4dvARB = nativecast(:(GLenum $target, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glMultiTexCoord4dvARB')) or return False;
	&glMultiTexCoord4f = nativecast(:(GLenum $target, GLfloat $s, GLfloat $t, GLfloat $r, GLfloat $q), SDL_GL_GetProcAddress('glMultiTexCoord4f')) or return False;
	&glMultiTexCoord4fARB = nativecast(:(GLenum $target, GLfloat $s, GLfloat $t, GLfloat $r, GLfloat $q), SDL_GL_GetProcAddress('glMultiTexCoord4fARB')) or return False;
	&glMultiTexCoord4fv = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord4fv')) or return False;
	&glMultiTexCoord4fvARB = nativecast(:(GLenum $target, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMultiTexCoord4fvARB')) or return False;
	&glMultiTexCoord4hNV = nativecast(:(GLenum $target, GLhalfNV $s, GLhalfNV $t, GLhalfNV $r, GLhalfNV $q), SDL_GL_GetProcAddress('glMultiTexCoord4hNV')) or return False;
	&glMultiTexCoord4hvNV = nativecast(:(GLenum $target, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glMultiTexCoord4hvNV')) or return False;
	&glMultiTexCoord4i = nativecast(:(GLenum $target, GLint $s, GLint $t, GLint $r, GLint $q), SDL_GL_GetProcAddress('glMultiTexCoord4i')) or return False;
	&glMultiTexCoord4iARB = nativecast(:(GLenum $target, GLint $s, GLint $t, GLint $r, GLint $q), SDL_GL_GetProcAddress('glMultiTexCoord4iARB')) or return False;
	&glMultiTexCoord4iv = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord4iv')) or return False;
	&glMultiTexCoord4ivARB = nativecast(:(GLenum $target, CArray[GLint] $v), SDL_GL_GetProcAddress('glMultiTexCoord4ivARB')) or return False;
	&glMultiTexCoord4s = nativecast(:(GLenum $target, GLshort $s, GLshort $t, GLshort $r, GLshort $q), SDL_GL_GetProcAddress('glMultiTexCoord4s')) or return False;
	&glMultiTexCoord4sARB = nativecast(:(GLenum $target, GLshort $s, GLshort $t, GLshort $r, GLshort $q), SDL_GL_GetProcAddress('glMultiTexCoord4sARB')) or return False;
	&glMultiTexCoord4sv = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord4sv')) or return False;
	&glMultiTexCoord4svARB = nativecast(:(GLenum $target, CArray[GLshort] $v), SDL_GL_GetProcAddress('glMultiTexCoord4svARB')) or return False;
	&glMultiTexCoord4x = nativecast(:(GLenum $texture, GLfixed $s, GLfixed $t, GLfixed $r, GLfixed $q), SDL_GL_GetProcAddress('glMultiTexCoord4x')) or return False;
	&glMultiTexCoord4xOES = nativecast(:(GLenum $texture, GLfixed $s, GLfixed $t, GLfixed $r, GLfixed $q), SDL_GL_GetProcAddress('glMultiTexCoord4xOES')) or return False;
	&glMultiTexCoord4xvOES = nativecast(:(GLenum $texture, CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glMultiTexCoord4xvOES')) or return False;
	&glMultiTexCoordP1ui = nativecast(:(GLenum $texture, GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glMultiTexCoordP1ui')) or return False;
	&glMultiTexCoordP1uiv = nativecast(:(GLenum $texture, GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glMultiTexCoordP1uiv')) or return False;
	&glMultiTexCoordP2ui = nativecast(:(GLenum $texture, GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glMultiTexCoordP2ui')) or return False;
	&glMultiTexCoordP2uiv = nativecast(:(GLenum $texture, GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glMultiTexCoordP2uiv')) or return False;
	&glMultiTexCoordP3ui = nativecast(:(GLenum $texture, GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glMultiTexCoordP3ui')) or return False;
	&glMultiTexCoordP3uiv = nativecast(:(GLenum $texture, GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glMultiTexCoordP3uiv')) or return False;
	&glMultiTexCoordP4ui = nativecast(:(GLenum $texture, GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glMultiTexCoordP4ui')) or return False;
	&glMultiTexCoordP4uiv = nativecast(:(GLenum $texture, GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glMultiTexCoordP4uiv')) or return False;
	&glMultiTexCoordPointerEXT = nativecast(:(GLenum $texunit, GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glMultiTexCoordPointerEXT')) or return False;
	&glMultiTexEnvfEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glMultiTexEnvfEXT')) or return False;
	&glMultiTexEnvfvEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glMultiTexEnvfvEXT')) or return False;
	&glMultiTexEnviEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glMultiTexEnviEXT')) or return False;
	&glMultiTexEnvivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMultiTexEnvivEXT')) or return False;
	&glMultiTexGendEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, GLdouble $param), SDL_GL_GetProcAddress('glMultiTexGendEXT')) or return False;
	&glMultiTexGendvEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glMultiTexGendvEXT')) or return False;
	&glMultiTexGenfEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glMultiTexGenfEXT')) or return False;
	&glMultiTexGenfvEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glMultiTexGenfvEXT')) or return False;
	&glMultiTexGeniEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glMultiTexGeniEXT')) or return False;
	&glMultiTexGenivEXT = nativecast(:(GLenum $texunit, GLenum $coord, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMultiTexGenivEXT')) or return False;
	&glMultiTexImage1DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glMultiTexImage1DEXT')) or return False;
	&glMultiTexImage2DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLsizei $height, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glMultiTexImage2DEXT')) or return False;
	&glMultiTexImage3DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glMultiTexImage3DEXT')) or return False;
	&glMultiTexParameterIivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMultiTexParameterIivEXT')) or return False;
	&glMultiTexParameterIuivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glMultiTexParameterIuivEXT')) or return False;
	&glMultiTexParameterfEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glMultiTexParameterfEXT')) or return False;
	&glMultiTexParameterfvEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glMultiTexParameterfvEXT')) or return False;
	&glMultiTexParameteriEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glMultiTexParameteriEXT')) or return False;
	&glMultiTexParameterivEXT = nativecast(:(GLenum $texunit, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMultiTexParameterivEXT')) or return False;
	&glMultiTexRenderbufferEXT = nativecast(:(GLenum $texunit, GLenum $target, GLuint $renderbuffer), SDL_GL_GetProcAddress('glMultiTexRenderbufferEXT')) or return False;
	&glMultiTexSubImage1DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glMultiTexSubImage1DEXT')) or return False;
	&glMultiTexSubImage2DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glMultiTexSubImage2DEXT')) or return False;
	&glMultiTexSubImage3DEXT = nativecast(:(GLenum $texunit, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glMultiTexSubImage3DEXT')) or return False;
	&glMulticastBarrierNV = nativecast(:(), SDL_GL_GetProcAddress('glMulticastBarrierNV')) or return False;
	&glMulticastBlitFramebufferNV = nativecast(:(GLuint $srcGpu, GLuint $dstGpu, GLint $srcX0, GLint $srcY0, GLint $srcX1, GLint $srcY1, GLint $dstX0, GLint $dstY0, GLint $dstX1, GLint $dstY1, GLbitfield $mask, GLenum $filter), SDL_GL_GetProcAddress('glMulticastBlitFramebufferNV')) or return False;
	&glMulticastBufferSubDataNV = nativecast(:(GLbitfield $gpuMask, GLuint $buffer, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glMulticastBufferSubDataNV')) or return False;
	&glMulticastCopyBufferSubDataNV = nativecast(:(GLuint $readGpu, GLbitfield $writeGpuMask, GLuint $readBuffer, GLuint $writeBuffer, GLintptr $readOffset, GLintptr $writeOffset, GLsizeiptr $size), SDL_GL_GetProcAddress('glMulticastCopyBufferSubDataNV')) or return False;
	&glMulticastCopyImageSubDataNV = nativecast(:(GLuint $srcGpu, GLbitfield $dstGpuMask, GLuint $srcName, GLenum $srcTarget, GLint $srcLevel, GLint $srcX, GLint $srcY, GLint $srcZ, GLuint $dstName, GLenum $dstTarget, GLint $dstLevel, GLint $dstX, GLint $dstY, GLint $dstZ, GLsizei $srcWidth, GLsizei $srcHeight, GLsizei $srcDepth), SDL_GL_GetProcAddress('glMulticastCopyImageSubDataNV')) or return False;
	&glMulticastFramebufferSampleLocationsfvNV = nativecast(:(GLuint $gpu, GLuint $framebuffer, GLuint $start, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMulticastFramebufferSampleLocationsfvNV')) or return False;
	&glMulticastGetQueryObjecti64vNV = nativecast(:(GLuint $gpu, GLuint $id, GLenum $pname, CArray[GLint64] $params), SDL_GL_GetProcAddress('glMulticastGetQueryObjecti64vNV')) or return False;
	&glMulticastGetQueryObjectivNV = nativecast(:(GLuint $gpu, GLuint $id, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glMulticastGetQueryObjectivNV')) or return False;
	&glMulticastGetQueryObjectui64vNV = nativecast(:(GLuint $gpu, GLuint $id, GLenum $pname, CArray[GLuint64] $params), SDL_GL_GetProcAddress('glMulticastGetQueryObjectui64vNV')) or return False;
	&glMulticastGetQueryObjectuivNV = nativecast(:(GLuint $gpu, GLuint $id, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glMulticastGetQueryObjectuivNV')) or return False;
	&glMulticastScissorArrayvNVX = nativecast(:(GLuint $gpu, GLuint $first, GLsizei $count, CArray[GLint] $v), SDL_GL_GetProcAddress('glMulticastScissorArrayvNVX')) or return False;
	&glMulticastViewportArrayvNVX = nativecast(:(GLuint $gpu, GLuint $first, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glMulticastViewportArrayvNVX')) or return False;
	&glMulticastViewportPositionWScaleNVX = nativecast(:(GLuint $gpu, GLuint $index, GLfloat $xcoeff, GLfloat $ycoeff), SDL_GL_GetProcAddress('glMulticastViewportPositionWScaleNVX')) or return False;
	&glMulticastWaitSyncNV = nativecast(:(GLuint $signalGpu, GLbitfield $waitGpuMask), SDL_GL_GetProcAddress('glMulticastWaitSyncNV')) or return False;
	&glNamedBufferAttachMemoryNV = nativecast(:(GLuint $buffer, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glNamedBufferAttachMemoryNV')) or return False;
	&glNamedBufferData = nativecast(:(GLuint $buffer, GLsizeiptr $size, Pointer $data, GLenum $usage), SDL_GL_GetProcAddress('glNamedBufferData')) or return False;
	&glNamedBufferDataEXT = nativecast(:(GLuint $buffer, GLsizeiptr $size, Pointer $data, GLenum $usage), SDL_GL_GetProcAddress('glNamedBufferDataEXT')) or return False;
	&glNamedBufferPageCommitmentARB = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, GLboolean $commit), SDL_GL_GetProcAddress('glNamedBufferPageCommitmentARB')) or return False;
	&glNamedBufferPageCommitmentEXT = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, GLboolean $commit), SDL_GL_GetProcAddress('glNamedBufferPageCommitmentEXT')) or return False;
	&glNamedBufferPageCommitmentMemNV = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, GLuint $memory, GLuint64 $memOffset, GLboolean $commit), SDL_GL_GetProcAddress('glNamedBufferPageCommitmentMemNV')) or return False;
	&glNamedBufferStorage = nativecast(:(GLuint $buffer, GLsizeiptr $size, Pointer $data, GLbitfield $flags), SDL_GL_GetProcAddress('glNamedBufferStorage')) or return False;
	&glNamedBufferStorageExternalEXT = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, GLeglClientBufferEXT $clientBuffer, GLbitfield $flags), SDL_GL_GetProcAddress('glNamedBufferStorageExternalEXT')) or return False;
	&glNamedBufferStorageEXT = nativecast(:(GLuint $buffer, GLsizeiptr $size, Pointer $data, GLbitfield $flags), SDL_GL_GetProcAddress('glNamedBufferStorageEXT')) or return False;
	&glNamedBufferStorageMemEXT = nativecast(:(GLuint $buffer, GLsizeiptr $size, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glNamedBufferStorageMemEXT')) or return False;
	&glNamedBufferSubData = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glNamedBufferSubData')) or return False;
	&glNamedBufferSubDataEXT = nativecast(:(GLuint $buffer, GLintptr $offset, GLsizeiptr $size, Pointer $data), SDL_GL_GetProcAddress('glNamedBufferSubDataEXT')) or return False;
	&glNamedCopyBufferSubDataEXT = nativecast(:(GLuint $readBuffer, GLuint $writeBuffer, GLintptr $readOffset, GLintptr $writeOffset, GLsizeiptr $size), SDL_GL_GetProcAddress('glNamedCopyBufferSubDataEXT')) or return False;
	&glNamedFramebufferDrawBuffer = nativecast(:(GLuint $framebuffer, GLenum $buf), SDL_GL_GetProcAddress('glNamedFramebufferDrawBuffer')) or return False;
	&glNamedFramebufferDrawBuffers = nativecast(:(GLuint $framebuffer, GLsizei $n, CArray[GLenum] $bufs), SDL_GL_GetProcAddress('glNamedFramebufferDrawBuffers')) or return False;
	&glNamedFramebufferParameteri = nativecast(:(GLuint $framebuffer, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glNamedFramebufferParameteri')) or return False;
	&glNamedFramebufferParameteriEXT = nativecast(:(GLuint $framebuffer, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glNamedFramebufferParameteriEXT')) or return False;
	&glNamedFramebufferReadBuffer = nativecast(:(GLuint $framebuffer, GLenum $src), SDL_GL_GetProcAddress('glNamedFramebufferReadBuffer')) or return False;
	&glNamedFramebufferRenderbuffer = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLenum $renderbuffertarget, GLuint $renderbuffer), SDL_GL_GetProcAddress('glNamedFramebufferRenderbuffer')) or return False;
	&glNamedFramebufferRenderbufferEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLenum $renderbuffertarget, GLuint $renderbuffer), SDL_GL_GetProcAddress('glNamedFramebufferRenderbufferEXT')) or return False;
	&glNamedFramebufferSampleLocationsfvARB = nativecast(:(GLuint $framebuffer, GLuint $start, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glNamedFramebufferSampleLocationsfvARB')) or return False;
	&glNamedFramebufferSampleLocationsfvNV = nativecast(:(GLuint $framebuffer, GLuint $start, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glNamedFramebufferSampleLocationsfvNV')) or return False;
	&glNamedFramebufferTexture = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glNamedFramebufferTexture')) or return False;
	&glNamedFramebufferSamplePositionsfvAMD = nativecast(:(GLuint $framebuffer, GLuint $numsamples, GLuint $pixelindex, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glNamedFramebufferSamplePositionsfvAMD')) or return False;
	&glNamedFramebufferTexture1DEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glNamedFramebufferTexture1DEXT')) or return False;
	&glNamedFramebufferTexture2DEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glNamedFramebufferTexture2DEXT')) or return False;
	&glNamedFramebufferTexture3DEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLenum $textarget, GLuint $texture, GLint $level, GLint $zoffset), SDL_GL_GetProcAddress('glNamedFramebufferTexture3DEXT')) or return False;
	&glNamedFramebufferTextureEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glNamedFramebufferTextureEXT')) or return False;
	&glNamedFramebufferTextureFaceEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLuint $texture, GLint $level, GLenum $face), SDL_GL_GetProcAddress('glNamedFramebufferTextureFaceEXT')) or return False;
	&glNamedFramebufferTextureLayer = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLuint $texture, GLint $level, GLint $layer), SDL_GL_GetProcAddress('glNamedFramebufferTextureLayer')) or return False;
	&glNamedFramebufferTextureLayerEXT = nativecast(:(GLuint $framebuffer, GLenum $attachment, GLuint $texture, GLint $level, GLint $layer), SDL_GL_GetProcAddress('glNamedFramebufferTextureLayerEXT')) or return False;
	&glNamedProgramLocalParameter4dEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glNamedProgramLocalParameter4dEXT')) or return False;
	&glNamedProgramLocalParameter4dvEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glNamedProgramLocalParameter4dvEXT')) or return False;
	&glNamedProgramLocalParameter4fEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glNamedProgramLocalParameter4fEXT')) or return False;
	&glNamedProgramLocalParameter4fvEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glNamedProgramLocalParameter4fvEXT')) or return False;
	&glNamedProgramLocalParameterI4iEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glNamedProgramLocalParameterI4iEXT')) or return False;
	&glNamedProgramLocalParameterI4ivEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLint] $params), SDL_GL_GetProcAddress('glNamedProgramLocalParameterI4ivEXT')) or return False;
	&glNamedProgramLocalParameterI4uiEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, GLuint $x, GLuint $y, GLuint $z, GLuint $w), SDL_GL_GetProcAddress('glNamedProgramLocalParameterI4uiEXT')) or return False;
	&glNamedProgramLocalParameterI4uivEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, CArray[GLuint] $params), SDL_GL_GetProcAddress('glNamedProgramLocalParameterI4uivEXT')) or return False;
	&glNamedProgramLocalParameters4fvEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, GLsizei $count, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glNamedProgramLocalParameters4fvEXT')) or return False;
	&glNamedProgramLocalParametersI4ivEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, GLsizei $count, CArray[GLint] $params), SDL_GL_GetProcAddress('glNamedProgramLocalParametersI4ivEXT')) or return False;
	&glNamedProgramLocalParametersI4uivEXT = nativecast(:(GLuint $program, GLenum $target, GLuint $index, GLsizei $count, CArray[GLuint] $params), SDL_GL_GetProcAddress('glNamedProgramLocalParametersI4uivEXT')) or return False;
	&glNamedProgramStringEXT = nativecast(:(GLuint $program, GLenum $target, GLenum $format, GLsizei $len, Pointer $string), SDL_GL_GetProcAddress('glNamedProgramStringEXT')) or return False;
	&glNamedRenderbufferStorage = nativecast(:(GLuint $renderbuffer, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glNamedRenderbufferStorage')) or return False;
	&glNamedRenderbufferStorageEXT = nativecast(:(GLuint $renderbuffer, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glNamedRenderbufferStorageEXT')) or return False;
	&glNamedRenderbufferStorageMultisample = nativecast(:(GLuint $renderbuffer, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glNamedRenderbufferStorageMultisample')) or return False;
	&glNamedRenderbufferStorageMultisampleAdvancedAMD = nativecast(:(GLuint $renderbuffer, GLsizei $samples, GLsizei $storageSamples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glNamedRenderbufferStorageMultisampleAdvancedAMD')) or return False;
	&glNamedRenderbufferStorageMultisampleCoverageEXT = nativecast(:(GLuint $renderbuffer, GLsizei $coverageSamples, GLsizei $colorSamples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glNamedRenderbufferStorageMultisampleCoverageEXT')) or return False;
	&glNamedRenderbufferStorageMultisampleEXT = nativecast(:(GLuint $renderbuffer, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glNamedRenderbufferStorageMultisampleEXT')) or return False;
	&glNamedStringARB = nativecast(:(GLenum $type, GLint $namelen, Str $name, GLint $stringlen, Str $string), SDL_GL_GetProcAddress('glNamedStringARB')) or return False;
	&glNewList = nativecast(:(GLuint $list, GLenum $mode), SDL_GL_GetProcAddress('glNewList')) or return False;
	&glNewObjectBufferATI = nativecast(:(GLsizei $size, Pointer $pointer, GLenum $usage --> GLuint), SDL_GL_GetProcAddress('glNewObjectBufferATI')) or return False;
	&glNormal3b = nativecast(:(GLbyte $nx, GLbyte $ny, GLbyte $nz), SDL_GL_GetProcAddress('glNormal3b')) or return False;
	&glNormal3bv = nativecast(:(CArray[GLbyte] $v), SDL_GL_GetProcAddress('glNormal3bv')) or return False;
	&glNormal3d = nativecast(:(GLdouble $nx, GLdouble $ny, GLdouble $nz), SDL_GL_GetProcAddress('glNormal3d')) or return False;
	&glNormal3dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glNormal3dv')) or return False;
	&glNormal3f = nativecast(:(GLfloat $nx, GLfloat $ny, GLfloat $nz), SDL_GL_GetProcAddress('glNormal3f')) or return False;
	&glNormal3fVertex3fSUN = nativecast(:(GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glNormal3fVertex3fSUN')) or return False;
	&glNormal3fVertex3fvSUN = nativecast(:(CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glNormal3fVertex3fvSUN')) or return False;
	&glNormal3fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glNormal3fv')) or return False;
	&glNormal3hNV = nativecast(:(GLhalfNV $nx, GLhalfNV $ny, GLhalfNV $nz), SDL_GL_GetProcAddress('glNormal3hNV')) or return False;
	&glNormal3hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glNormal3hvNV')) or return False;
	&glNormal3i = nativecast(:(GLint $nx, GLint $ny, GLint $nz), SDL_GL_GetProcAddress('glNormal3i')) or return False;
	&glNormal3iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glNormal3iv')) or return False;
	&glNormal3s = nativecast(:(GLshort $nx, GLshort $ny, GLshort $nz), SDL_GL_GetProcAddress('glNormal3s')) or return False;
	&glNormal3sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glNormal3sv')) or return False;
	&glNormal3x = nativecast(:(GLfixed $nx, GLfixed $ny, GLfixed $nz), SDL_GL_GetProcAddress('glNormal3x')) or return False;
	&glNormal3xOES = nativecast(:(GLfixed $nx, GLfixed $ny, GLfixed $nz), SDL_GL_GetProcAddress('glNormal3xOES')) or return False;
	&glNormal3xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glNormal3xvOES')) or return False;
	&glNormalFormatNV = nativecast(:(GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glNormalFormatNV')) or return False;
	&glNormalP3ui = nativecast(:(GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glNormalP3ui')) or return False;
	&glNormalP3uiv = nativecast(:(GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glNormalP3uiv')) or return False;
	&glNormalPointer = nativecast(:(GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glNormalPointer')) or return False;
	&glNormalPointerEXT = nativecast(:(GLenum $type, GLsizei $stride, GLsizei $count, Pointer $pointer), SDL_GL_GetProcAddress('glNormalPointerEXT')) or return False;
	&glNormalPointerListIBM = nativecast(:(GLenum $type, GLint $stride, CArray[Pointer] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glNormalPointerListIBM')) or return False;
	&glNormalPointervINTEL = nativecast(:(GLenum $type, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glNormalPointervINTEL')) or return False;
	&glNormalStream3bATI = nativecast(:(GLenum $stream, GLbyte $nx, GLbyte $ny, GLbyte $nz), SDL_GL_GetProcAddress('glNormalStream3bATI')) or return False;
	&glNormalStream3bvATI = nativecast(:(GLenum $stream, CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glNormalStream3bvATI')) or return False;
	&glNormalStream3dATI = nativecast(:(GLenum $stream, GLdouble $nx, GLdouble $ny, GLdouble $nz), SDL_GL_GetProcAddress('glNormalStream3dATI')) or return False;
	&glNormalStream3dvATI = nativecast(:(GLenum $stream, CArray[GLdouble] $coords), SDL_GL_GetProcAddress('glNormalStream3dvATI')) or return False;
	&glNormalStream3fATI = nativecast(:(GLenum $stream, GLfloat $nx, GLfloat $ny, GLfloat $nz), SDL_GL_GetProcAddress('glNormalStream3fATI')) or return False;
	&glNormalStream3fvATI = nativecast(:(GLenum $stream, CArray[GLfloat] $coords), SDL_GL_GetProcAddress('glNormalStream3fvATI')) or return False;
	&glNormalStream3iATI = nativecast(:(GLenum $stream, GLint $nx, GLint $ny, GLint $nz), SDL_GL_GetProcAddress('glNormalStream3iATI')) or return False;
	&glNormalStream3ivATI = nativecast(:(GLenum $stream, CArray[GLint] $coords), SDL_GL_GetProcAddress('glNormalStream3ivATI')) or return False;
	&glNormalStream3sATI = nativecast(:(GLenum $stream, GLshort $nx, GLshort $ny, GLshort $nz), SDL_GL_GetProcAddress('glNormalStream3sATI')) or return False;
	&glNormalStream3svATI = nativecast(:(GLenum $stream, CArray[GLshort] $coords), SDL_GL_GetProcAddress('glNormalStream3svATI')) or return False;
	&glObjectLabel = nativecast(:(GLenum $identifier, GLuint $name, GLsizei $length, Str $label), SDL_GL_GetProcAddress('glObjectLabel')) or return False;
	&glObjectLabelKHR = nativecast(:(GLenum $identifier, GLuint $name, GLsizei $length, Str $label), SDL_GL_GetProcAddress('glObjectLabelKHR')) or return False;
	&glObjectPtrLabel = nativecast(:(Pointer $ptr, GLsizei $length, Str $label), SDL_GL_GetProcAddress('glObjectPtrLabel')) or return False;
	&glObjectPtrLabelKHR = nativecast(:(Pointer $ptr, GLsizei $length, Str $label), SDL_GL_GetProcAddress('glObjectPtrLabelKHR')) or return False;
	&glObjectPurgeableAPPLE = nativecast(:(GLenum $objectType, GLuint $name, GLenum $option --> GLenum), SDL_GL_GetProcAddress('glObjectPurgeableAPPLE')) or return False;
	&glObjectUnpurgeableAPPLE = nativecast(:(GLenum $objectType, GLuint $name, GLenum $option --> GLenum), SDL_GL_GetProcAddress('glObjectUnpurgeableAPPLE')) or return False;
	&glOrtho = nativecast(:(GLdouble $left, GLdouble $right, GLdouble $bottom, GLdouble $top, GLdouble $zNear, GLdouble $zFar), SDL_GL_GetProcAddress('glOrtho')) or return False;
	&glOrthof = nativecast(:(GLfloat $l, GLfloat $r, GLfloat $b, GLfloat $t, GLfloat $n, GLfloat $f), SDL_GL_GetProcAddress('glOrthof')) or return False;
	&glOrthofOES = nativecast(:(GLfloat $l, GLfloat $r, GLfloat $b, GLfloat $t, GLfloat $n, GLfloat $f), SDL_GL_GetProcAddress('glOrthofOES')) or return False;
	&glOrthox = nativecast(:(GLfixed $l, GLfixed $r, GLfixed $b, GLfixed $t, GLfixed $n, GLfixed $f), SDL_GL_GetProcAddress('glOrthox')) or return False;
	&glOrthoxOES = nativecast(:(GLfixed $l, GLfixed $r, GLfixed $b, GLfixed $t, GLfixed $n, GLfixed $f), SDL_GL_GetProcAddress('glOrthoxOES')) or return False;
	&glPNTrianglesfATI = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPNTrianglesfATI')) or return False;
	&glPNTrianglesiATI = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glPNTrianglesiATI')) or return False;
	&glPassTexCoordATI = nativecast(:(GLuint $dst, GLuint $coord, GLenum $swizzle), SDL_GL_GetProcAddress('glPassTexCoordATI')) or return False;
	&glPassThrough = nativecast(:(GLfloat $token), SDL_GL_GetProcAddress('glPassThrough')) or return False;
	&glPassThroughxOES = nativecast(:(GLfixed $token), SDL_GL_GetProcAddress('glPassThroughxOES')) or return False;
	&glPatchParameterfv = nativecast(:(GLenum $pname, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glPatchParameterfv')) or return False;
	&glPatchParameteri = nativecast(:(GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glPatchParameteri')) or return False;
	&glPatchParameteriEXT = nativecast(:(GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glPatchParameteriEXT')) or return False;
	&glPatchParameteriOES = nativecast(:(GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glPatchParameteriOES')) or return False;
	&glPathColorGenNV = nativecast(:(GLenum $color, GLenum $genMode, GLenum $colorFormat, CArray[GLfloat] $coeffs), SDL_GL_GetProcAddress('glPathColorGenNV')) or return False;
	&glPathCommandsNV = nativecast(:(GLuint $path, GLsizei $numCommands, CArray[GLubyte] $commands, GLsizei $numCoords, GLenum $coordType, Pointer $coords), SDL_GL_GetProcAddress('glPathCommandsNV')) or return False;
	&glPathCoordsNV = nativecast(:(GLuint $path, GLsizei $numCoords, GLenum $coordType, Pointer $coords), SDL_GL_GetProcAddress('glPathCoordsNV')) or return False;
	&glPathCoverDepthFuncNV = nativecast(:(GLenum $func), SDL_GL_GetProcAddress('glPathCoverDepthFuncNV')) or return False;
	&glPathDashArrayNV = nativecast(:(GLuint $path, GLsizei $dashCount, CArray[GLfloat] $dashArray), SDL_GL_GetProcAddress('glPathDashArrayNV')) or return False;
	&glPathFogGenNV = nativecast(:(GLenum $genMode), SDL_GL_GetProcAddress('glPathFogGenNV')) or return False;
	&glPathGlyphIndexArrayNV = nativecast(:(GLuint $firstPathName, GLenum $fontTarget, Pointer $fontName, GLbitfield $fontStyle, GLuint $firstGlyphIndex, GLsizei $numGlyphs, GLuint $pathParameterTemplate, GLfloat $emScale --> GLenum), SDL_GL_GetProcAddress('glPathGlyphIndexArrayNV')) or return False;
	&glPathGlyphIndexRangeNV = nativecast(:(GLenum $fontTarget, Pointer $fontName, GLbitfield $fontStyle, GLuint $pathParameterTemplate, GLfloat $emScale, CArray[GLuint] $baseAndCount --> GLenum), SDL_GL_GetProcAddress('glPathGlyphIndexRangeNV')) or return False;
	&glPathGlyphRangeNV = nativecast(:(GLuint $firstPathName, GLenum $fontTarget, Pointer $fontName, GLbitfield $fontStyle, GLuint $firstGlyph, GLsizei $numGlyphs, GLenum $handleMissingGlyphs, GLuint $pathParameterTemplate, GLfloat $emScale), SDL_GL_GetProcAddress('glPathGlyphRangeNV')) or return False;
	&glPathGlyphsNV = nativecast(:(GLuint $firstPathName, GLenum $fontTarget, Pointer $fontName, GLbitfield $fontStyle, GLsizei $numGlyphs, GLenum $type, Pointer $charcodes, GLenum $handleMissingGlyphs, GLuint $pathParameterTemplate, GLfloat $emScale), SDL_GL_GetProcAddress('glPathGlyphsNV')) or return False;
	&glPathMemoryGlyphIndexArrayNV = nativecast(:(GLuint $firstPathName, GLenum $fontTarget, GLsizeiptr $fontSize, Pointer $fontData, GLsizei $faceIndex, GLuint $firstGlyphIndex, GLsizei $numGlyphs, GLuint $pathParameterTemplate, GLfloat $emScale --> GLenum), SDL_GL_GetProcAddress('glPathMemoryGlyphIndexArrayNV')) or return False;
	&glPathParameterfNV = nativecast(:(GLuint $path, GLenum $pname, GLfloat $value), SDL_GL_GetProcAddress('glPathParameterfNV')) or return False;
	&glPathParameterfvNV = nativecast(:(GLuint $path, GLenum $pname, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glPathParameterfvNV')) or return False;
	&glPathParameteriNV = nativecast(:(GLuint $path, GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glPathParameteriNV')) or return False;
	&glPathParameterivNV = nativecast(:(GLuint $path, GLenum $pname, CArray[GLint] $value), SDL_GL_GetProcAddress('glPathParameterivNV')) or return False;
	&glPathStencilDepthOffsetNV = nativecast(:(GLfloat $factor, GLfloat $units), SDL_GL_GetProcAddress('glPathStencilDepthOffsetNV')) or return False;
	&glPathStencilFuncNV = nativecast(:(GLenum $func, GLint $ref, GLuint $mask), SDL_GL_GetProcAddress('glPathStencilFuncNV')) or return False;
	&glPathStringNV = nativecast(:(GLuint $path, GLenum $format, GLsizei $length, Pointer $pathString), SDL_GL_GetProcAddress('glPathStringNV')) or return False;
	&glPathSubCommandsNV = nativecast(:(GLuint $path, GLsizei $commandStart, GLsizei $commandsToDelete, GLsizei $numCommands, CArray[GLubyte] $commands, GLsizei $numCoords, GLenum $coordType, Pointer $coords), SDL_GL_GetProcAddress('glPathSubCommandsNV')) or return False;
	&glPathSubCoordsNV = nativecast(:(GLuint $path, GLsizei $coordStart, GLsizei $numCoords, GLenum $coordType, Pointer $coords), SDL_GL_GetProcAddress('glPathSubCoordsNV')) or return False;
	&glPathTexGenNV = nativecast(:(GLenum $texCoordSet, GLenum $genMode, GLint $components, CArray[GLfloat] $coeffs), SDL_GL_GetProcAddress('glPathTexGenNV')) or return False;
	&glPauseTransformFeedback = nativecast(:(), SDL_GL_GetProcAddress('glPauseTransformFeedback')) or return False;
	&glPauseTransformFeedbackNV = nativecast(:(), SDL_GL_GetProcAddress('glPauseTransformFeedbackNV')) or return False;
	&glPixelDataRangeNV = nativecast(:(GLenum $target, GLsizei $length, Pointer $pointer), SDL_GL_GetProcAddress('glPixelDataRangeNV')) or return False;
	&glPixelMapfv = nativecast(:(GLenum $map, GLsizei $mapsize, CArray[GLfloat] $values), SDL_GL_GetProcAddress('glPixelMapfv')) or return False;
	&glPixelMapuiv = nativecast(:(GLenum $map, GLsizei $mapsize, CArray[GLuint] $values), SDL_GL_GetProcAddress('glPixelMapuiv')) or return False;
	&glPixelMapusv = nativecast(:(GLenum $map, GLsizei $mapsize, CArray[GLushort] $values), SDL_GL_GetProcAddress('glPixelMapusv')) or return False;
	&glPixelMapx = nativecast(:(GLenum $map, GLint $size, CArray[GLfixed] $values), SDL_GL_GetProcAddress('glPixelMapx')) or return False;
	&glPixelStoref = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPixelStoref')) or return False;
	&glPixelStorei = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glPixelStorei')) or return False;
	&glPixelStorex = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glPixelStorex')) or return False;
	&glPixelTexGenParameterfSGIS = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPixelTexGenParameterfSGIS')) or return False;
	&glPixelTexGenParameterfvSGIS = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glPixelTexGenParameterfvSGIS')) or return False;
	&glPixelTexGenParameteriSGIS = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glPixelTexGenParameteriSGIS')) or return False;
	&glPixelTexGenParameterivSGIS = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glPixelTexGenParameterivSGIS')) or return False;
	&glPixelTexGenSGIX = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glPixelTexGenSGIX')) or return False;
	&glPixelTransferf = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPixelTransferf')) or return False;
	&glPixelTransferi = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glPixelTransferi')) or return False;
	&glPixelTransferxOES = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glPixelTransferxOES')) or return False;
	&glPixelTransformParameterfEXT = nativecast(:(GLenum $target, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPixelTransformParameterfEXT')) or return False;
	&glPixelTransformParameterfvEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glPixelTransformParameterfvEXT')) or return False;
	&glPixelTransformParameteriEXT = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glPixelTransformParameteriEXT')) or return False;
	&glPixelTransformParameterivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glPixelTransformParameterivEXT')) or return False;
	&glPixelZoom = nativecast(:(GLfloat $xfactor, GLfloat $yfactor), SDL_GL_GetProcAddress('glPixelZoom')) or return False;
	&glPixelZoomxOES = nativecast(:(GLfixed $xfactor, GLfixed $yfactor), SDL_GL_GetProcAddress('glPixelZoomxOES')) or return False;
	&glPointAlongPathNV = nativecast(:(GLuint $path, GLsizei $startSegment, GLsizei $numSegments, GLfloat $distance, CArray[GLfloat] $x, CArray[GLfloat] $y, CArray[GLfloat] $tangentX, CArray[GLfloat] $tangentY --> GLboolean), SDL_GL_GetProcAddress('glPointAlongPathNV')) or return False;
	&glPointParameterf = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPointParameterf')) or return False;
	&glPointParameterfARB = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPointParameterfARB')) or return False;
	&glPointParameterfEXT = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPointParameterfEXT')) or return False;
	&glPointParameterfSGIS = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glPointParameterfSGIS')) or return False;
	&glPointParameterfv = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glPointParameterfv')) or return False;
	&glPointParameterfvARB = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glPointParameterfvARB')) or return False;
	&glPointParameterfvEXT = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glPointParameterfvEXT')) or return False;
	&glPointParameterfvSGIS = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glPointParameterfvSGIS')) or return False;
	&glPointParameteri = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glPointParameteri')) or return False;
	&glPointParameteriNV = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glPointParameteriNV')) or return False;
	&glPointParameteriv = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glPointParameteriv')) or return False;
	&glPointParameterivNV = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glPointParameterivNV')) or return False;
	&glPointParameterx = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glPointParameterx')) or return False;
	&glPointParameterxOES = nativecast(:(GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glPointParameterxOES')) or return False;
	&glPointParameterxv = nativecast(:(GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glPointParameterxv')) or return False;
	&glPointParameterxvOES = nativecast(:(GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glPointParameterxvOES')) or return False;
	&glPointSize = nativecast(:(GLfloat $size), SDL_GL_GetProcAddress('glPointSize')) or return False;
	&glPointSizePointerOES = nativecast(:(GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glPointSizePointerOES')) or return False;
	&glPointSizex = nativecast(:(GLfixed $size), SDL_GL_GetProcAddress('glPointSizex')) or return False;
	&glPointSizexOES = nativecast(:(GLfixed $size), SDL_GL_GetProcAddress('glPointSizexOES')) or return False;
	&glPollAsyncSGIX = nativecast(:(CArray[GLuint] $markerp --> GLint), SDL_GL_GetProcAddress('glPollAsyncSGIX')) or return False;
	&glPollInstrumentsSGIX = nativecast(:(CArray[GLint] $marker_p --> GLint), SDL_GL_GetProcAddress('glPollInstrumentsSGIX')) or return False;
	&glPolygonMode = nativecast(:(GLenum $face, GLenum $mode), SDL_GL_GetProcAddress('glPolygonMode')) or return False;
	&glPolygonModeNV = nativecast(:(GLenum $face, GLenum $mode), SDL_GL_GetProcAddress('glPolygonModeNV')) or return False;
	&glPolygonOffset = nativecast(:(GLfloat $factor, GLfloat $units), SDL_GL_GetProcAddress('glPolygonOffset')) or return False;
	&glPolygonOffsetClamp = nativecast(:(GLfloat $factor, GLfloat $units, GLfloat $clamp), SDL_GL_GetProcAddress('glPolygonOffsetClamp')) or return False;
	&glPolygonOffsetClampEXT = nativecast(:(GLfloat $factor, GLfloat $units, GLfloat $clamp), SDL_GL_GetProcAddress('glPolygonOffsetClampEXT')) or return False;
	&glPolygonOffsetEXT = nativecast(:(GLfloat $factor, GLfloat $bias), SDL_GL_GetProcAddress('glPolygonOffsetEXT')) or return False;
	&glPolygonOffsetx = nativecast(:(GLfixed $factor, GLfixed $units), SDL_GL_GetProcAddress('glPolygonOffsetx')) or return False;
	&glPolygonOffsetxOES = nativecast(:(GLfixed $factor, GLfixed $units), SDL_GL_GetProcAddress('glPolygonOffsetxOES')) or return False;
	&glPolygonStipple = nativecast(:(CArray[GLubyte] $mask), SDL_GL_GetProcAddress('glPolygonStipple')) or return False;
	&glPopAttrib = nativecast(:(), SDL_GL_GetProcAddress('glPopAttrib')) or return False;
	&glPopClientAttrib = nativecast(:(), SDL_GL_GetProcAddress('glPopClientAttrib')) or return False;
	&glPopDebugGroup = nativecast(:(), SDL_GL_GetProcAddress('glPopDebugGroup')) or return False;
	&glPopDebugGroupKHR = nativecast(:(), SDL_GL_GetProcAddress('glPopDebugGroupKHR')) or return False;
	&glPopGroupMarkerEXT = nativecast(:(), SDL_GL_GetProcAddress('glPopGroupMarkerEXT')) or return False;
	&glPopMatrix = nativecast(:(), SDL_GL_GetProcAddress('glPopMatrix')) or return False;
	&glPopName = nativecast(:(), SDL_GL_GetProcAddress('glPopName')) or return False;
	&glPresentFrameDualFillNV = nativecast(:(GLuint $video_slot, GLuint64EXT $minPresentTime, GLuint $beginPresentTimeId, GLuint $presentDurationId, GLenum $type, GLenum $target0, GLuint $fill0, GLenum $target1, GLuint $fill1, GLenum $target2, GLuint $fill2, GLenum $target3, GLuint $fill3), SDL_GL_GetProcAddress('glPresentFrameDualFillNV')) or return False;
	&glPresentFrameKeyedNV = nativecast(:(GLuint $video_slot, GLuint64EXT $minPresentTime, GLuint $beginPresentTimeId, GLuint $presentDurationId, GLenum $type, GLenum $target0, GLuint $fill0, GLuint $key0, GLenum $target1, GLuint $fill1, GLuint $key1), SDL_GL_GetProcAddress('glPresentFrameKeyedNV')) or return False;
	&glPrimitiveBoundingBox = nativecast(:(GLfloat $minX, GLfloat $minY, GLfloat $minZ, GLfloat $minW, GLfloat $maxX, GLfloat $maxY, GLfloat $maxZ, GLfloat $maxW), SDL_GL_GetProcAddress('glPrimitiveBoundingBox')) or return False;
	&glPrimitiveBoundingBoxARB = nativecast(:(GLfloat $minX, GLfloat $minY, GLfloat $minZ, GLfloat $minW, GLfloat $maxX, GLfloat $maxY, GLfloat $maxZ, GLfloat $maxW), SDL_GL_GetProcAddress('glPrimitiveBoundingBoxARB')) or return False;
	&glPrimitiveBoundingBoxEXT = nativecast(:(GLfloat $minX, GLfloat $minY, GLfloat $minZ, GLfloat $minW, GLfloat $maxX, GLfloat $maxY, GLfloat $maxZ, GLfloat $maxW), SDL_GL_GetProcAddress('glPrimitiveBoundingBoxEXT')) or return False;
	&glPrimitiveBoundingBoxOES = nativecast(:(GLfloat $minX, GLfloat $minY, GLfloat $minZ, GLfloat $minW, GLfloat $maxX, GLfloat $maxY, GLfloat $maxZ, GLfloat $maxW), SDL_GL_GetProcAddress('glPrimitiveBoundingBoxOES')) or return False;
	&glPrimitiveRestartIndex = nativecast(:(GLuint $index), SDL_GL_GetProcAddress('glPrimitiveRestartIndex')) or return False;
	&glPrimitiveRestartIndexNV = nativecast(:(GLuint $index), SDL_GL_GetProcAddress('glPrimitiveRestartIndexNV')) or return False;
	&glPrimitiveRestartNV = nativecast(:(), SDL_GL_GetProcAddress('glPrimitiveRestartNV')) or return False;
	&glPrioritizeTextures = nativecast(:(GLsizei $n, CArray[GLuint] $textures, CArray[GLfloat] $priorities), SDL_GL_GetProcAddress('glPrioritizeTextures')) or return False;
	&glPrioritizeTexturesEXT = nativecast(:(GLsizei $n, CArray[GLuint] $textures, CArray[GLclampf] $priorities), SDL_GL_GetProcAddress('glPrioritizeTexturesEXT')) or return False;
	&glPrioritizeTexturesxOES = nativecast(:(GLsizei $n, CArray[GLuint] $textures, CArray[GLfixed] $priorities), SDL_GL_GetProcAddress('glPrioritizeTexturesxOES')) or return False;
	&glProgramBinary = nativecast(:(GLuint $program, GLenum $binaryFormat, Pointer $binary, GLsizei $length), SDL_GL_GetProcAddress('glProgramBinary')) or return False;
	&glProgramBinaryOES = nativecast(:(GLuint $program, GLenum $binaryFormat, Pointer $binary, GLint $length), SDL_GL_GetProcAddress('glProgramBinaryOES')) or return False;
	&glProgramBufferParametersIivNV = nativecast(:(GLenum $target, GLuint $bindingIndex, GLuint $wordIndex, GLsizei $count, CArray[GLint] $params), SDL_GL_GetProcAddress('glProgramBufferParametersIivNV')) or return False;
	&glProgramBufferParametersIuivNV = nativecast(:(GLenum $target, GLuint $bindingIndex, GLuint $wordIndex, GLsizei $count, CArray[GLuint] $params), SDL_GL_GetProcAddress('glProgramBufferParametersIuivNV')) or return False;
	&glProgramBufferParametersfvNV = nativecast(:(GLenum $target, GLuint $bindingIndex, GLuint $wordIndex, GLsizei $count, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glProgramBufferParametersfvNV')) or return False;
	&glProgramEnvParameter4dARB = nativecast(:(GLenum $target, GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glProgramEnvParameter4dARB')) or return False;
	&glProgramEnvParameter4dvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glProgramEnvParameter4dvARB')) or return False;
	&glProgramEnvParameter4fARB = nativecast(:(GLenum $target, GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glProgramEnvParameter4fARB')) or return False;
	&glProgramEnvParameter4fvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glProgramEnvParameter4fvARB')) or return False;
	&glProgramEnvParameterI4iNV = nativecast(:(GLenum $target, GLuint $index, GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glProgramEnvParameterI4iNV')) or return False;
	&glProgramEnvParameterI4ivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLint] $params), SDL_GL_GetProcAddress('glProgramEnvParameterI4ivNV')) or return False;
	&glProgramEnvParameterI4uiNV = nativecast(:(GLenum $target, GLuint $index, GLuint $x, GLuint $y, GLuint $z, GLuint $w), SDL_GL_GetProcAddress('glProgramEnvParameterI4uiNV')) or return False;
	&glProgramEnvParameterI4uivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLuint] $params), SDL_GL_GetProcAddress('glProgramEnvParameterI4uivNV')) or return False;
	&glProgramEnvParameters4fvEXT = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glProgramEnvParameters4fvEXT')) or return False;
	&glProgramEnvParametersI4ivNV = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLint] $params), SDL_GL_GetProcAddress('glProgramEnvParametersI4ivNV')) or return False;
	&glProgramEnvParametersI4uivNV = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLuint] $params), SDL_GL_GetProcAddress('glProgramEnvParametersI4uivNV')) or return False;
	&glProgramLocalParameter4dARB = nativecast(:(GLenum $target, GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glProgramLocalParameter4dARB')) or return False;
	&glProgramLocalParameter4dvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glProgramLocalParameter4dvARB')) or return False;
	&glProgramLocalParameter4fARB = nativecast(:(GLenum $target, GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glProgramLocalParameter4fARB')) or return False;
	&glProgramLocalParameter4fvARB = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glProgramLocalParameter4fvARB')) or return False;
	&glProgramLocalParameterI4iNV = nativecast(:(GLenum $target, GLuint $index, GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glProgramLocalParameterI4iNV')) or return False;
	&glProgramLocalParameterI4ivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLint] $params), SDL_GL_GetProcAddress('glProgramLocalParameterI4ivNV')) or return False;
	&glProgramLocalParameterI4uiNV = nativecast(:(GLenum $target, GLuint $index, GLuint $x, GLuint $y, GLuint $z, GLuint $w), SDL_GL_GetProcAddress('glProgramLocalParameterI4uiNV')) or return False;
	&glProgramLocalParameterI4uivNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLuint] $params), SDL_GL_GetProcAddress('glProgramLocalParameterI4uivNV')) or return False;
	&glProgramLocalParameters4fvEXT = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glProgramLocalParameters4fvEXT')) or return False;
	&glProgramLocalParametersI4ivNV = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLint] $params), SDL_GL_GetProcAddress('glProgramLocalParametersI4ivNV')) or return False;
	&glProgramLocalParametersI4uivNV = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLuint] $params), SDL_GL_GetProcAddress('glProgramLocalParametersI4uivNV')) or return False;
	&glProgramNamedParameter4dNV = nativecast(:(GLuint $id, GLsizei $len, CArray[GLubyte] $name, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glProgramNamedParameter4dNV')) or return False;
	&glProgramNamedParameter4dvNV = nativecast(:(GLuint $id, GLsizei $len, CArray[GLubyte] $name, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glProgramNamedParameter4dvNV')) or return False;
	&glProgramNamedParameter4fNV = nativecast(:(GLuint $id, GLsizei $len, CArray[GLubyte] $name, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glProgramNamedParameter4fNV')) or return False;
	&glProgramNamedParameter4fvNV = nativecast(:(GLuint $id, GLsizei $len, CArray[GLubyte] $name, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glProgramNamedParameter4fvNV')) or return False;
	&glProgramParameter4dNV = nativecast(:(GLenum $target, GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glProgramParameter4dNV')) or return False;
	&glProgramParameter4dvNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glProgramParameter4dvNV')) or return False;
	&glProgramParameter4fNV = nativecast(:(GLenum $target, GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glProgramParameter4fNV')) or return False;
	&glProgramParameter4fvNV = nativecast(:(GLenum $target, GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glProgramParameter4fvNV')) or return False;
	&glProgramParameteri = nativecast(:(GLuint $program, GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glProgramParameteri')) or return False;
	&glProgramParameteriARB = nativecast(:(GLuint $program, GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glProgramParameteriARB')) or return False;
	&glProgramParameteriEXT = nativecast(:(GLuint $program, GLenum $pname, GLint $value), SDL_GL_GetProcAddress('glProgramParameteriEXT')) or return False;
	&glProgramParameters4dvNV = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glProgramParameters4dvNV')) or return False;
	&glProgramParameters4fvNV = nativecast(:(GLenum $target, GLuint $index, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glProgramParameters4fvNV')) or return False;
	&glProgramPathFragmentInputGenNV = nativecast(:(GLuint $program, GLint $location, GLenum $genMode, GLint $components, CArray[GLfloat] $coeffs), SDL_GL_GetProcAddress('glProgramPathFragmentInputGenNV')) or return False;
	&glProgramStringARB = nativecast(:(GLenum $target, GLenum $format, GLsizei $len, Pointer $string), SDL_GL_GetProcAddress('glProgramStringARB')) or return False;
	&glProgramSubroutineParametersuivNV = nativecast(:(GLenum $target, GLsizei $count, CArray[GLuint] $params), SDL_GL_GetProcAddress('glProgramSubroutineParametersuivNV')) or return False;
	&glProgramUniform1d = nativecast(:(GLuint $program, GLint $location, GLdouble $v0), SDL_GL_GetProcAddress('glProgramUniform1d')) or return False;
	&glProgramUniform1dEXT = nativecast(:(GLuint $program, GLint $location, GLdouble $x), SDL_GL_GetProcAddress('glProgramUniform1dEXT')) or return False;
	&glProgramUniform1dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform1dv')) or return False;
	&glProgramUniform1dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform1dvEXT')) or return False;
	&glProgramUniform1f = nativecast(:(GLuint $program, GLint $location, GLfloat $v0), SDL_GL_GetProcAddress('glProgramUniform1f')) or return False;
	&glProgramUniform1fEXT = nativecast(:(GLuint $program, GLint $location, GLfloat $v0), SDL_GL_GetProcAddress('glProgramUniform1fEXT')) or return False;
	&glProgramUniform1fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform1fv')) or return False;
	&glProgramUniform1fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform1fvEXT')) or return False;
	&glProgramUniform1i = nativecast(:(GLuint $program, GLint $location, GLint $v0), SDL_GL_GetProcAddress('glProgramUniform1i')) or return False;
	&glProgramUniform1i64ARB = nativecast(:(GLuint $program, GLint $location, GLint64 $x), SDL_GL_GetProcAddress('glProgramUniform1i64ARB')) or return False;
	&glProgramUniform1i64NV = nativecast(:(GLuint $program, GLint $location, GLint64EXT $x), SDL_GL_GetProcAddress('glProgramUniform1i64NV')) or return False;
	&glProgramUniform1i64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glProgramUniform1i64vARB')) or return False;
	&glProgramUniform1i64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform1i64vNV')) or return False;
	&glProgramUniform1iEXT = nativecast(:(GLuint $program, GLint $location, GLint $v0), SDL_GL_GetProcAddress('glProgramUniform1iEXT')) or return False;
	&glProgramUniform1iv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform1iv')) or return False;
	&glProgramUniform1ivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform1ivEXT')) or return False;
	&glProgramUniform1ui = nativecast(:(GLuint $program, GLint $location, GLuint $v0), SDL_GL_GetProcAddress('glProgramUniform1ui')) or return False;
	&glProgramUniform1ui64ARB = nativecast(:(GLuint $program, GLint $location, GLuint64 $x), SDL_GL_GetProcAddress('glProgramUniform1ui64ARB')) or return False;
	&glProgramUniform1ui64NV = nativecast(:(GLuint $program, GLint $location, GLuint64EXT $x), SDL_GL_GetProcAddress('glProgramUniform1ui64NV')) or return False;
	&glProgramUniform1ui64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glProgramUniform1ui64vARB')) or return False;
	&glProgramUniform1ui64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform1ui64vNV')) or return False;
	&glProgramUniform1uiEXT = nativecast(:(GLuint $program, GLint $location, GLuint $v0), SDL_GL_GetProcAddress('glProgramUniform1uiEXT')) or return False;
	&glProgramUniform1uiv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform1uiv')) or return False;
	&glProgramUniform1uivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform1uivEXT')) or return False;
	&glProgramUniform2d = nativecast(:(GLuint $program, GLint $location, GLdouble $v0, GLdouble $v1), SDL_GL_GetProcAddress('glProgramUniform2d')) or return False;
	&glProgramUniform2dEXT = nativecast(:(GLuint $program, GLint $location, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glProgramUniform2dEXT')) or return False;
	&glProgramUniform2dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform2dv')) or return False;
	&glProgramUniform2dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform2dvEXT')) or return False;
	&glProgramUniform2f = nativecast(:(GLuint $program, GLint $location, GLfloat $v0, GLfloat $v1), SDL_GL_GetProcAddress('glProgramUniform2f')) or return False;
	&glProgramUniform2fEXT = nativecast(:(GLuint $program, GLint $location, GLfloat $v0, GLfloat $v1), SDL_GL_GetProcAddress('glProgramUniform2fEXT')) or return False;
	&glProgramUniform2fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform2fv')) or return False;
	&glProgramUniform2fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform2fvEXT')) or return False;
	&glProgramUniform2i = nativecast(:(GLuint $program, GLint $location, GLint $v0, GLint $v1), SDL_GL_GetProcAddress('glProgramUniform2i')) or return False;
	&glProgramUniform2i64ARB = nativecast(:(GLuint $program, GLint $location, GLint64 $x, GLint64 $y), SDL_GL_GetProcAddress('glProgramUniform2i64ARB')) or return False;
	&glProgramUniform2i64NV = nativecast(:(GLuint $program, GLint $location, GLint64EXT $x, GLint64EXT $y), SDL_GL_GetProcAddress('glProgramUniform2i64NV')) or return False;
	&glProgramUniform2i64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glProgramUniform2i64vARB')) or return False;
	&glProgramUniform2i64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform2i64vNV')) or return False;
	&glProgramUniform2iEXT = nativecast(:(GLuint $program, GLint $location, GLint $v0, GLint $v1), SDL_GL_GetProcAddress('glProgramUniform2iEXT')) or return False;
	&glProgramUniform2iv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform2iv')) or return False;
	&glProgramUniform2ivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform2ivEXT')) or return False;
	&glProgramUniform2ui = nativecast(:(GLuint $program, GLint $location, GLuint $v0, GLuint $v1), SDL_GL_GetProcAddress('glProgramUniform2ui')) or return False;
	&glProgramUniform2ui64ARB = nativecast(:(GLuint $program, GLint $location, GLuint64 $x, GLuint64 $y), SDL_GL_GetProcAddress('glProgramUniform2ui64ARB')) or return False;
	&glProgramUniform2ui64NV = nativecast(:(GLuint $program, GLint $location, GLuint64EXT $x, GLuint64EXT $y), SDL_GL_GetProcAddress('glProgramUniform2ui64NV')) or return False;
	&glProgramUniform2ui64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glProgramUniform2ui64vARB')) or return False;
	&glProgramUniform2ui64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform2ui64vNV')) or return False;
	&glProgramUniform2uiEXT = nativecast(:(GLuint $program, GLint $location, GLuint $v0, GLuint $v1), SDL_GL_GetProcAddress('glProgramUniform2uiEXT')) or return False;
	&glProgramUniform2uiv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform2uiv')) or return False;
	&glProgramUniform2uivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform2uivEXT')) or return False;
	&glProgramUniform3d = nativecast(:(GLuint $program, GLint $location, GLdouble $v0, GLdouble $v1, GLdouble $v2), SDL_GL_GetProcAddress('glProgramUniform3d')) or return False;
	&glProgramUniform3dEXT = nativecast(:(GLuint $program, GLint $location, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glProgramUniform3dEXT')) or return False;
	&glProgramUniform3dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform3dv')) or return False;
	&glProgramUniform3dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform3dvEXT')) or return False;
	&glProgramUniform3f = nativecast(:(GLuint $program, GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2), SDL_GL_GetProcAddress('glProgramUniform3f')) or return False;
	&glProgramUniform3fEXT = nativecast(:(GLuint $program, GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2), SDL_GL_GetProcAddress('glProgramUniform3fEXT')) or return False;
	&glProgramUniform3fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform3fv')) or return False;
	&glProgramUniform3fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform3fvEXT')) or return False;
	&glProgramUniform3i = nativecast(:(GLuint $program, GLint $location, GLint $v0, GLint $v1, GLint $v2), SDL_GL_GetProcAddress('glProgramUniform3i')) or return False;
	&glProgramUniform3i64ARB = nativecast(:(GLuint $program, GLint $location, GLint64 $x, GLint64 $y, GLint64 $z), SDL_GL_GetProcAddress('glProgramUniform3i64ARB')) or return False;
	&glProgramUniform3i64NV = nativecast(:(GLuint $program, GLint $location, GLint64EXT $x, GLint64EXT $y, GLint64EXT $z), SDL_GL_GetProcAddress('glProgramUniform3i64NV')) or return False;
	&glProgramUniform3i64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glProgramUniform3i64vARB')) or return False;
	&glProgramUniform3i64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform3i64vNV')) or return False;
	&glProgramUniform3iEXT = nativecast(:(GLuint $program, GLint $location, GLint $v0, GLint $v1, GLint $v2), SDL_GL_GetProcAddress('glProgramUniform3iEXT')) or return False;
	&glProgramUniform3iv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform3iv')) or return False;
	&glProgramUniform3ivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform3ivEXT')) or return False;
	&glProgramUniform3ui = nativecast(:(GLuint $program, GLint $location, GLuint $v0, GLuint $v1, GLuint $v2), SDL_GL_GetProcAddress('glProgramUniform3ui')) or return False;
	&glProgramUniform3ui64ARB = nativecast(:(GLuint $program, GLint $location, GLuint64 $x, GLuint64 $y, GLuint64 $z), SDL_GL_GetProcAddress('glProgramUniform3ui64ARB')) or return False;
	&glProgramUniform3ui64NV = nativecast(:(GLuint $program, GLint $location, GLuint64EXT $x, GLuint64EXT $y, GLuint64EXT $z), SDL_GL_GetProcAddress('glProgramUniform3ui64NV')) or return False;
	&glProgramUniform3ui64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glProgramUniform3ui64vARB')) or return False;
	&glProgramUniform3ui64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform3ui64vNV')) or return False;
	&glProgramUniform3uiEXT = nativecast(:(GLuint $program, GLint $location, GLuint $v0, GLuint $v1, GLuint $v2), SDL_GL_GetProcAddress('glProgramUniform3uiEXT')) or return False;
	&glProgramUniform3uiv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform3uiv')) or return False;
	&glProgramUniform3uivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform3uivEXT')) or return False;
	&glProgramUniform4d = nativecast(:(GLuint $program, GLint $location, GLdouble $v0, GLdouble $v1, GLdouble $v2, GLdouble $v3), SDL_GL_GetProcAddress('glProgramUniform4d')) or return False;
	&glProgramUniform4dEXT = nativecast(:(GLuint $program, GLint $location, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glProgramUniform4dEXT')) or return False;
	&glProgramUniform4dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform4dv')) or return False;
	&glProgramUniform4dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniform4dvEXT')) or return False;
	&glProgramUniform4f = nativecast(:(GLuint $program, GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2, GLfloat $v3), SDL_GL_GetProcAddress('glProgramUniform4f')) or return False;
	&glProgramUniform4fEXT = nativecast(:(GLuint $program, GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2, GLfloat $v3), SDL_GL_GetProcAddress('glProgramUniform4fEXT')) or return False;
	&glProgramUniform4fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform4fv')) or return False;
	&glProgramUniform4fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniform4fvEXT')) or return False;
	&glProgramUniform4i = nativecast(:(GLuint $program, GLint $location, GLint $v0, GLint $v1, GLint $v2, GLint $v3), SDL_GL_GetProcAddress('glProgramUniform4i')) or return False;
	&glProgramUniform4i64ARB = nativecast(:(GLuint $program, GLint $location, GLint64 $x, GLint64 $y, GLint64 $z, GLint64 $w), SDL_GL_GetProcAddress('glProgramUniform4i64ARB')) or return False;
	&glProgramUniform4i64NV = nativecast(:(GLuint $program, GLint $location, GLint64EXT $x, GLint64EXT $y, GLint64EXT $z, GLint64EXT $w), SDL_GL_GetProcAddress('glProgramUniform4i64NV')) or return False;
	&glProgramUniform4i64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glProgramUniform4i64vARB')) or return False;
	&glProgramUniform4i64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform4i64vNV')) or return False;
	&glProgramUniform4iEXT = nativecast(:(GLuint $program, GLint $location, GLint $v0, GLint $v1, GLint $v2, GLint $v3), SDL_GL_GetProcAddress('glProgramUniform4iEXT')) or return False;
	&glProgramUniform4iv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform4iv')) or return False;
	&glProgramUniform4ivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glProgramUniform4ivEXT')) or return False;
	&glProgramUniform4ui = nativecast(:(GLuint $program, GLint $location, GLuint $v0, GLuint $v1, GLuint $v2, GLuint $v3), SDL_GL_GetProcAddress('glProgramUniform4ui')) or return False;
	&glProgramUniform4ui64ARB = nativecast(:(GLuint $program, GLint $location, GLuint64 $x, GLuint64 $y, GLuint64 $z, GLuint64 $w), SDL_GL_GetProcAddress('glProgramUniform4ui64ARB')) or return False;
	&glProgramUniform4ui64NV = nativecast(:(GLuint $program, GLint $location, GLuint64EXT $x, GLuint64EXT $y, GLuint64EXT $z, GLuint64EXT $w), SDL_GL_GetProcAddress('glProgramUniform4ui64NV')) or return False;
	&glProgramUniform4ui64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glProgramUniform4ui64vARB')) or return False;
	&glProgramUniform4ui64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniform4ui64vNV')) or return False;
	&glProgramUniform4uiEXT = nativecast(:(GLuint $program, GLint $location, GLuint $v0, GLuint $v1, GLuint $v2, GLuint $v3), SDL_GL_GetProcAddress('glProgramUniform4uiEXT')) or return False;
	&glProgramUniform4uiv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform4uiv')) or return False;
	&glProgramUniform4uivEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glProgramUniform4uivEXT')) or return False;
	&glProgramUniformHandleui64ARB = nativecast(:(GLuint $program, GLint $location, GLuint64 $value), SDL_GL_GetProcAddress('glProgramUniformHandleui64ARB')) or return False;
	&glProgramUniformHandleui64IMG = nativecast(:(GLuint $program, GLint $location, GLuint64 $value), SDL_GL_GetProcAddress('glProgramUniformHandleui64IMG')) or return False;
	&glProgramUniformHandleui64NV = nativecast(:(GLuint $program, GLint $location, GLuint64 $value), SDL_GL_GetProcAddress('glProgramUniformHandleui64NV')) or return False;
	&glProgramUniformHandleui64vARB = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64] $values), SDL_GL_GetProcAddress('glProgramUniformHandleui64vARB')) or return False;
	&glProgramUniformHandleui64vIMG = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64] $values), SDL_GL_GetProcAddress('glProgramUniformHandleui64vIMG')) or return False;
	&glProgramUniformHandleui64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64] $values), SDL_GL_GetProcAddress('glProgramUniformHandleui64vNV')) or return False;
	&glProgramUniformMatrix2dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2dv')) or return False;
	&glProgramUniformMatrix2dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2dvEXT')) or return False;
	&glProgramUniformMatrix2fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2fv')) or return False;
	&glProgramUniformMatrix2fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2fvEXT')) or return False;
	&glProgramUniformMatrix2x3dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x3dv')) or return False;
	&glProgramUniformMatrix2x3dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x3dvEXT')) or return False;
	&glProgramUniformMatrix2x3fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x3fv')) or return False;
	&glProgramUniformMatrix2x3fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x3fvEXT')) or return False;
	&glProgramUniformMatrix2x4dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x4dv')) or return False;
	&glProgramUniformMatrix2x4dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x4dvEXT')) or return False;
	&glProgramUniformMatrix2x4fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x4fv')) or return False;
	&glProgramUniformMatrix2x4fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix2x4fvEXT')) or return False;
	&glProgramUniformMatrix3dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3dv')) or return False;
	&glProgramUniformMatrix3dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3dvEXT')) or return False;
	&glProgramUniformMatrix3fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3fv')) or return False;
	&glProgramUniformMatrix3fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3fvEXT')) or return False;
	&glProgramUniformMatrix3x2dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x2dv')) or return False;
	&glProgramUniformMatrix3x2dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x2dvEXT')) or return False;
	&glProgramUniformMatrix3x2fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x2fv')) or return False;
	&glProgramUniformMatrix3x2fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x2fvEXT')) or return False;
	&glProgramUniformMatrix3x4dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x4dv')) or return False;
	&glProgramUniformMatrix3x4dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x4dvEXT')) or return False;
	&glProgramUniformMatrix3x4fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x4fv')) or return False;
	&glProgramUniformMatrix3x4fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix3x4fvEXT')) or return False;
	&glProgramUniformMatrix4dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4dv')) or return False;
	&glProgramUniformMatrix4dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4dvEXT')) or return False;
	&glProgramUniformMatrix4fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4fv')) or return False;
	&glProgramUniformMatrix4fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4fvEXT')) or return False;
	&glProgramUniformMatrix4x2dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x2dv')) or return False;
	&glProgramUniformMatrix4x2dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x2dvEXT')) or return False;
	&glProgramUniformMatrix4x2fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x2fv')) or return False;
	&glProgramUniformMatrix4x2fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x2fvEXT')) or return False;
	&glProgramUniformMatrix4x3dv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x3dv')) or return False;
	&glProgramUniformMatrix4x3dvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x3dvEXT')) or return False;
	&glProgramUniformMatrix4x3fv = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x3fv')) or return False;
	&glProgramUniformMatrix4x3fvEXT = nativecast(:(GLuint $program, GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glProgramUniformMatrix4x3fvEXT')) or return False;
	&glProgramUniformui64NV = nativecast(:(GLuint $program, GLint $location, GLuint64EXT $value), SDL_GL_GetProcAddress('glProgramUniformui64NV')) or return False;
	&glProgramUniformui64vNV = nativecast(:(GLuint $program, GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glProgramUniformui64vNV')) or return False;
	&glProgramVertexLimitNV = nativecast(:(GLenum $target, GLint $limit), SDL_GL_GetProcAddress('glProgramVertexLimitNV')) or return False;
	&glProvokingVertex = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glProvokingVertex')) or return False;
	&glProvokingVertexEXT = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glProvokingVertexEXT')) or return False;
	&glPushAttrib = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glPushAttrib')) or return False;
	&glPushClientAttrib = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glPushClientAttrib')) or return False;
	&glPushClientAttribDefaultEXT = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glPushClientAttribDefaultEXT')) or return False;
	&glPushDebugGroup = nativecast(:(GLenum $source, GLuint $id, GLsizei $length, Str $message), SDL_GL_GetProcAddress('glPushDebugGroup')) or return False;
	&glPushDebugGroupKHR = nativecast(:(GLenum $source, GLuint $id, GLsizei $length, Str $message), SDL_GL_GetProcAddress('glPushDebugGroupKHR')) or return False;
	&glPushGroupMarkerEXT = nativecast(:(GLsizei $length, Str $marker), SDL_GL_GetProcAddress('glPushGroupMarkerEXT')) or return False;
	&glPushMatrix = nativecast(:(), SDL_GL_GetProcAddress('glPushMatrix')) or return False;
	&glPushName = nativecast(:(GLuint $name), SDL_GL_GetProcAddress('glPushName')) or return False;
	&glQueryCounter = nativecast(:(GLuint $id, GLenum $target), SDL_GL_GetProcAddress('glQueryCounter')) or return False;
	&glQueryCounterEXT = nativecast(:(GLuint $id, GLenum $target), SDL_GL_GetProcAddress('glQueryCounterEXT')) or return False;
	&glQueryMatrixxOES = nativecast(:(CArray[GLfixed] $mantissa, CArray[GLint] $exponent --> GLbitfield), SDL_GL_GetProcAddress('glQueryMatrixxOES')) or return False;
	&glQueryObjectParameteruiAMD = nativecast(:(GLenum $target, GLuint $id, GLenum $pname, GLuint $param), SDL_GL_GetProcAddress('glQueryObjectParameteruiAMD')) or return False;
	&glQueryResourceNV = nativecast(:(GLenum $queryType, GLint $tagId, GLuint $count, CArray[GLint] $buffer --> GLint), SDL_GL_GetProcAddress('glQueryResourceNV')) or return False;
	&glQueryResourceTagNV = nativecast(:(GLint $tagId, Str $tagString), SDL_GL_GetProcAddress('glQueryResourceTagNV')) or return False;
	&glRasterPos2d = nativecast(:(GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glRasterPos2d')) or return False;
	&glRasterPos2dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glRasterPos2dv')) or return False;
	&glRasterPos2f = nativecast(:(GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glRasterPos2f')) or return False;
	&glRasterPos2fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glRasterPos2fv')) or return False;
	&glRasterPos2i = nativecast(:(GLint $x, GLint $y), SDL_GL_GetProcAddress('glRasterPos2i')) or return False;
	&glRasterPos2iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glRasterPos2iv')) or return False;
	&glRasterPos2s = nativecast(:(GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glRasterPos2s')) or return False;
	&glRasterPos2sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glRasterPos2sv')) or return False;
	&glRasterPos2xOES = nativecast(:(GLfixed $x, GLfixed $y), SDL_GL_GetProcAddress('glRasterPos2xOES')) or return False;
	&glRasterPos2xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glRasterPos2xvOES')) or return False;
	&glRasterPos3d = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glRasterPos3d')) or return False;
	&glRasterPos3dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glRasterPos3dv')) or return False;
	&glRasterPos3f = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glRasterPos3f')) or return False;
	&glRasterPos3fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glRasterPos3fv')) or return False;
	&glRasterPos3i = nativecast(:(GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glRasterPos3i')) or return False;
	&glRasterPos3iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glRasterPos3iv')) or return False;
	&glRasterPos3s = nativecast(:(GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glRasterPos3s')) or return False;
	&glRasterPos3sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glRasterPos3sv')) or return False;
	&glRasterPos3xOES = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glRasterPos3xOES')) or return False;
	&glRasterPos3xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glRasterPos3xvOES')) or return False;
	&glRasterPos4d = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glRasterPos4d')) or return False;
	&glRasterPos4dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glRasterPos4dv')) or return False;
	&glRasterPos4f = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glRasterPos4f')) or return False;
	&glRasterPos4fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glRasterPos4fv')) or return False;
	&glRasterPos4i = nativecast(:(GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glRasterPos4i')) or return False;
	&glRasterPos4iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glRasterPos4iv')) or return False;
	&glRasterPos4s = nativecast(:(GLshort $x, GLshort $y, GLshort $z, GLshort $w), SDL_GL_GetProcAddress('glRasterPos4s')) or return False;
	&glRasterPos4sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glRasterPos4sv')) or return False;
	&glRasterPos4xOES = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z, GLfixed $w), SDL_GL_GetProcAddress('glRasterPos4xOES')) or return False;
	&glRasterPos4xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glRasterPos4xvOES')) or return False;
	&glRasterSamplesEXT = nativecast(:(GLuint $samples, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glRasterSamplesEXT')) or return False;
	&glReadBuffer = nativecast(:(GLenum $src), SDL_GL_GetProcAddress('glReadBuffer')) or return False;
	&glReadBufferIndexedEXT = nativecast(:(GLenum $src, GLint $index), SDL_GL_GetProcAddress('glReadBufferIndexedEXT')) or return False;
	&glReadBufferNV = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glReadBufferNV')) or return False;
	&glReadInstrumentsSGIX = nativecast(:(GLint $marker), SDL_GL_GetProcAddress('glReadInstrumentsSGIX')) or return False;
	&glReadPixels = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glReadPixels')) or return False;
	&glReadnPixels = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $data), SDL_GL_GetProcAddress('glReadnPixels')) or return False;
	&glReadnPixelsARB = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $data), SDL_GL_GetProcAddress('glReadnPixelsARB')) or return False;
	&glReadnPixelsEXT = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $data), SDL_GL_GetProcAddress('glReadnPixelsEXT')) or return False;
	&glReadnPixelsKHR = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, GLsizei $bufSize, Pointer $data), SDL_GL_GetProcAddress('glReadnPixelsKHR')) or return False;
	&glReleaseKeyedMutexWin32EXT = nativecast(:(GLuint $memory, GLuint64 $key --> GLboolean), SDL_GL_GetProcAddress('glReleaseKeyedMutexWin32EXT')) or return False;
	&glRectd = nativecast(:(GLdouble $x1, GLdouble $y1, GLdouble $x2, GLdouble $y2), SDL_GL_GetProcAddress('glRectd')) or return False;
	&glRectdv = nativecast(:(CArray[GLdouble] $v1, CArray[GLdouble] $v2), SDL_GL_GetProcAddress('glRectdv')) or return False;
	&glRectf = nativecast(:(GLfloat $x1, GLfloat $y1, GLfloat $x2, GLfloat $y2), SDL_GL_GetProcAddress('glRectf')) or return False;
	&glRectfv = nativecast(:(CArray[GLfloat] $v1, CArray[GLfloat] $v2), SDL_GL_GetProcAddress('glRectfv')) or return False;
	&glRecti = nativecast(:(GLint $x1, GLint $y1, GLint $x2, GLint $y2), SDL_GL_GetProcAddress('glRecti')) or return False;
	&glRectiv = nativecast(:(CArray[GLint] $v1, CArray[GLint] $v2), SDL_GL_GetProcAddress('glRectiv')) or return False;
	&glRects = nativecast(:(GLshort $x1, GLshort $y1, GLshort $x2, GLshort $y2), SDL_GL_GetProcAddress('glRects')) or return False;
	&glRectsv = nativecast(:(CArray[GLshort] $v1, CArray[GLshort] $v2), SDL_GL_GetProcAddress('glRectsv')) or return False;
	&glRectxOES = nativecast(:(GLfixed $x1, GLfixed $y1, GLfixed $x2, GLfixed $y2), SDL_GL_GetProcAddress('glRectxOES')) or return False;
	&glRectxvOES = nativecast(:(CArray[GLfixed] $v1, CArray[GLfixed] $v2), SDL_GL_GetProcAddress('glRectxvOES')) or return False;
	&glReferencePlaneSGIX = nativecast(:(CArray[GLdouble] $equation), SDL_GL_GetProcAddress('glReferencePlaneSGIX')) or return False;
	&glReleaseShaderCompiler = nativecast(:(), SDL_GL_GetProcAddress('glReleaseShaderCompiler')) or return False;
	&glRenderGpuMaskNV = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glRenderGpuMaskNV')) or return False;
	&glRenderMode = nativecast(:(GLenum $mode --> GLint), SDL_GL_GetProcAddress('glRenderMode')) or return False;
	&glRenderbufferStorage = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorage')) or return False;
	&glRenderbufferStorageEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageEXT')) or return False;
	&glRenderbufferStorageMultisample = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisample')) or return False;
	&glRenderbufferStorageMultisampleANGLE = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisampleANGLE')) or return False;
	&glRenderbufferStorageMultisampleAPPLE = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisampleAPPLE')) or return False;
	&glRenderbufferStorageMultisampleAdvancedAMD = nativecast(:(GLenum $target, GLsizei $samples, GLsizei $storageSamples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisampleAdvancedAMD')) or return False;
	&glRenderbufferStorageMultisampleCoverageNV = nativecast(:(GLenum $target, GLsizei $coverageSamples, GLsizei $colorSamples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisampleCoverageNV')) or return False;
	&glRenderbufferStorageMultisampleEXT = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisampleEXT')) or return False;
	&glRenderbufferStorageMultisampleIMG = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisampleIMG')) or return False;
	&glRenderbufferStorageMultisampleNV = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageMultisampleNV')) or return False;
	&glRenderbufferStorageOES = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glRenderbufferStorageOES')) or return False;
	&glReplacementCodePointerSUN = nativecast(:(GLenum $type, GLsizei $stride, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glReplacementCodePointerSUN')) or return False;
	&glReplacementCodeubSUN = nativecast(:(GLubyte $code), SDL_GL_GetProcAddress('glReplacementCodeubSUN')) or return False;
	&glReplacementCodeubvSUN = nativecast(:(CArray[GLubyte] $code), SDL_GL_GetProcAddress('glReplacementCodeubvSUN')) or return False;
	&glReplacementCodeuiColor3fVertex3fSUN = nativecast(:(GLuint $rc, GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiColor3fVertex3fSUN')) or return False;
	&glReplacementCodeuiColor3fVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLfloat] $c, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiColor3fVertex3fvSUN')) or return False;
	&glReplacementCodeuiColor4fNormal3fVertex3fSUN = nativecast(:(GLuint $rc, GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $a, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiColor4fNormal3fVertex3fSUN')) or return False;
	&glReplacementCodeuiColor4fNormal3fVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLfloat] $c, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiColor4fNormal3fVertex3fvSUN')) or return False;
	&glReplacementCodeuiColor4ubVertex3fSUN = nativecast(:(GLuint $rc, GLubyte $r, GLubyte $g, GLubyte $b, GLubyte $a, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiColor4ubVertex3fSUN')) or return False;
	&glReplacementCodeuiColor4ubVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLubyte] $c, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiColor4ubVertex3fvSUN')) or return False;
	&glReplacementCodeuiNormal3fVertex3fSUN = nativecast(:(GLuint $rc, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiNormal3fVertex3fSUN')) or return False;
	&glReplacementCodeuiNormal3fVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiNormal3fVertex3fvSUN')) or return False;
	&glReplacementCodeuiSUN = nativecast(:(GLuint $code), SDL_GL_GetProcAddress('glReplacementCodeuiSUN')) or return False;
	&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = nativecast(:(GLuint $rc, GLfloat $s, GLfloat $t, GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $a, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN')) or return False;
	&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLfloat] $tc, CArray[GLfloat] $c, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN')) or return False;
	&glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = nativecast(:(GLuint $rc, GLfloat $s, GLfloat $t, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN')) or return False;
	&glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLfloat] $tc, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN')) or return False;
	&glReplacementCodeuiTexCoord2fVertex3fSUN = nativecast(:(GLuint $rc, GLfloat $s, GLfloat $t, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiTexCoord2fVertex3fSUN')) or return False;
	&glReplacementCodeuiTexCoord2fVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLfloat] $tc, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiTexCoord2fVertex3fvSUN')) or return False;
	&glReplacementCodeuiVertex3fSUN = nativecast(:(GLuint $rc, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glReplacementCodeuiVertex3fSUN')) or return False;
	&glReplacementCodeuiVertex3fvSUN = nativecast(:(CArray[GLuint] $rc, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glReplacementCodeuiVertex3fvSUN')) or return False;
	&glReplacementCodeuivSUN = nativecast(:(CArray[GLuint] $code), SDL_GL_GetProcAddress('glReplacementCodeuivSUN')) or return False;
	&glReplacementCodeusSUN = nativecast(:(GLushort $code), SDL_GL_GetProcAddress('glReplacementCodeusSUN')) or return False;
	&glReplacementCodeusvSUN = nativecast(:(CArray[GLushort] $code), SDL_GL_GetProcAddress('glReplacementCodeusvSUN')) or return False;
	&glRequestResidentProgramsNV = nativecast(:(GLsizei $n, CArray[GLuint] $programs), SDL_GL_GetProcAddress('glRequestResidentProgramsNV')) or return False;
	&glResetHistogram = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glResetHistogram')) or return False;
	&glResetHistogramEXT = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glResetHistogramEXT')) or return False;
	&glResetMemoryObjectParameterNV = nativecast(:(GLuint $memory, GLenum $pname), SDL_GL_GetProcAddress('glResetMemoryObjectParameterNV')) or return False;
	&glResetMinmax = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glResetMinmax')) or return False;
	&glResetMinmaxEXT = nativecast(:(GLenum $target), SDL_GL_GetProcAddress('glResetMinmaxEXT')) or return False;
	&glResizeBuffersMESA = nativecast(:(), SDL_GL_GetProcAddress('glResizeBuffersMESA')) or return False;
	&glResolveDepthValuesNV = nativecast(:(), SDL_GL_GetProcAddress('glResolveDepthValuesNV')) or return False;
	&glResolveMultisampleFramebufferAPPLE = nativecast(:(), SDL_GL_GetProcAddress('glResolveMultisampleFramebufferAPPLE')) or return False;
	&glResumeTransformFeedback = nativecast(:(), SDL_GL_GetProcAddress('glResumeTransformFeedback')) or return False;
	&glResumeTransformFeedbackNV = nativecast(:(), SDL_GL_GetProcAddress('glResumeTransformFeedbackNV')) or return False;
	&glRotated = nativecast(:(GLdouble $angle, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glRotated')) or return False;
	&glRotatef = nativecast(:(GLfloat $angle, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glRotatef')) or return False;
	&glRotatex = nativecast(:(GLfixed $angle, GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glRotatex')) or return False;
	&glRotatexOES = nativecast(:(GLfixed $angle, GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glRotatexOES')) or return False;
	&glSampleCoverage = nativecast(:(GLfloat $value, GLboolean $invert), SDL_GL_GetProcAddress('glSampleCoverage')) or return False;
	&glSampleCoverageARB = nativecast(:(GLfloat $value, GLboolean $invert), SDL_GL_GetProcAddress('glSampleCoverageARB')) or return False;
	&glSampleCoveragex = nativecast(:(GLclampx $value, GLboolean $invert), SDL_GL_GetProcAddress('glSampleCoveragex')) or return False;
	&glSampleCoveragexOES = nativecast(:(GLclampx $value, GLboolean $invert), SDL_GL_GetProcAddress('glSampleCoveragexOES')) or return False;
	&glSampleMapATI = nativecast(:(GLuint $dst, GLuint $interp, GLenum $swizzle), SDL_GL_GetProcAddress('glSampleMapATI')) or return False;
	&glSampleMaskEXT = nativecast(:(GLclampf $value, GLboolean $invert), SDL_GL_GetProcAddress('glSampleMaskEXT')) or return False;
	&glSampleMaskIndexedNV = nativecast(:(GLuint $index, GLbitfield $mask), SDL_GL_GetProcAddress('glSampleMaskIndexedNV')) or return False;
	&glSampleMaskSGIS = nativecast(:(GLclampf $value, GLboolean $invert), SDL_GL_GetProcAddress('glSampleMaskSGIS')) or return False;
	&glSampleMaski = nativecast(:(GLuint $maskNumber, GLbitfield $mask), SDL_GL_GetProcAddress('glSampleMaski')) or return False;
	&glSamplePatternEXT = nativecast(:(GLenum $pattern), SDL_GL_GetProcAddress('glSamplePatternEXT')) or return False;
	&glSamplePatternSGIS = nativecast(:(GLenum $pattern), SDL_GL_GetProcAddress('glSamplePatternSGIS')) or return False;
	&glSamplerParameterIiv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glSamplerParameterIiv')) or return False;
	&glSamplerParameterIivEXT = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glSamplerParameterIivEXT')) or return False;
	&glSamplerParameterIivOES = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glSamplerParameterIivOES')) or return False;
	&glSamplerParameterIuiv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLuint] $param), SDL_GL_GetProcAddress('glSamplerParameterIuiv')) or return False;
	&glSamplerParameterIuivEXT = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLuint] $param), SDL_GL_GetProcAddress('glSamplerParameterIuivEXT')) or return False;
	&glSamplerParameterIuivOES = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLuint] $param), SDL_GL_GetProcAddress('glSamplerParameterIuivOES')) or return False;
	&glSamplerParameterf = nativecast(:(GLuint $sampler, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glSamplerParameterf')) or return False;
	&glSamplerParameterfv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLfloat] $param), SDL_GL_GetProcAddress('glSamplerParameterfv')) or return False;
	&glSamplerParameteri = nativecast(:(GLuint $sampler, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glSamplerParameteri')) or return False;
	&glSamplerParameteriv = nativecast(:(GLuint $sampler, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glSamplerParameteriv')) or return False;
	&glScaled = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glScaled')) or return False;
	&glScalef = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glScalef')) or return False;
	&glScalex = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glScalex')) or return False;
	&glScalexOES = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glScalexOES')) or return False;
	&glScissor = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glScissor')) or return False;
	&glScissorArrayv = nativecast(:(GLuint $first, GLsizei $count, CArray[GLint] $v), SDL_GL_GetProcAddress('glScissorArrayv')) or return False;
	&glScissorArrayvNV = nativecast(:(GLuint $first, GLsizei $count, CArray[GLint] $v), SDL_GL_GetProcAddress('glScissorArrayvNV')) or return False;
	&glScissorArrayvOES = nativecast(:(GLuint $first, GLsizei $count, CArray[GLint] $v), SDL_GL_GetProcAddress('glScissorArrayvOES')) or return False;
	&glScissorExclusiveArrayvNV = nativecast(:(GLuint $first, GLsizei $count, CArray[GLint] $v), SDL_GL_GetProcAddress('glScissorExclusiveArrayvNV')) or return False;
	&glScissorExclusiveNV = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glScissorExclusiveNV')) or return False;
	&glScissorIndexed = nativecast(:(GLuint $index, GLint $left, GLint $bottom, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glScissorIndexed')) or return False;
	&glScissorIndexedNV = nativecast(:(GLuint $index, GLint $left, GLint $bottom, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glScissorIndexedNV')) or return False;
	&glScissorIndexedOES = nativecast(:(GLuint $index, GLint $left, GLint $bottom, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glScissorIndexedOES')) or return False;
	&glScissorIndexedv = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glScissorIndexedv')) or return False;
	&glScissorIndexedvNV = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glScissorIndexedvNV')) or return False;
	&glScissorIndexedvOES = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glScissorIndexedvOES')) or return False;
	&glSecondaryColor3b = nativecast(:(GLbyte $red, GLbyte $green, GLbyte $blue), SDL_GL_GetProcAddress('glSecondaryColor3b')) or return False;
	&glSecondaryColor3bEXT = nativecast(:(GLbyte $red, GLbyte $green, GLbyte $blue), SDL_GL_GetProcAddress('glSecondaryColor3bEXT')) or return False;
	&glSecondaryColor3bv = nativecast(:(CArray[GLbyte] $v), SDL_GL_GetProcAddress('glSecondaryColor3bv')) or return False;
	&glSecondaryColor3bvEXT = nativecast(:(CArray[GLbyte] $v), SDL_GL_GetProcAddress('glSecondaryColor3bvEXT')) or return False;
	&glSecondaryColor3d = nativecast(:(GLdouble $red, GLdouble $green, GLdouble $blue), SDL_GL_GetProcAddress('glSecondaryColor3d')) or return False;
	&glSecondaryColor3dEXT = nativecast(:(GLdouble $red, GLdouble $green, GLdouble $blue), SDL_GL_GetProcAddress('glSecondaryColor3dEXT')) or return False;
	&glSecondaryColor3dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glSecondaryColor3dv')) or return False;
	&glSecondaryColor3dvEXT = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glSecondaryColor3dvEXT')) or return False;
	&glSecondaryColor3f = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue), SDL_GL_GetProcAddress('glSecondaryColor3f')) or return False;
	&glSecondaryColor3fEXT = nativecast(:(GLfloat $red, GLfloat $green, GLfloat $blue), SDL_GL_GetProcAddress('glSecondaryColor3fEXT')) or return False;
	&glSecondaryColor3fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glSecondaryColor3fv')) or return False;
	&glSecondaryColor3fvEXT = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glSecondaryColor3fvEXT')) or return False;
	&glSecondaryColor3hNV = nativecast(:(GLhalfNV $red, GLhalfNV $green, GLhalfNV $blue), SDL_GL_GetProcAddress('glSecondaryColor3hNV')) or return False;
	&glSecondaryColor3hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glSecondaryColor3hvNV')) or return False;
	&glSecondaryColor3i = nativecast(:(GLint $red, GLint $green, GLint $blue), SDL_GL_GetProcAddress('glSecondaryColor3i')) or return False;
	&glSecondaryColor3iEXT = nativecast(:(GLint $red, GLint $green, GLint $blue), SDL_GL_GetProcAddress('glSecondaryColor3iEXT')) or return False;
	&glSecondaryColor3iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glSecondaryColor3iv')) or return False;
	&glSecondaryColor3ivEXT = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glSecondaryColor3ivEXT')) or return False;
	&glSecondaryColor3s = nativecast(:(GLshort $red, GLshort $green, GLshort $blue), SDL_GL_GetProcAddress('glSecondaryColor3s')) or return False;
	&glSecondaryColor3sEXT = nativecast(:(GLshort $red, GLshort $green, GLshort $blue), SDL_GL_GetProcAddress('glSecondaryColor3sEXT')) or return False;
	&glSecondaryColor3sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glSecondaryColor3sv')) or return False;
	&glSecondaryColor3svEXT = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glSecondaryColor3svEXT')) or return False;
	&glSecondaryColor3ub = nativecast(:(GLubyte $red, GLubyte $green, GLubyte $blue), SDL_GL_GetProcAddress('glSecondaryColor3ub')) or return False;
	&glSecondaryColor3ubEXT = nativecast(:(GLubyte $red, GLubyte $green, GLubyte $blue), SDL_GL_GetProcAddress('glSecondaryColor3ubEXT')) or return False;
	&glSecondaryColor3ubv = nativecast(:(CArray[GLubyte] $v), SDL_GL_GetProcAddress('glSecondaryColor3ubv')) or return False;
	&glSecondaryColor3ubvEXT = nativecast(:(CArray[GLubyte] $v), SDL_GL_GetProcAddress('glSecondaryColor3ubvEXT')) or return False;
	&glSecondaryColor3ui = nativecast(:(GLuint $red, GLuint $green, GLuint $blue), SDL_GL_GetProcAddress('glSecondaryColor3ui')) or return False;
	&glSecondaryColor3uiEXT = nativecast(:(GLuint $red, GLuint $green, GLuint $blue), SDL_GL_GetProcAddress('glSecondaryColor3uiEXT')) or return False;
	&glSecondaryColor3uiv = nativecast(:(CArray[GLuint] $v), SDL_GL_GetProcAddress('glSecondaryColor3uiv')) or return False;
	&glSecondaryColor3uivEXT = nativecast(:(CArray[GLuint] $v), SDL_GL_GetProcAddress('glSecondaryColor3uivEXT')) or return False;
	&glSecondaryColor3us = nativecast(:(GLushort $red, GLushort $green, GLushort $blue), SDL_GL_GetProcAddress('glSecondaryColor3us')) or return False;
	&glSecondaryColor3usEXT = nativecast(:(GLushort $red, GLushort $green, GLushort $blue), SDL_GL_GetProcAddress('glSecondaryColor3usEXT')) or return False;
	&glSecondaryColor3usv = nativecast(:(CArray[GLushort] $v), SDL_GL_GetProcAddress('glSecondaryColor3usv')) or return False;
	&glSecondaryColor3usvEXT = nativecast(:(CArray[GLushort] $v), SDL_GL_GetProcAddress('glSecondaryColor3usvEXT')) or return False;
	&glSecondaryColorFormatNV = nativecast(:(GLint $size, GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glSecondaryColorFormatNV')) or return False;
	&glSecondaryColorP3ui = nativecast(:(GLenum $type, GLuint $color), SDL_GL_GetProcAddress('glSecondaryColorP3ui')) or return False;
	&glSecondaryColorP3uiv = nativecast(:(GLenum $type, CArray[GLuint] $color), SDL_GL_GetProcAddress('glSecondaryColorP3uiv')) or return False;
	&glSecondaryColorPointer = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glSecondaryColorPointer')) or return False;
	&glSecondaryColorPointerEXT = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glSecondaryColorPointerEXT')) or return False;
	&glSecondaryColorPointerListIBM = nativecast(:(GLint $size, GLenum $type, GLint $stride, CArray[Pointer] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glSecondaryColorPointerListIBM')) or return False;
	&glSelectBuffer = nativecast(:(GLsizei $size, CArray[GLuint] $buffer), SDL_GL_GetProcAddress('glSelectBuffer')) or return False;
	&glSelectPerfMonitorCountersAMD = nativecast(:(GLuint $monitor, GLboolean $enable, GLuint $group, GLint $numCounters, CArray[GLuint] $counterList), SDL_GL_GetProcAddress('glSelectPerfMonitorCountersAMD')) or return False;
	&glSemaphoreParameterivNV = nativecast(:(GLuint $semaphore, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glSemaphoreParameterivNV')) or return False;
	&glSemaphoreParameterui64vEXT = nativecast(:(GLuint $semaphore, GLenum $pname, CArray[GLuint64] $params), SDL_GL_GetProcAddress('glSemaphoreParameterui64vEXT')) or return False;
	&glSeparableFilter2D = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $row, Pointer $column), SDL_GL_GetProcAddress('glSeparableFilter2D')) or return False;
	&glSeparableFilter2DEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $row, Pointer $column), SDL_GL_GetProcAddress('glSeparableFilter2DEXT')) or return False;
	&glSetFenceAPPLE = nativecast(:(GLuint $fence), SDL_GL_GetProcAddress('glSetFenceAPPLE')) or return False;
	&glSetFenceNV = nativecast(:(GLuint $fence, GLenum $condition), SDL_GL_GetProcAddress('glSetFenceNV')) or return False;
	&glSetFragmentShaderConstantATI = nativecast(:(GLuint $dst, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glSetFragmentShaderConstantATI')) or return False;
	&glSetInvariantEXT = nativecast(:(GLuint $id, GLenum $type, Pointer $addr), SDL_GL_GetProcAddress('glSetInvariantEXT')) or return False;
	&glSetLocalConstantEXT = nativecast(:(GLuint $id, GLenum $type, Pointer $addr), SDL_GL_GetProcAddress('glSetLocalConstantEXT')) or return False;
	&glSetMultisamplefvAMD = nativecast(:(GLenum $pname, GLuint $index, CArray[GLfloat] $val), SDL_GL_GetProcAddress('glSetMultisamplefvAMD')) or return False;
	&glShadeModel = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glShadeModel')) or return False;
	&glShaderBinary = nativecast(:(GLsizei $count, CArray[GLuint] $shaders, GLenum $binaryFormat, Pointer $binary, GLsizei $length), SDL_GL_GetProcAddress('glShaderBinary')) or return False;
	&glShaderOp1EXT = nativecast(:(GLenum $op, GLuint $res, GLuint $arg1), SDL_GL_GetProcAddress('glShaderOp1EXT')) or return False;
	&glShaderOp2EXT = nativecast(:(GLenum $op, GLuint $res, GLuint $arg1, GLuint $arg2), SDL_GL_GetProcAddress('glShaderOp2EXT')) or return False;
	&glShaderOp3EXT = nativecast(:(GLenum $op, GLuint $res, GLuint $arg1, GLuint $arg2, GLuint $arg3), SDL_GL_GetProcAddress('glShaderOp3EXT')) or return False;
	&glShaderSource = nativecast(:(GLuint $shader, GLsizei $count, CArray[Str] $string, CArray[GLint] $length), SDL_GL_GetProcAddress('glShaderSource')) or return False;
	&glShaderSourceARB = nativecast(:(GLhandleARB $shaderObj, GLsizei $count, CArray[Str] $string, CArray[GLint] $length), SDL_GL_GetProcAddress('glShaderSourceARB')) or return False;
	&glShaderStorageBlockBinding = nativecast(:(GLuint $program, GLuint $storageBlockIndex, GLuint $storageBlockBinding), SDL_GL_GetProcAddress('glShaderStorageBlockBinding')) or return False;
	&glShadingRateImageBarrierNV = nativecast(:(GLboolean $synchronize), SDL_GL_GetProcAddress('glShadingRateImageBarrierNV')) or return False;
	&glShadingRateQCOM = nativecast(:(GLenum $rate), SDL_GL_GetProcAddress('glShadingRateQCOM')) or return False;
	&glShadingRateImagePaletteNV = nativecast(:(GLuint $viewport, GLuint $first, GLsizei $count, CArray[GLenum] $rates), SDL_GL_GetProcAddress('glShadingRateImagePaletteNV')) or return False;
	&glShadingRateSampleOrderNV = nativecast(:(GLenum $order), SDL_GL_GetProcAddress('glShadingRateSampleOrderNV')) or return False;
	&glShadingRateSampleOrderCustomNV = nativecast(:(GLenum $rate, GLuint $samples, CArray[GLint] $locations), SDL_GL_GetProcAddress('glShadingRateSampleOrderCustomNV')) or return False;
	&glSharpenTexFuncSGIS = nativecast(:(GLenum $target, GLsizei $n, CArray[GLfloat] $points), SDL_GL_GetProcAddress('glSharpenTexFuncSGIS')) or return False;
	&glSignalSemaphoreEXT = nativecast(:(GLuint $semaphore, GLuint $numBufferBarriers, CArray[GLuint] $buffers, GLuint $numTextureBarriers, CArray[GLuint] $textures, CArray[GLenum] $dstLayouts), SDL_GL_GetProcAddress('glSignalSemaphoreEXT')) or return False;
	&glSignalSemaphoreui64NVX = nativecast(:(GLuint $signalGpu, GLsizei $fenceObjectCount, CArray[GLuint] $semaphoreArray, CArray[GLuint64] $fenceValueArray), SDL_GL_GetProcAddress('glSignalSemaphoreui64NVX')) or return False;
	&glSpecializeShader = nativecast(:(GLuint $shader, Str $pEntryPoint, GLuint $numSpecializationConstants, CArray[GLuint] $pConstantIndex, CArray[GLuint] $pConstantValue), SDL_GL_GetProcAddress('glSpecializeShader')) or return False;
	&glSpecializeShaderARB = nativecast(:(GLuint $shader, Str $pEntryPoint, GLuint $numSpecializationConstants, CArray[GLuint] $pConstantIndex, CArray[GLuint] $pConstantValue), SDL_GL_GetProcAddress('glSpecializeShaderARB')) or return False;
	&glSpriteParameterfSGIX = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glSpriteParameterfSGIX')) or return False;
	&glSpriteParameterfvSGIX = nativecast(:(GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glSpriteParameterfvSGIX')) or return False;
	&glSpriteParameteriSGIX = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glSpriteParameteriSGIX')) or return False;
	&glSpriteParameterivSGIX = nativecast(:(GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glSpriteParameterivSGIX')) or return False;
	&glStartInstrumentsSGIX = nativecast(:(), SDL_GL_GetProcAddress('glStartInstrumentsSGIX')) or return False;
	&glStartTilingQCOM = nativecast(:(GLuint $x, GLuint $y, GLuint $width, GLuint $height, GLbitfield $preserveMask), SDL_GL_GetProcAddress('glStartTilingQCOM')) or return False;
	&glStateCaptureNV = nativecast(:(GLuint $state, GLenum $mode), SDL_GL_GetProcAddress('glStateCaptureNV')) or return False;
	&glStencilClearTagEXT = nativecast(:(GLsizei $stencilTagBits, GLuint $stencilClearTag), SDL_GL_GetProcAddress('glStencilClearTagEXT')) or return False;
	&glStencilFillPathInstancedNV = nativecast(:(GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLenum $fillMode, GLuint $mask, GLenum $transformType, CArray[GLfloat] $transformValues), SDL_GL_GetProcAddress('glStencilFillPathInstancedNV')) or return False;
	&glStencilFillPathNV = nativecast(:(GLuint $path, GLenum $fillMode, GLuint $mask), SDL_GL_GetProcAddress('glStencilFillPathNV')) or return False;
	&glStencilFunc = nativecast(:(GLenum $func, GLint $ref, GLuint $mask), SDL_GL_GetProcAddress('glStencilFunc')) or return False;
	&glStencilFuncSeparate = nativecast(:(GLenum $face, GLenum $func, GLint $ref, GLuint $mask), SDL_GL_GetProcAddress('glStencilFuncSeparate')) or return False;
	&glStencilFuncSeparateATI = nativecast(:(GLenum $frontfunc, GLenum $backfunc, GLint $ref, GLuint $mask), SDL_GL_GetProcAddress('glStencilFuncSeparateATI')) or return False;
	&glStencilMask = nativecast(:(GLuint $mask), SDL_GL_GetProcAddress('glStencilMask')) or return False;
	&glStencilMaskSeparate = nativecast(:(GLenum $face, GLuint $mask), SDL_GL_GetProcAddress('glStencilMaskSeparate')) or return False;
	&glStencilOp = nativecast(:(GLenum $fail, GLenum $zfail, GLenum $zpass), SDL_GL_GetProcAddress('glStencilOp')) or return False;
	&glStencilOpSeparate = nativecast(:(GLenum $face, GLenum $sfail, GLenum $dpfail, GLenum $dppass), SDL_GL_GetProcAddress('glStencilOpSeparate')) or return False;
	&glStencilOpSeparateATI = nativecast(:(GLenum $face, GLenum $sfail, GLenum $dpfail, GLenum $dppass), SDL_GL_GetProcAddress('glStencilOpSeparateATI')) or return False;
	&glStencilOpValueAMD = nativecast(:(GLenum $face, GLuint $value), SDL_GL_GetProcAddress('glStencilOpValueAMD')) or return False;
	&glStencilStrokePathInstancedNV = nativecast(:(GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLint $reference, GLuint $mask, GLenum $transformType, CArray[GLfloat] $transformValues), SDL_GL_GetProcAddress('glStencilStrokePathInstancedNV')) or return False;
	&glStencilStrokePathNV = nativecast(:(GLuint $path, GLint $reference, GLuint $mask), SDL_GL_GetProcAddress('glStencilStrokePathNV')) or return False;
	&glStencilThenCoverFillPathInstancedNV = nativecast(:(GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLenum $fillMode, GLuint $mask, GLenum $coverMode, GLenum $transformType, CArray[GLfloat] $transformValues), SDL_GL_GetProcAddress('glStencilThenCoverFillPathInstancedNV')) or return False;
	&glStencilThenCoverFillPathNV = nativecast(:(GLuint $path, GLenum $fillMode, GLuint $mask, GLenum $coverMode), SDL_GL_GetProcAddress('glStencilThenCoverFillPathNV')) or return False;
	&glStencilThenCoverStrokePathInstancedNV = nativecast(:(GLsizei $numPaths, GLenum $pathNameType, Pointer $paths, GLuint $pathBase, GLint $reference, GLuint $mask, GLenum $coverMode, GLenum $transformType, CArray[GLfloat] $transformValues), SDL_GL_GetProcAddress('glStencilThenCoverStrokePathInstancedNV')) or return False;
	&glStencilThenCoverStrokePathNV = nativecast(:(GLuint $path, GLint $reference, GLuint $mask, GLenum $coverMode), SDL_GL_GetProcAddress('glStencilThenCoverStrokePathNV')) or return False;
	&glStopInstrumentsSGIX = nativecast(:(GLint $marker), SDL_GL_GetProcAddress('glStopInstrumentsSGIX')) or return False;
	&glStringMarkerGREMEDY = nativecast(:(GLsizei $len, Pointer $string), SDL_GL_GetProcAddress('glStringMarkerGREMEDY')) or return False;
	&glSubpixelPrecisionBiasNV = nativecast(:(GLuint $xbits, GLuint $ybits), SDL_GL_GetProcAddress('glSubpixelPrecisionBiasNV')) or return False;
	&glSwizzleEXT = nativecast(:(GLuint $res, GLuint $in, GLenum $outX, GLenum $outY, GLenum $outZ, GLenum $outW), SDL_GL_GetProcAddress('glSwizzleEXT')) or return False;
	&glSyncTextureINTEL = nativecast(:(GLuint $texture), SDL_GL_GetProcAddress('glSyncTextureINTEL')) or return False;
	&glTagSampleBufferSGIX = nativecast(:(), SDL_GL_GetProcAddress('glTagSampleBufferSGIX')) or return False;
	&glTangent3bEXT = nativecast(:(GLbyte $tx, GLbyte $ty, GLbyte $tz), SDL_GL_GetProcAddress('glTangent3bEXT')) or return False;
	&glTangent3bvEXT = nativecast(:(CArray[GLbyte] $v), SDL_GL_GetProcAddress('glTangent3bvEXT')) or return False;
	&glTangent3dEXT = nativecast(:(GLdouble $tx, GLdouble $ty, GLdouble $tz), SDL_GL_GetProcAddress('glTangent3dEXT')) or return False;
	&glTangent3dvEXT = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glTangent3dvEXT')) or return False;
	&glTangent3fEXT = nativecast(:(GLfloat $tx, GLfloat $ty, GLfloat $tz), SDL_GL_GetProcAddress('glTangent3fEXT')) or return False;
	&glTangent3fvEXT = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTangent3fvEXT')) or return False;
	&glTangent3iEXT = nativecast(:(GLint $tx, GLint $ty, GLint $tz), SDL_GL_GetProcAddress('glTangent3iEXT')) or return False;
	&glTangent3ivEXT = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glTangent3ivEXT')) or return False;
	&glTangent3sEXT = nativecast(:(GLshort $tx, GLshort $ty, GLshort $tz), SDL_GL_GetProcAddress('glTangent3sEXT')) or return False;
	&glTangent3svEXT = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glTangent3svEXT')) or return False;
	&glTangentPointerEXT = nativecast(:(GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glTangentPointerEXT')) or return False;
	&glTbufferMask3DFX = nativecast(:(GLuint $mask), SDL_GL_GetProcAddress('glTbufferMask3DFX')) or return False;
	&glTessellationFactorAMD = nativecast(:(GLfloat $factor), SDL_GL_GetProcAddress('glTessellationFactorAMD')) or return False;
	&glTessellationModeAMD = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glTessellationModeAMD')) or return False;
	&glTestFenceAPPLE = nativecast(:(GLuint $fence --> GLboolean), SDL_GL_GetProcAddress('glTestFenceAPPLE')) or return False;
	&glTestFenceNV = nativecast(:(GLuint $fence --> GLboolean), SDL_GL_GetProcAddress('glTestFenceNV')) or return False;
	&glTestObjectAPPLE = nativecast(:(GLenum $object, GLuint $name --> GLboolean), SDL_GL_GetProcAddress('glTestObjectAPPLE')) or return False;
	&glTexAttachMemoryNV = nativecast(:(GLenum $target, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTexAttachMemoryNV')) or return False;
	&glTexBuffer = nativecast(:(GLenum $target, GLenum $internalformat, GLuint $buffer), SDL_GL_GetProcAddress('glTexBuffer')) or return False;
	&glTexBufferARB = nativecast(:(GLenum $target, GLenum $internalformat, GLuint $buffer), SDL_GL_GetProcAddress('glTexBufferARB')) or return False;
	&glTexBufferEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLuint $buffer), SDL_GL_GetProcAddress('glTexBufferEXT')) or return False;
	&glTexBufferOES = nativecast(:(GLenum $target, GLenum $internalformat, GLuint $buffer), SDL_GL_GetProcAddress('glTexBufferOES')) or return False;
	&glTexBufferRange = nativecast(:(GLenum $target, GLenum $internalformat, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glTexBufferRange')) or return False;
	&glTexBufferRangeEXT = nativecast(:(GLenum $target, GLenum $internalformat, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glTexBufferRangeEXT')) or return False;
	&glTexBufferRangeOES = nativecast(:(GLenum $target, GLenum $internalformat, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glTexBufferRangeOES')) or return False;
	&glTexBumpParameterfvATI = nativecast(:(GLenum $pname, CArray[GLfloat] $param), SDL_GL_GetProcAddress('glTexBumpParameterfvATI')) or return False;
	&glTexBumpParameterivATI = nativecast(:(GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glTexBumpParameterivATI')) or return False;
	&glTexCoord1bOES = nativecast(:(GLbyte $s), SDL_GL_GetProcAddress('glTexCoord1bOES')) or return False;
	&glTexCoord1bvOES = nativecast(:(CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glTexCoord1bvOES')) or return False;
	&glTexCoord1d = nativecast(:(GLdouble $s), SDL_GL_GetProcAddress('glTexCoord1d')) or return False;
	&glTexCoord1dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glTexCoord1dv')) or return False;
	&glTexCoord1f = nativecast(:(GLfloat $s), SDL_GL_GetProcAddress('glTexCoord1f')) or return False;
	&glTexCoord1fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord1fv')) or return False;
	&glTexCoord1hNV = nativecast(:(GLhalfNV $s), SDL_GL_GetProcAddress('glTexCoord1hNV')) or return False;
	&glTexCoord1hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glTexCoord1hvNV')) or return False;
	&glTexCoord1i = nativecast(:(GLint $s), SDL_GL_GetProcAddress('glTexCoord1i')) or return False;
	&glTexCoord1iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glTexCoord1iv')) or return False;
	&glTexCoord1s = nativecast(:(GLshort $s), SDL_GL_GetProcAddress('glTexCoord1s')) or return False;
	&glTexCoord1sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glTexCoord1sv')) or return False;
	&glTexCoord1xOES = nativecast(:(GLfixed $s), SDL_GL_GetProcAddress('glTexCoord1xOES')) or return False;
	&glTexCoord1xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glTexCoord1xvOES')) or return False;
	&glTexCoord2bOES = nativecast(:(GLbyte $s, GLbyte $t), SDL_GL_GetProcAddress('glTexCoord2bOES')) or return False;
	&glTexCoord2bvOES = nativecast(:(CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glTexCoord2bvOES')) or return False;
	&glTexCoord2d = nativecast(:(GLdouble $s, GLdouble $t), SDL_GL_GetProcAddress('glTexCoord2d')) or return False;
	&glTexCoord2dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glTexCoord2dv')) or return False;
	&glTexCoord2f = nativecast(:(GLfloat $s, GLfloat $t), SDL_GL_GetProcAddress('glTexCoord2f')) or return False;
	&glTexCoord2fColor3fVertex3fSUN = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glTexCoord2fColor3fVertex3fSUN')) or return False;
	&glTexCoord2fColor3fVertex3fvSUN = nativecast(:(CArray[GLfloat] $tc, CArray[GLfloat] $c, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord2fColor3fVertex3fvSUN')) or return False;
	&glTexCoord2fColor4fNormal3fVertex3fSUN = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $a, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glTexCoord2fColor4fNormal3fVertex3fSUN')) or return False;
	&glTexCoord2fColor4fNormal3fVertex3fvSUN = nativecast(:(CArray[GLfloat] $tc, CArray[GLfloat] $c, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord2fColor4fNormal3fVertex3fvSUN')) or return False;
	&glTexCoord2fColor4ubVertex3fSUN = nativecast(:(GLfloat $s, GLfloat $t, GLubyte $r, GLubyte $g, GLubyte $b, GLubyte $a, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glTexCoord2fColor4ubVertex3fSUN')) or return False;
	&glTexCoord2fColor4ubVertex3fvSUN = nativecast(:(CArray[GLfloat] $tc, CArray[GLubyte] $c, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord2fColor4ubVertex3fvSUN')) or return False;
	&glTexCoord2fNormal3fVertex3fSUN = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glTexCoord2fNormal3fVertex3fSUN')) or return False;
	&glTexCoord2fNormal3fVertex3fvSUN = nativecast(:(CArray[GLfloat] $tc, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord2fNormal3fVertex3fvSUN')) or return False;
	&glTexCoord2fVertex3fSUN = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glTexCoord2fVertex3fSUN')) or return False;
	&glTexCoord2fVertex3fvSUN = nativecast(:(CArray[GLfloat] $tc, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord2fVertex3fvSUN')) or return False;
	&glTexCoord2fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord2fv')) or return False;
	&glTexCoord2hNV = nativecast(:(GLhalfNV $s, GLhalfNV $t), SDL_GL_GetProcAddress('glTexCoord2hNV')) or return False;
	&glTexCoord2hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glTexCoord2hvNV')) or return False;
	&glTexCoord2i = nativecast(:(GLint $s, GLint $t), SDL_GL_GetProcAddress('glTexCoord2i')) or return False;
	&glTexCoord2iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glTexCoord2iv')) or return False;
	&glTexCoord2s = nativecast(:(GLshort $s, GLshort $t), SDL_GL_GetProcAddress('glTexCoord2s')) or return False;
	&glTexCoord2sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glTexCoord2sv')) or return False;
	&glTexCoord2xOES = nativecast(:(GLfixed $s, GLfixed $t), SDL_GL_GetProcAddress('glTexCoord2xOES')) or return False;
	&glTexCoord2xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glTexCoord2xvOES')) or return False;
	&glTexCoord3bOES = nativecast(:(GLbyte $s, GLbyte $t, GLbyte $r), SDL_GL_GetProcAddress('glTexCoord3bOES')) or return False;
	&glTexCoord3bvOES = nativecast(:(CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glTexCoord3bvOES')) or return False;
	&glTexCoord3d = nativecast(:(GLdouble $s, GLdouble $t, GLdouble $r), SDL_GL_GetProcAddress('glTexCoord3d')) or return False;
	&glTexCoord3dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glTexCoord3dv')) or return False;
	&glTexCoord3f = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $r), SDL_GL_GetProcAddress('glTexCoord3f')) or return False;
	&glTexCoord3fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord3fv')) or return False;
	&glTexCoord3hNV = nativecast(:(GLhalfNV $s, GLhalfNV $t, GLhalfNV $r), SDL_GL_GetProcAddress('glTexCoord3hNV')) or return False;
	&glTexCoord3hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glTexCoord3hvNV')) or return False;
	&glTexCoord3i = nativecast(:(GLint $s, GLint $t, GLint $r), SDL_GL_GetProcAddress('glTexCoord3i')) or return False;
	&glTexCoord3iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glTexCoord3iv')) or return False;
	&glTexCoord3s = nativecast(:(GLshort $s, GLshort $t, GLshort $r), SDL_GL_GetProcAddress('glTexCoord3s')) or return False;
	&glTexCoord3sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glTexCoord3sv')) or return False;
	&glTexCoord3xOES = nativecast(:(GLfixed $s, GLfixed $t, GLfixed $r), SDL_GL_GetProcAddress('glTexCoord3xOES')) or return False;
	&glTexCoord3xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glTexCoord3xvOES')) or return False;
	&glTexCoord4bOES = nativecast(:(GLbyte $s, GLbyte $t, GLbyte $r, GLbyte $q), SDL_GL_GetProcAddress('glTexCoord4bOES')) or return False;
	&glTexCoord4bvOES = nativecast(:(CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glTexCoord4bvOES')) or return False;
	&glTexCoord4d = nativecast(:(GLdouble $s, GLdouble $t, GLdouble $r, GLdouble $q), SDL_GL_GetProcAddress('glTexCoord4d')) or return False;
	&glTexCoord4dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glTexCoord4dv')) or return False;
	&glTexCoord4f = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $r, GLfloat $q), SDL_GL_GetProcAddress('glTexCoord4f')) or return False;
	&glTexCoord4fColor4fNormal3fVertex4fSUN = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $p, GLfloat $q, GLfloat $r, GLfloat $g, GLfloat $b, GLfloat $a, GLfloat $nx, GLfloat $ny, GLfloat $nz, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glTexCoord4fColor4fNormal3fVertex4fSUN')) or return False;
	&glTexCoord4fColor4fNormal3fVertex4fvSUN = nativecast(:(CArray[GLfloat] $tc, CArray[GLfloat] $c, CArray[GLfloat] $n, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord4fColor4fNormal3fVertex4fvSUN')) or return False;
	&glTexCoord4fVertex4fSUN = nativecast(:(GLfloat $s, GLfloat $t, GLfloat $p, GLfloat $q, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glTexCoord4fVertex4fSUN')) or return False;
	&glTexCoord4fVertex4fvSUN = nativecast(:(CArray[GLfloat] $tc, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord4fVertex4fvSUN')) or return False;
	&glTexCoord4fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glTexCoord4fv')) or return False;
	&glTexCoord4hNV = nativecast(:(GLhalfNV $s, GLhalfNV $t, GLhalfNV $r, GLhalfNV $q), SDL_GL_GetProcAddress('glTexCoord4hNV')) or return False;
	&glTexCoord4hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glTexCoord4hvNV')) or return False;
	&glTexCoord4i = nativecast(:(GLint $s, GLint $t, GLint $r, GLint $q), SDL_GL_GetProcAddress('glTexCoord4i')) or return False;
	&glTexCoord4iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glTexCoord4iv')) or return False;
	&glTexCoord4s = nativecast(:(GLshort $s, GLshort $t, GLshort $r, GLshort $q), SDL_GL_GetProcAddress('glTexCoord4s')) or return False;
	&glTexCoord4sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glTexCoord4sv')) or return False;
	&glTexCoord4xOES = nativecast(:(GLfixed $s, GLfixed $t, GLfixed $r, GLfixed $q), SDL_GL_GetProcAddress('glTexCoord4xOES')) or return False;
	&glTexCoord4xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glTexCoord4xvOES')) or return False;
	&glTexCoordFormatNV = nativecast(:(GLint $size, GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glTexCoordFormatNV')) or return False;
	&glTexCoordP1ui = nativecast(:(GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glTexCoordP1ui')) or return False;
	&glTexCoordP1uiv = nativecast(:(GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glTexCoordP1uiv')) or return False;
	&glTexCoordP2ui = nativecast(:(GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glTexCoordP2ui')) or return False;
	&glTexCoordP2uiv = nativecast(:(GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glTexCoordP2uiv')) or return False;
	&glTexCoordP3ui = nativecast(:(GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glTexCoordP3ui')) or return False;
	&glTexCoordP3uiv = nativecast(:(GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glTexCoordP3uiv')) or return False;
	&glTexCoordP4ui = nativecast(:(GLenum $type, GLuint $coords), SDL_GL_GetProcAddress('glTexCoordP4ui')) or return False;
	&glTexCoordP4uiv = nativecast(:(GLenum $type, CArray[GLuint] $coords), SDL_GL_GetProcAddress('glTexCoordP4uiv')) or return False;
	&glTexCoordPointer = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glTexCoordPointer')) or return False;
	&glTexCoordPointerEXT = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, GLsizei $count, Pointer $pointer), SDL_GL_GetProcAddress('glTexCoordPointerEXT')) or return False;
	&glTexCoordPointerListIBM = nativecast(:(GLint $size, GLenum $type, GLint $stride, CArray[Pointer] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glTexCoordPointerListIBM')) or return False;
	&glTexCoordPointervINTEL = nativecast(:(GLint $size, GLenum $type, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glTexCoordPointervINTEL')) or return False;
	&glTexEnvf = nativecast(:(GLenum $target, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glTexEnvf')) or return False;
	&glTexEnvfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glTexEnvfv')) or return False;
	&glTexEnvi = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glTexEnvi')) or return False;
	&glTexEnviv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTexEnviv')) or return False;
	&glTexEnvx = nativecast(:(GLenum $target, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glTexEnvx')) or return False;
	&glTexEnvxOES = nativecast(:(GLenum $target, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glTexEnvxOES')) or return False;
	&glTexEnvxv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glTexEnvxv')) or return False;
	&glTexEnvxvOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glTexEnvxvOES')) or return False;
	&glTexEstimateMotionQCOM = nativecast(:(GLuint $ref, GLuint $target, GLuint $output), SDL_GL_GetProcAddress('glTexEstimateMotionQCOM')) or return False;
	&glTexEstimateMotionRegionsQCOM = nativecast(:(GLuint $ref, GLuint $target, GLuint $output, GLuint $mask), SDL_GL_GetProcAddress('glTexEstimateMotionRegionsQCOM')) or return False;
	&glExtrapolateTex2DQCOM = nativecast(:(GLuint $src1, GLuint $src2, GLuint $output, GLfloat $scaleFactor), SDL_GL_GetProcAddress('glExtrapolateTex2DQCOM')) or return False;
	&glTexFilterFuncSGIS = nativecast(:(GLenum $target, GLenum $filter, GLsizei $n, CArray[GLfloat] $weights), SDL_GL_GetProcAddress('glTexFilterFuncSGIS')) or return False;
	&glTexGend = nativecast(:(GLenum $coord, GLenum $pname, GLdouble $param), SDL_GL_GetProcAddress('glTexGend')) or return False;
	&glTexGendv = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glTexGendv')) or return False;
	&glTexGenf = nativecast(:(GLenum $coord, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glTexGenf')) or return False;
	&glTexGenfOES = nativecast(:(GLenum $coord, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glTexGenfOES')) or return False;
	&glTexGenfv = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glTexGenfv')) or return False;
	&glTexGenfvOES = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glTexGenfvOES')) or return False;
	&glTexGeni = nativecast(:(GLenum $coord, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glTexGeni')) or return False;
	&glTexGeniOES = nativecast(:(GLenum $coord, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glTexGeniOES')) or return False;
	&glTexGeniv = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTexGeniv')) or return False;
	&glTexGenivOES = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTexGenivOES')) or return False;
	&glTexGenxOES = nativecast(:(GLenum $coord, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glTexGenxOES')) or return False;
	&glTexGenxvOES = nativecast(:(GLenum $coord, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glTexGenxvOES')) or return False;
	&glTexImage1D = nativecast(:(GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexImage1D')) or return False;
	&glTexImage2D = nativecast(:(GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLsizei $height, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexImage2D')) or return False;
	&glTexImage2DMultisample = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTexImage2DMultisample')) or return False;
	&glTexImage2DMultisampleCoverageNV = nativecast(:(GLenum $target, GLsizei $coverageSamples, GLsizei $colorSamples, GLint $internalFormat, GLsizei $width, GLsizei $height, GLboolean $fixedSampleLocations), SDL_GL_GetProcAddress('glTexImage2DMultisampleCoverageNV')) or return False;
	&glTexImage3D = nativecast(:(GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexImage3D')) or return False;
	&glTexImage3DEXT = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexImage3DEXT')) or return False;
	&glTexImage3DMultisample = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTexImage3DMultisample')) or return False;
	&glTexImage3DMultisampleCoverageNV = nativecast(:(GLenum $target, GLsizei $coverageSamples, GLsizei $colorSamples, GLint $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedSampleLocations), SDL_GL_GetProcAddress('glTexImage3DMultisampleCoverageNV')) or return False;
	&glTexImage3DOES = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexImage3DOES')) or return False;
	&glTexImage4DSGIS = nativecast(:(GLenum $target, GLint $level, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLsizei $size4d, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexImage4DSGIS')) or return False;
	&glTexPageCommitmentARB = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $commit), SDL_GL_GetProcAddress('glTexPageCommitmentARB')) or return False;
	&glTexPageCommitmentEXT = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $commit), SDL_GL_GetProcAddress('glTexPageCommitmentEXT')) or return False;
	&glTexPageCommitmentMemNV = nativecast(:(GLenum $target, GLint $layer, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLuint $memory, GLuint64 $offset, GLboolean $commit), SDL_GL_GetProcAddress('glTexPageCommitmentMemNV')) or return False;
	&glTexParameterIiv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTexParameterIiv')) or return False;
	&glTexParameterIivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTexParameterIivEXT')) or return False;
	&glTexParameterIivOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTexParameterIivOES')) or return False;
	&glTexParameterIuiv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glTexParameterIuiv')) or return False;
	&glTexParameterIuivEXT = nativecast(:(GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glTexParameterIuivEXT')) or return False;
	&glTexParameterIuivOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glTexParameterIuivOES')) or return False;
	&glTexParameterf = nativecast(:(GLenum $target, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glTexParameterf')) or return False;
	&glTexParameterfv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glTexParameterfv')) or return False;
	&glTexParameteri = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glTexParameteri')) or return False;
	&glTexParameteriv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTexParameteriv')) or return False;
	&glTexParameterx = nativecast(:(GLenum $target, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glTexParameterx')) or return False;
	&glTexParameterxOES = nativecast(:(GLenum $target, GLenum $pname, GLfixed $param), SDL_GL_GetProcAddress('glTexParameterxOES')) or return False;
	&glTexParameterxv = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glTexParameterxv')) or return False;
	&glTexParameterxvOES = nativecast(:(GLenum $target, GLenum $pname, CArray[GLfixed] $params), SDL_GL_GetProcAddress('glTexParameterxvOES')) or return False;
	&glTexRenderbufferNV = nativecast(:(GLenum $target, GLuint $renderbuffer), SDL_GL_GetProcAddress('glTexRenderbufferNV')) or return False;
	&glTexStorage1D = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width), SDL_GL_GetProcAddress('glTexStorage1D')) or return False;
	&glTexStorage1DEXT = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width), SDL_GL_GetProcAddress('glTexStorage1DEXT')) or return False;
	&glTexStorage2D = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glTexStorage2D')) or return False;
	&glTexStorage2DEXT = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glTexStorage2DEXT')) or return False;
	&glTexStorage2DMultisample = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTexStorage2DMultisample')) or return False;
	&glTexStorage3D = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth), SDL_GL_GetProcAddress('glTexStorage3D')) or return False;
	&glTexStorage3DEXT = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth), SDL_GL_GetProcAddress('glTexStorage3DEXT')) or return False;
	&glTexStorage3DMultisample = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTexStorage3DMultisample')) or return False;
	&glTexStorage3DMultisampleOES = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTexStorage3DMultisampleOES')) or return False;
	&glTexStorageMem1DEXT = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalFormat, GLsizei $width, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTexStorageMem1DEXT')) or return False;
	&glTexStorageMem2DEXT = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTexStorageMem2DEXT')) or return False;
	&glTexStorageMem2DMultisampleEXT = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLboolean $fixedSampleLocations, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTexStorageMem2DMultisampleEXT')) or return False;
	&glTexStorageMem3DEXT = nativecast(:(GLenum $target, GLsizei $levels, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTexStorageMem3DEXT')) or return False;
	&glTexStorageMem3DMultisampleEXT = nativecast(:(GLenum $target, GLsizei $samples, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedSampleLocations, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTexStorageMem3DMultisampleEXT')) or return False;
	&glTexStorageSparseAMD = nativecast(:(GLenum $target, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLsizei $layers, GLbitfield $flags), SDL_GL_GetProcAddress('glTexStorageSparseAMD')) or return False;
	&glTexSubImage1D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage1D')) or return False;
	&glTexSubImage1DEXT = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage1DEXT')) or return False;
	&glTexSubImage2D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage2D')) or return False;
	&glTexSubImage2DEXT = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage2DEXT')) or return False;
	&glTexSubImage3D = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage3D')) or return False;
	&glTexSubImage3DEXT = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage3DEXT')) or return False;
	&glTexSubImage3DOES = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage3DOES')) or return False;
	&glTexSubImage4DSGIS = nativecast(:(GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLint $woffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLsizei $size4d, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTexSubImage4DSGIS')) or return False;
	&glTextureAttachMemoryNV = nativecast(:(GLuint $texture, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTextureAttachMemoryNV')) or return False;
	&glTextureBarrier = nativecast(:(), SDL_GL_GetProcAddress('glTextureBarrier')) or return False;
	&glTextureBarrierNV = nativecast(:(), SDL_GL_GetProcAddress('glTextureBarrierNV')) or return False;
	&glTextureBuffer = nativecast(:(GLuint $texture, GLenum $internalformat, GLuint $buffer), SDL_GL_GetProcAddress('glTextureBuffer')) or return False;
	&glTextureBufferEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $internalformat, GLuint $buffer), SDL_GL_GetProcAddress('glTextureBufferEXT')) or return False;
	&glTextureBufferRange = nativecast(:(GLuint $texture, GLenum $internalformat, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glTextureBufferRange')) or return False;
	&glTextureBufferRangeEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $internalformat, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glTextureBufferRangeEXT')) or return False;
	&glTextureColorMaskSGIS = nativecast(:(GLboolean $red, GLboolean $green, GLboolean $blue, GLboolean $alpha), SDL_GL_GetProcAddress('glTextureColorMaskSGIS')) or return False;
	&glTextureFoveationParametersQCOM = nativecast(:(GLuint $texture, GLuint $layer, GLuint $focalPoint, GLfloat $focalX, GLfloat $focalY, GLfloat $gainX, GLfloat $gainY, GLfloat $foveaArea), SDL_GL_GetProcAddress('glTextureFoveationParametersQCOM')) or return False;
	&glTextureImage1DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureImage1DEXT')) or return False;
	&glTextureImage2DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLsizei $height, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureImage2DEXT')) or return False;
	&glTextureImage2DMultisampleCoverageNV = nativecast(:(GLuint $texture, GLenum $target, GLsizei $coverageSamples, GLsizei $colorSamples, GLint $internalFormat, GLsizei $width, GLsizei $height, GLboolean $fixedSampleLocations), SDL_GL_GetProcAddress('glTextureImage2DMultisampleCoverageNV')) or return False;
	&glTextureImage2DMultisampleNV = nativecast(:(GLuint $texture, GLenum $target, GLsizei $samples, GLint $internalFormat, GLsizei $width, GLsizei $height, GLboolean $fixedSampleLocations), SDL_GL_GetProcAddress('glTextureImage2DMultisampleNV')) or return False;
	&glTextureImage3DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLint $border, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureImage3DEXT')) or return False;
	&glTextureImage3DMultisampleCoverageNV = nativecast(:(GLuint $texture, GLenum $target, GLsizei $coverageSamples, GLsizei $colorSamples, GLint $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedSampleLocations), SDL_GL_GetProcAddress('glTextureImage3DMultisampleCoverageNV')) or return False;
	&glTextureImage3DMultisampleNV = nativecast(:(GLuint $texture, GLenum $target, GLsizei $samples, GLint $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedSampleLocations), SDL_GL_GetProcAddress('glTextureImage3DMultisampleNV')) or return False;
	&glTextureLightEXT = nativecast(:(GLenum $pname), SDL_GL_GetProcAddress('glTextureLightEXT')) or return False;
	&glTextureMaterialEXT = nativecast(:(GLenum $face, GLenum $mode), SDL_GL_GetProcAddress('glTextureMaterialEXT')) or return False;
	&glTextureNormalEXT = nativecast(:(GLenum $mode), SDL_GL_GetProcAddress('glTextureNormalEXT')) or return False;
	&glTexturePageCommitmentEXT = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $commit), SDL_GL_GetProcAddress('glTexturePageCommitmentEXT')) or return False;
	&glTexturePageCommitmentMemNV = nativecast(:(GLuint $texture, GLint $layer, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLuint $memory, GLuint64 $offset, GLboolean $commit), SDL_GL_GetProcAddress('glTexturePageCommitmentMemNV')) or return False;
	&glTextureParameterIiv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTextureParameterIiv')) or return False;
	&glTextureParameterIivEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTextureParameterIivEXT')) or return False;
	&glTextureParameterIuiv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glTextureParameterIuiv')) or return False;
	&glTextureParameterIuivEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLuint] $params), SDL_GL_GetProcAddress('glTextureParameterIuivEXT')) or return False;
	&glTextureParameterf = nativecast(:(GLuint $texture, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glTextureParameterf')) or return False;
	&glTextureParameterfEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glTextureParameterfEXT')) or return False;
	&glTextureParameterfv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLfloat] $param), SDL_GL_GetProcAddress('glTextureParameterfv')) or return False;
	&glTextureParameterfvEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glTextureParameterfvEXT')) or return False;
	&glTextureParameteri = nativecast(:(GLuint $texture, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glTextureParameteri')) or return False;
	&glTextureParameteriEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glTextureParameteriEXT')) or return False;
	&glTextureParameteriv = nativecast(:(GLuint $texture, GLenum $pname, CArray[GLint] $param), SDL_GL_GetProcAddress('glTextureParameteriv')) or return False;
	&glTextureParameterivEXT = nativecast(:(GLuint $texture, GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glTextureParameterivEXT')) or return False;
	&glTextureRangeAPPLE = nativecast(:(GLenum $target, GLsizei $length, Pointer $pointer), SDL_GL_GetProcAddress('glTextureRangeAPPLE')) or return False;
	&glTextureRenderbufferEXT = nativecast(:(GLuint $texture, GLenum $target, GLuint $renderbuffer), SDL_GL_GetProcAddress('glTextureRenderbufferEXT')) or return False;
	&glTextureStorage1D = nativecast(:(GLuint $texture, GLsizei $levels, GLenum $internalformat, GLsizei $width), SDL_GL_GetProcAddress('glTextureStorage1D')) or return False;
	&glTextureStorage1DEXT = nativecast(:(GLuint $texture, GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width), SDL_GL_GetProcAddress('glTextureStorage1DEXT')) or return False;
	&glTextureStorage2D = nativecast(:(GLuint $texture, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glTextureStorage2D')) or return False;
	&glTextureStorage2DEXT = nativecast(:(GLuint $texture, GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glTextureStorage2DEXT')) or return False;
	&glTextureStorage2DMultisample = nativecast(:(GLuint $texture, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTextureStorage2DMultisample')) or return False;
	&glTextureStorage2DMultisampleEXT = nativecast(:(GLuint $texture, GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTextureStorage2DMultisampleEXT')) or return False;
	&glTextureStorage3D = nativecast(:(GLuint $texture, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth), SDL_GL_GetProcAddress('glTextureStorage3D')) or return False;
	&glTextureStorage3DEXT = nativecast(:(GLuint $texture, GLenum $target, GLsizei $levels, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth), SDL_GL_GetProcAddress('glTextureStorage3DEXT')) or return False;
	&glTextureStorage3DMultisample = nativecast(:(GLuint $texture, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTextureStorage3DMultisample')) or return False;
	&glTextureStorage3DMultisampleEXT = nativecast(:(GLuint $texture, GLenum $target, GLsizei $samples, GLenum $internalformat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedsamplelocations), SDL_GL_GetProcAddress('glTextureStorage3DMultisampleEXT')) or return False;
	&glTextureStorageMem1DEXT = nativecast(:(GLuint $texture, GLsizei $levels, GLenum $internalFormat, GLsizei $width, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTextureStorageMem1DEXT')) or return False;
	&glTextureStorageMem2DEXT = nativecast(:(GLuint $texture, GLsizei $levels, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTextureStorageMem2DEXT')) or return False;
	&glTextureStorageMem2DMultisampleEXT = nativecast(:(GLuint $texture, GLsizei $samples, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLboolean $fixedSampleLocations, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTextureStorageMem2DMultisampleEXT')) or return False;
	&glTextureStorageMem3DEXT = nativecast(:(GLuint $texture, GLsizei $levels, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTextureStorageMem3DEXT')) or return False;
	&glTextureStorageMem3DMultisampleEXT = nativecast(:(GLuint $texture, GLsizei $samples, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLboolean $fixedSampleLocations, GLuint $memory, GLuint64 $offset), SDL_GL_GetProcAddress('glTextureStorageMem3DMultisampleEXT')) or return False;
	&glTextureStorageSparseAMD = nativecast(:(GLuint $texture, GLenum $target, GLenum $internalFormat, GLsizei $width, GLsizei $height, GLsizei $depth, GLsizei $layers, GLbitfield $flags), SDL_GL_GetProcAddress('glTextureStorageSparseAMD')) or return False;
	&glTextureSubImage1D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureSubImage1D')) or return False;
	&glTextureSubImage1DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLsizei $width, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureSubImage1DEXT')) or return False;
	&glTextureSubImage2D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureSubImage2D')) or return False;
	&glTextureSubImage2DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLsizei $width, GLsizei $height, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureSubImage2DEXT')) or return False;
	&glTextureSubImage3D = nativecast(:(GLuint $texture, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureSubImage3D')) or return False;
	&glTextureSubImage3DEXT = nativecast(:(GLuint $texture, GLenum $target, GLint $level, GLint $xoffset, GLint $yoffset, GLint $zoffset, GLsizei $width, GLsizei $height, GLsizei $depth, GLenum $format, GLenum $type, Pointer $pixels), SDL_GL_GetProcAddress('glTextureSubImage3DEXT')) or return False;
	&glTextureView = nativecast(:(GLuint $texture, GLenum $target, GLuint $origtexture, GLenum $internalformat, GLuint $minlevel, GLuint $numlevels, GLuint $minlayer, GLuint $numlayers), SDL_GL_GetProcAddress('glTextureView')) or return False;
	&glTextureViewEXT = nativecast(:(GLuint $texture, GLenum $target, GLuint $origtexture, GLenum $internalformat, GLuint $minlevel, GLuint $numlevels, GLuint $minlayer, GLuint $numlayers), SDL_GL_GetProcAddress('glTextureViewEXT')) or return False;
	&glTextureViewOES = nativecast(:(GLuint $texture, GLenum $target, GLuint $origtexture, GLenum $internalformat, GLuint $minlevel, GLuint $numlevels, GLuint $minlayer, GLuint $numlayers), SDL_GL_GetProcAddress('glTextureViewOES')) or return False;
	&glTrackMatrixNV = nativecast(:(GLenum $target, GLuint $address, GLenum $matrix, GLenum $transform), SDL_GL_GetProcAddress('glTrackMatrixNV')) or return False;
	&glTransformFeedbackAttribsNV = nativecast(:(GLsizei $count, CArray[GLint] $attribs, GLenum $bufferMode), SDL_GL_GetProcAddress('glTransformFeedbackAttribsNV')) or return False;
	&glTransformFeedbackBufferBase = nativecast(:(GLuint $xfb, GLuint $index, GLuint $buffer), SDL_GL_GetProcAddress('glTransformFeedbackBufferBase')) or return False;
	&glTransformFeedbackBufferRange = nativecast(:(GLuint $xfb, GLuint $index, GLuint $buffer, GLintptr $offset, GLsizeiptr $size), SDL_GL_GetProcAddress('glTransformFeedbackBufferRange')) or return False;
	&glTransformFeedbackStreamAttribsNV = nativecast(:(GLsizei $count, CArray[GLint] $attribs, GLsizei $nbuffers, CArray[GLint] $bufstreams, GLenum $bufferMode), SDL_GL_GetProcAddress('glTransformFeedbackStreamAttribsNV')) or return False;
	&glTransformFeedbackVaryings = nativecast(:(GLuint $program, GLsizei $count, CArray[Str] $varyings, GLenum $bufferMode), SDL_GL_GetProcAddress('glTransformFeedbackVaryings')) or return False;
	&glTransformFeedbackVaryingsEXT = nativecast(:(GLuint $program, GLsizei $count, CArray[Str] $varyings, GLenum $bufferMode), SDL_GL_GetProcAddress('glTransformFeedbackVaryingsEXT')) or return False;
	&glTransformFeedbackVaryingsNV = nativecast(:(GLuint $program, GLsizei $count, CArray[GLint] $locations, GLenum $bufferMode), SDL_GL_GetProcAddress('glTransformFeedbackVaryingsNV')) or return False;
	&glTransformPathNV = nativecast(:(GLuint $resultPath, GLuint $srcPath, GLenum $transformType, CArray[GLfloat] $transformValues), SDL_GL_GetProcAddress('glTransformPathNV')) or return False;
	&glTranslated = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glTranslated')) or return False;
	&glTranslatef = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glTranslatef')) or return False;
	&glTranslatex = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glTranslatex')) or return False;
	&glTranslatexOES = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glTranslatexOES')) or return False;
	&glUniform1d = nativecast(:(GLint $location, GLdouble $x), SDL_GL_GetProcAddress('glUniform1d')) or return False;
	&glUniform1dv = nativecast(:(GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniform1dv')) or return False;
	&glUniform1f = nativecast(:(GLint $location, GLfloat $v0), SDL_GL_GetProcAddress('glUniform1f')) or return False;
	&glUniform1fARB = nativecast(:(GLint $location, GLfloat $v0), SDL_GL_GetProcAddress('glUniform1fARB')) or return False;
	&glUniform1fv = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform1fv')) or return False;
	&glUniform1fvARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform1fvARB')) or return False;
	&glUniform1i = nativecast(:(GLint $location, GLint $v0), SDL_GL_GetProcAddress('glUniform1i')) or return False;
	&glUniform1i64ARB = nativecast(:(GLint $location, GLint64 $x), SDL_GL_GetProcAddress('glUniform1i64ARB')) or return False;
	&glUniform1i64NV = nativecast(:(GLint $location, GLint64EXT $x), SDL_GL_GetProcAddress('glUniform1i64NV')) or return False;
	&glUniform1i64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glUniform1i64vARB')) or return False;
	&glUniform1i64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glUniform1i64vNV')) or return False;
	&glUniform1iARB = nativecast(:(GLint $location, GLint $v0), SDL_GL_GetProcAddress('glUniform1iARB')) or return False;
	&glUniform1iv = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform1iv')) or return False;
	&glUniform1ivARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform1ivARB')) or return False;
	&glUniform1ui = nativecast(:(GLint $location, GLuint $v0), SDL_GL_GetProcAddress('glUniform1ui')) or return False;
	&glUniform1ui64ARB = nativecast(:(GLint $location, GLuint64 $x), SDL_GL_GetProcAddress('glUniform1ui64ARB')) or return False;
	&glUniform1ui64NV = nativecast(:(GLint $location, GLuint64EXT $x), SDL_GL_GetProcAddress('glUniform1ui64NV')) or return False;
	&glUniform1ui64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glUniform1ui64vARB')) or return False;
	&glUniform1ui64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glUniform1ui64vNV')) or return False;
	&glUniform1uiEXT = nativecast(:(GLint $location, GLuint $v0), SDL_GL_GetProcAddress('glUniform1uiEXT')) or return False;
	&glUniform1uiv = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform1uiv')) or return False;
	&glUniform1uivEXT = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform1uivEXT')) or return False;
	&glUniform2d = nativecast(:(GLint $location, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glUniform2d')) or return False;
	&glUniform2dv = nativecast(:(GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniform2dv')) or return False;
	&glUniform2f = nativecast(:(GLint $location, GLfloat $v0, GLfloat $v1), SDL_GL_GetProcAddress('glUniform2f')) or return False;
	&glUniform2fARB = nativecast(:(GLint $location, GLfloat $v0, GLfloat $v1), SDL_GL_GetProcAddress('glUniform2fARB')) or return False;
	&glUniform2fv = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform2fv')) or return False;
	&glUniform2fvARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform2fvARB')) or return False;
	&glUniform2i = nativecast(:(GLint $location, GLint $v0, GLint $v1), SDL_GL_GetProcAddress('glUniform2i')) or return False;
	&glUniform2i64ARB = nativecast(:(GLint $location, GLint64 $x, GLint64 $y), SDL_GL_GetProcAddress('glUniform2i64ARB')) or return False;
	&glUniform2i64NV = nativecast(:(GLint $location, GLint64EXT $x, GLint64EXT $y), SDL_GL_GetProcAddress('glUniform2i64NV')) or return False;
	&glUniform2i64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glUniform2i64vARB')) or return False;
	&glUniform2i64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glUniform2i64vNV')) or return False;
	&glUniform2iARB = nativecast(:(GLint $location, GLint $v0, GLint $v1), SDL_GL_GetProcAddress('glUniform2iARB')) or return False;
	&glUniform2iv = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform2iv')) or return False;
	&glUniform2ivARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform2ivARB')) or return False;
	&glUniform2ui = nativecast(:(GLint $location, GLuint $v0, GLuint $v1), SDL_GL_GetProcAddress('glUniform2ui')) or return False;
	&glUniform2ui64ARB = nativecast(:(GLint $location, GLuint64 $x, GLuint64 $y), SDL_GL_GetProcAddress('glUniform2ui64ARB')) or return False;
	&glUniform2ui64NV = nativecast(:(GLint $location, GLuint64EXT $x, GLuint64EXT $y), SDL_GL_GetProcAddress('glUniform2ui64NV')) or return False;
	&glUniform2ui64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glUniform2ui64vARB')) or return False;
	&glUniform2ui64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glUniform2ui64vNV')) or return False;
	&glUniform2uiEXT = nativecast(:(GLint $location, GLuint $v0, GLuint $v1), SDL_GL_GetProcAddress('glUniform2uiEXT')) or return False;
	&glUniform2uiv = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform2uiv')) or return False;
	&glUniform2uivEXT = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform2uivEXT')) or return False;
	&glUniform3d = nativecast(:(GLint $location, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glUniform3d')) or return False;
	&glUniform3dv = nativecast(:(GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniform3dv')) or return False;
	&glUniform3f = nativecast(:(GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2), SDL_GL_GetProcAddress('glUniform3f')) or return False;
	&glUniform3fARB = nativecast(:(GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2), SDL_GL_GetProcAddress('glUniform3fARB')) or return False;
	&glUniform3fv = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform3fv')) or return False;
	&glUniform3fvARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform3fvARB')) or return False;
	&glUniform3i = nativecast(:(GLint $location, GLint $v0, GLint $v1, GLint $v2), SDL_GL_GetProcAddress('glUniform3i')) or return False;
	&glUniform3i64ARB = nativecast(:(GLint $location, GLint64 $x, GLint64 $y, GLint64 $z), SDL_GL_GetProcAddress('glUniform3i64ARB')) or return False;
	&glUniform3i64NV = nativecast(:(GLint $location, GLint64EXT $x, GLint64EXT $y, GLint64EXT $z), SDL_GL_GetProcAddress('glUniform3i64NV')) or return False;
	&glUniform3i64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glUniform3i64vARB')) or return False;
	&glUniform3i64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glUniform3i64vNV')) or return False;
	&glUniform3iARB = nativecast(:(GLint $location, GLint $v0, GLint $v1, GLint $v2), SDL_GL_GetProcAddress('glUniform3iARB')) or return False;
	&glUniform3iv = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform3iv')) or return False;
	&glUniform3ivARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform3ivARB')) or return False;
	&glUniform3ui = nativecast(:(GLint $location, GLuint $v0, GLuint $v1, GLuint $v2), SDL_GL_GetProcAddress('glUniform3ui')) or return False;
	&glUniform3ui64ARB = nativecast(:(GLint $location, GLuint64 $x, GLuint64 $y, GLuint64 $z), SDL_GL_GetProcAddress('glUniform3ui64ARB')) or return False;
	&glUniform3ui64NV = nativecast(:(GLint $location, GLuint64EXT $x, GLuint64EXT $y, GLuint64EXT $z), SDL_GL_GetProcAddress('glUniform3ui64NV')) or return False;
	&glUniform3ui64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glUniform3ui64vARB')) or return False;
	&glUniform3ui64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glUniform3ui64vNV')) or return False;
	&glUniform3uiEXT = nativecast(:(GLint $location, GLuint $v0, GLuint $v1, GLuint $v2), SDL_GL_GetProcAddress('glUniform3uiEXT')) or return False;
	&glUniform3uiv = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform3uiv')) or return False;
	&glUniform3uivEXT = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform3uivEXT')) or return False;
	&glUniform4d = nativecast(:(GLint $location, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glUniform4d')) or return False;
	&glUniform4dv = nativecast(:(GLint $location, GLsizei $count, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniform4dv')) or return False;
	&glUniform4f = nativecast(:(GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2, GLfloat $v3), SDL_GL_GetProcAddress('glUniform4f')) or return False;
	&glUniform4fARB = nativecast(:(GLint $location, GLfloat $v0, GLfloat $v1, GLfloat $v2, GLfloat $v3), SDL_GL_GetProcAddress('glUniform4fARB')) or return False;
	&glUniform4fv = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform4fv')) or return False;
	&glUniform4fvARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniform4fvARB')) or return False;
	&glUniform4i = nativecast(:(GLint $location, GLint $v0, GLint $v1, GLint $v2, GLint $v3), SDL_GL_GetProcAddress('glUniform4i')) or return False;
	&glUniform4i64ARB = nativecast(:(GLint $location, GLint64 $x, GLint64 $y, GLint64 $z, GLint64 $w), SDL_GL_GetProcAddress('glUniform4i64ARB')) or return False;
	&glUniform4i64NV = nativecast(:(GLint $location, GLint64EXT $x, GLint64EXT $y, GLint64EXT $z, GLint64EXT $w), SDL_GL_GetProcAddress('glUniform4i64NV')) or return False;
	&glUniform4i64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64] $value), SDL_GL_GetProcAddress('glUniform4i64vARB')) or return False;
	&glUniform4i64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLint64EXT] $value), SDL_GL_GetProcAddress('glUniform4i64vNV')) or return False;
	&glUniform4iARB = nativecast(:(GLint $location, GLint $v0, GLint $v1, GLint $v2, GLint $v3), SDL_GL_GetProcAddress('glUniform4iARB')) or return False;
	&glUniform4iv = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform4iv')) or return False;
	&glUniform4ivARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLint] $value), SDL_GL_GetProcAddress('glUniform4ivARB')) or return False;
	&glUniform4ui = nativecast(:(GLint $location, GLuint $v0, GLuint $v1, GLuint $v2, GLuint $v3), SDL_GL_GetProcAddress('glUniform4ui')) or return False;
	&glUniform4ui64ARB = nativecast(:(GLint $location, GLuint64 $x, GLuint64 $y, GLuint64 $z, GLuint64 $w), SDL_GL_GetProcAddress('glUniform4ui64ARB')) or return False;
	&glUniform4ui64NV = nativecast(:(GLint $location, GLuint64EXT $x, GLuint64EXT $y, GLuint64EXT $z, GLuint64EXT $w), SDL_GL_GetProcAddress('glUniform4ui64NV')) or return False;
	&glUniform4ui64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glUniform4ui64vARB')) or return False;
	&glUniform4ui64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glUniform4ui64vNV')) or return False;
	&glUniform4uiEXT = nativecast(:(GLint $location, GLuint $v0, GLuint $v1, GLuint $v2, GLuint $v3), SDL_GL_GetProcAddress('glUniform4uiEXT')) or return False;
	&glUniform4uiv = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform4uiv')) or return False;
	&glUniform4uivEXT = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint] $value), SDL_GL_GetProcAddress('glUniform4uivEXT')) or return False;
	&glUniformBlockBinding = nativecast(:(GLuint $program, GLuint $uniformBlockIndex, GLuint $uniformBlockBinding), SDL_GL_GetProcAddress('glUniformBlockBinding')) or return False;
	&glUniformBufferEXT = nativecast(:(GLuint $program, GLint $location, GLuint $buffer), SDL_GL_GetProcAddress('glUniformBufferEXT')) or return False;
	&glUniformHandleui64ARB = nativecast(:(GLint $location, GLuint64 $value), SDL_GL_GetProcAddress('glUniformHandleui64ARB')) or return False;
	&glUniformHandleui64IMG = nativecast(:(GLint $location, GLuint64 $value), SDL_GL_GetProcAddress('glUniformHandleui64IMG')) or return False;
	&glUniformHandleui64NV = nativecast(:(GLint $location, GLuint64 $value), SDL_GL_GetProcAddress('glUniformHandleui64NV')) or return False;
	&glUniformHandleui64vARB = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glUniformHandleui64vARB')) or return False;
	&glUniformHandleui64vIMG = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glUniformHandleui64vIMG')) or return False;
	&glUniformHandleui64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64] $value), SDL_GL_GetProcAddress('glUniformHandleui64vNV')) or return False;
	&glUniformMatrix2dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix2dv')) or return False;
	&glUniformMatrix2fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix2fv')) or return False;
	&glUniformMatrix2fvARB = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix2fvARB')) or return False;
	&glUniformMatrix2x3dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix2x3dv')) or return False;
	&glUniformMatrix2x3fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix2x3fv')) or return False;
	&glUniformMatrix2x3fvNV = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix2x3fvNV')) or return False;
	&glUniformMatrix2x4dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix2x4dv')) or return False;
	&glUniformMatrix2x4fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix2x4fv')) or return False;
	&glUniformMatrix2x4fvNV = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix2x4fvNV')) or return False;
	&glUniformMatrix3dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix3dv')) or return False;
	&glUniformMatrix3fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix3fv')) or return False;
	&glUniformMatrix3fvARB = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix3fvARB')) or return False;
	&glUniformMatrix3x2dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix3x2dv')) or return False;
	&glUniformMatrix3x2fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix3x2fv')) or return False;
	&glUniformMatrix3x2fvNV = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix3x2fvNV')) or return False;
	&glUniformMatrix3x4dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix3x4dv')) or return False;
	&glUniformMatrix3x4fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix3x4fv')) or return False;
	&glUniformMatrix3x4fvNV = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix3x4fvNV')) or return False;
	&glUniformMatrix4dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix4dv')) or return False;
	&glUniformMatrix4fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix4fv')) or return False;
	&glUniformMatrix4fvARB = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix4fvARB')) or return False;
	&glUniformMatrix4x2dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix4x2dv')) or return False;
	&glUniformMatrix4x2fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix4x2fv')) or return False;
	&glUniformMatrix4x2fvNV = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix4x2fvNV')) or return False;
	&glUniformMatrix4x3dv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLdouble] $value), SDL_GL_GetProcAddress('glUniformMatrix4x3dv')) or return False;
	&glUniformMatrix4x3fv = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix4x3fv')) or return False;
	&glUniformMatrix4x3fvNV = nativecast(:(GLint $location, GLsizei $count, GLboolean $transpose, CArray[GLfloat] $value), SDL_GL_GetProcAddress('glUniformMatrix4x3fvNV')) or return False;
	&glUniformSubroutinesuiv = nativecast(:(GLenum $shadertype, GLsizei $count, CArray[GLuint] $indices), SDL_GL_GetProcAddress('glUniformSubroutinesuiv')) or return False;
	&glUniformui64NV = nativecast(:(GLint $location, GLuint64EXT $value), SDL_GL_GetProcAddress('glUniformui64NV')) or return False;
	&glUniformui64vNV = nativecast(:(GLint $location, GLsizei $count, CArray[GLuint64EXT] $value), SDL_GL_GetProcAddress('glUniformui64vNV')) or return False;
	&glUnlockArraysEXT = nativecast(:(), SDL_GL_GetProcAddress('glUnlockArraysEXT')) or return False;
	&glUnmapBuffer = nativecast(:(GLenum $target --> GLboolean), SDL_GL_GetProcAddress('glUnmapBuffer')) or return False;
	&glUnmapBufferARB = nativecast(:(GLenum $target --> GLboolean), SDL_GL_GetProcAddress('glUnmapBufferARB')) or return False;
	&glUnmapBufferOES = nativecast(:(GLenum $target --> GLboolean), SDL_GL_GetProcAddress('glUnmapBufferOES')) or return False;
	&glUnmapNamedBuffer = nativecast(:(GLuint $buffer --> GLboolean), SDL_GL_GetProcAddress('glUnmapNamedBuffer')) or return False;
	&glUnmapNamedBufferEXT = nativecast(:(GLuint $buffer --> GLboolean), SDL_GL_GetProcAddress('glUnmapNamedBufferEXT')) or return False;
	&glUnmapObjectBufferATI = nativecast(:(GLuint $buffer), SDL_GL_GetProcAddress('glUnmapObjectBufferATI')) or return False;
	&glUnmapTexture2DINTEL = nativecast(:(GLuint $texture, GLint $level), SDL_GL_GetProcAddress('glUnmapTexture2DINTEL')) or return False;
	&glUpdateObjectBufferATI = nativecast(:(GLuint $buffer, GLuint $offset, GLsizei $size, Pointer $pointer, GLenum $preserve), SDL_GL_GetProcAddress('glUpdateObjectBufferATI')) or return False;
	&glUploadGpuMaskNVX = nativecast(:(GLbitfield $mask), SDL_GL_GetProcAddress('glUploadGpuMaskNVX')) or return False;
	&glUseProgram = nativecast(:(GLuint $program), SDL_GL_GetProcAddress('glUseProgram')) or return False;
	&glUseProgramObjectARB = nativecast(:(GLhandleARB $programObj), SDL_GL_GetProcAddress('glUseProgramObjectARB')) or return False;
	&glUseProgramStages = nativecast(:(GLuint $pipeline, GLbitfield $stages, GLuint $program), SDL_GL_GetProcAddress('glUseProgramStages')) or return False;
	&glUseProgramStagesEXT = nativecast(:(GLuint $pipeline, GLbitfield $stages, GLuint $program), SDL_GL_GetProcAddress('glUseProgramStagesEXT')) or return False;
	&glUseShaderProgramEXT = nativecast(:(GLenum $type, GLuint $program), SDL_GL_GetProcAddress('glUseShaderProgramEXT')) or return False;
	&glVDPAUFiniNV = nativecast(:(), SDL_GL_GetProcAddress('glVDPAUFiniNV')) or return False;
	&glVDPAUGetSurfaceivNV = nativecast(:(GLvdpauSurfaceNV $surface, GLenum $pname, GLsizei $count, CArray[GLsizei] $length, CArray[GLint] $values), SDL_GL_GetProcAddress('glVDPAUGetSurfaceivNV')) or return False;
	&glVDPAUInitNV = nativecast(:(Pointer $vdpDevice, Pointer $getProcAddress), SDL_GL_GetProcAddress('glVDPAUInitNV')) or return False;
	&glVDPAUIsSurfaceNV = nativecast(:(GLvdpauSurfaceNV $surface --> GLboolean), SDL_GL_GetProcAddress('glVDPAUIsSurfaceNV')) or return False;
	&glVDPAUMapSurfacesNV = nativecast(:(GLsizei $numSurfaces, CArray[GLvdpauSurfaceNV] $surfaces), SDL_GL_GetProcAddress('glVDPAUMapSurfacesNV')) or return False;
	&glVDPAURegisterOutputSurfaceNV = nativecast(:(Pointer $vdpSurface, GLenum $target, GLsizei $numTextureNames, CArray[GLuint] $textureNames --> GLvdpauSurfaceNV), SDL_GL_GetProcAddress('glVDPAURegisterOutputSurfaceNV')) or return False;
	&glVDPAURegisterVideoSurfaceNV = nativecast(:(Pointer $vdpSurface, GLenum $target, GLsizei $numTextureNames, CArray[GLuint] $textureNames --> GLvdpauSurfaceNV), SDL_GL_GetProcAddress('glVDPAURegisterVideoSurfaceNV')) or return False;
	&glVDPAURegisterVideoSurfaceWithPictureStructureNV = nativecast(:(Pointer $vdpSurface, GLenum $target, GLsizei $numTextureNames, CArray[GLuint] $textureNames, GLboolean $isFrameStructure --> GLvdpauSurfaceNV), SDL_GL_GetProcAddress('glVDPAURegisterVideoSurfaceWithPictureStructureNV')) or return False;
	&glVDPAUSurfaceAccessNV = nativecast(:(GLvdpauSurfaceNV $surface, GLenum $access), SDL_GL_GetProcAddress('glVDPAUSurfaceAccessNV')) or return False;
	&glVDPAUUnmapSurfacesNV = nativecast(:(GLsizei $numSurface, CArray[GLvdpauSurfaceNV] $surfaces), SDL_GL_GetProcAddress('glVDPAUUnmapSurfacesNV')) or return False;
	&glVDPAUUnregisterSurfaceNV = nativecast(:(GLvdpauSurfaceNV $surface), SDL_GL_GetProcAddress('glVDPAUUnregisterSurfaceNV')) or return False;
	&glValidateProgram = nativecast(:(GLuint $program), SDL_GL_GetProcAddress('glValidateProgram')) or return False;
	&glValidateProgramARB = nativecast(:(GLhandleARB $programObj), SDL_GL_GetProcAddress('glValidateProgramARB')) or return False;
	&glValidateProgramPipeline = nativecast(:(GLuint $pipeline), SDL_GL_GetProcAddress('glValidateProgramPipeline')) or return False;
	&glValidateProgramPipelineEXT = nativecast(:(GLuint $pipeline), SDL_GL_GetProcAddress('glValidateProgramPipelineEXT')) or return False;
	&glVariantArrayObjectATI = nativecast(:(GLuint $id, GLenum $type, GLsizei $stride, GLuint $buffer, GLuint $offset), SDL_GL_GetProcAddress('glVariantArrayObjectATI')) or return False;
	&glVariantPointerEXT = nativecast(:(GLuint $id, GLenum $type, GLuint $stride, Pointer $addr), SDL_GL_GetProcAddress('glVariantPointerEXT')) or return False;
	&glVariantbvEXT = nativecast(:(GLuint $id, CArray[GLbyte] $addr), SDL_GL_GetProcAddress('glVariantbvEXT')) or return False;
	&glVariantdvEXT = nativecast(:(GLuint $id, CArray[GLdouble] $addr), SDL_GL_GetProcAddress('glVariantdvEXT')) or return False;
	&glVariantfvEXT = nativecast(:(GLuint $id, CArray[GLfloat] $addr), SDL_GL_GetProcAddress('glVariantfvEXT')) or return False;
	&glVariantivEXT = nativecast(:(GLuint $id, CArray[GLint] $addr), SDL_GL_GetProcAddress('glVariantivEXT')) or return False;
	&glVariantsvEXT = nativecast(:(GLuint $id, CArray[GLshort] $addr), SDL_GL_GetProcAddress('glVariantsvEXT')) or return False;
	&glVariantubvEXT = nativecast(:(GLuint $id, CArray[GLubyte] $addr), SDL_GL_GetProcAddress('glVariantubvEXT')) or return False;
	&glVariantuivEXT = nativecast(:(GLuint $id, CArray[GLuint] $addr), SDL_GL_GetProcAddress('glVariantuivEXT')) or return False;
	&glVariantusvEXT = nativecast(:(GLuint $id, CArray[GLushort] $addr), SDL_GL_GetProcAddress('glVariantusvEXT')) or return False;
	&glVertex2bOES = nativecast(:(GLbyte $x, GLbyte $y), SDL_GL_GetProcAddress('glVertex2bOES')) or return False;
	&glVertex2bvOES = nativecast(:(CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glVertex2bvOES')) or return False;
	&glVertex2d = nativecast(:(GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glVertex2d')) or return False;
	&glVertex2dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertex2dv')) or return False;
	&glVertex2f = nativecast(:(GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glVertex2f')) or return False;
	&glVertex2fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertex2fv')) or return False;
	&glVertex2hNV = nativecast(:(GLhalfNV $x, GLhalfNV $y), SDL_GL_GetProcAddress('glVertex2hNV')) or return False;
	&glVertex2hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertex2hvNV')) or return False;
	&glVertex2i = nativecast(:(GLint $x, GLint $y), SDL_GL_GetProcAddress('glVertex2i')) or return False;
	&glVertex2iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glVertex2iv')) or return False;
	&glVertex2s = nativecast(:(GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glVertex2s')) or return False;
	&glVertex2sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertex2sv')) or return False;
	&glVertex2xOES = nativecast(:(GLfixed $x), SDL_GL_GetProcAddress('glVertex2xOES')) or return False;
	&glVertex2xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glVertex2xvOES')) or return False;
	&glVertex3bOES = nativecast(:(GLbyte $x, GLbyte $y, GLbyte $z), SDL_GL_GetProcAddress('glVertex3bOES')) or return False;
	&glVertex3bvOES = nativecast(:(CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glVertex3bvOES')) or return False;
	&glVertex3d = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glVertex3d')) or return False;
	&glVertex3dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertex3dv')) or return False;
	&glVertex3f = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glVertex3f')) or return False;
	&glVertex3fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertex3fv')) or return False;
	&glVertex3hNV = nativecast(:(GLhalfNV $x, GLhalfNV $y, GLhalfNV $z), SDL_GL_GetProcAddress('glVertex3hNV')) or return False;
	&glVertex3hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertex3hvNV')) or return False;
	&glVertex3i = nativecast(:(GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glVertex3i')) or return False;
	&glVertex3iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glVertex3iv')) or return False;
	&glVertex3s = nativecast(:(GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glVertex3s')) or return False;
	&glVertex3sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertex3sv')) or return False;
	&glVertex3xOES = nativecast(:(GLfixed $x, GLfixed $y), SDL_GL_GetProcAddress('glVertex3xOES')) or return False;
	&glVertex3xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glVertex3xvOES')) or return False;
	&glVertex4bOES = nativecast(:(GLbyte $x, GLbyte $y, GLbyte $z, GLbyte $w), SDL_GL_GetProcAddress('glVertex4bOES')) or return False;
	&glVertex4bvOES = nativecast(:(CArray[GLbyte] $coords), SDL_GL_GetProcAddress('glVertex4bvOES')) or return False;
	&glVertex4d = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glVertex4d')) or return False;
	&glVertex4dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertex4dv')) or return False;
	&glVertex4f = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glVertex4f')) or return False;
	&glVertex4fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertex4fv')) or return False;
	&glVertex4hNV = nativecast(:(GLhalfNV $x, GLhalfNV $y, GLhalfNV $z, GLhalfNV $w), SDL_GL_GetProcAddress('glVertex4hNV')) or return False;
	&glVertex4hvNV = nativecast(:(CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertex4hvNV')) or return False;
	&glVertex4i = nativecast(:(GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glVertex4i')) or return False;
	&glVertex4iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glVertex4iv')) or return False;
	&glVertex4s = nativecast(:(GLshort $x, GLshort $y, GLshort $z, GLshort $w), SDL_GL_GetProcAddress('glVertex4s')) or return False;
	&glVertex4sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertex4sv')) or return False;
	&glVertex4xOES = nativecast(:(GLfixed $x, GLfixed $y, GLfixed $z), SDL_GL_GetProcAddress('glVertex4xOES')) or return False;
	&glVertex4xvOES = nativecast(:(CArray[GLfixed] $coords), SDL_GL_GetProcAddress('glVertex4xvOES')) or return False;
	&glVertexArrayAttribBinding = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLuint $bindingindex), SDL_GL_GetProcAddress('glVertexArrayAttribBinding')) or return False;
	&glVertexArrayAttribFormat = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLint $size, GLenum $type, GLboolean $normalized, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexArrayAttribFormat')) or return False;
	&glVertexArrayAttribIFormat = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLint $size, GLenum $type, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexArrayAttribIFormat')) or return False;
	&glVertexArrayAttribLFormat = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLint $size, GLenum $type, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexArrayAttribLFormat')) or return False;
	&glVertexArrayBindVertexBufferEXT = nativecast(:(GLuint $vaobj, GLuint $bindingindex, GLuint $buffer, GLintptr $offset, GLsizei $stride), SDL_GL_GetProcAddress('glVertexArrayBindVertexBufferEXT')) or return False;
	&glVertexArrayBindingDivisor = nativecast(:(GLuint $vaobj, GLuint $bindingindex, GLuint $divisor), SDL_GL_GetProcAddress('glVertexArrayBindingDivisor')) or return False;
	&glVertexArrayColorOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLint $size, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayColorOffsetEXT')) or return False;
	&glVertexArrayEdgeFlagOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayEdgeFlagOffsetEXT')) or return False;
	&glVertexArrayElementBuffer = nativecast(:(GLuint $vaobj, GLuint $buffer), SDL_GL_GetProcAddress('glVertexArrayElementBuffer')) or return False;
	&glVertexArrayFogCoordOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayFogCoordOffsetEXT')) or return False;
	&glVertexArrayIndexOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayIndexOffsetEXT')) or return False;
	&glVertexArrayMultiTexCoordOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLenum $texunit, GLint $size, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayMultiTexCoordOffsetEXT')) or return False;
	&glVertexArrayNormalOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayNormalOffsetEXT')) or return False;
	&glVertexArrayParameteriAPPLE = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glVertexArrayParameteriAPPLE')) or return False;
	&glVertexArrayRangeAPPLE = nativecast(:(GLsizei $length, Pointer $pointer), SDL_GL_GetProcAddress('glVertexArrayRangeAPPLE')) or return False;
	&glVertexArrayRangeNV = nativecast(:(GLsizei $length, Pointer $pointer), SDL_GL_GetProcAddress('glVertexArrayRangeNV')) or return False;
	&glVertexArraySecondaryColorOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLint $size, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArraySecondaryColorOffsetEXT')) or return False;
	&glVertexArrayTexCoordOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLint $size, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayTexCoordOffsetEXT')) or return False;
	&glVertexArrayVertexAttribBindingEXT = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLuint $bindingindex), SDL_GL_GetProcAddress('glVertexArrayVertexAttribBindingEXT')) or return False;
	&glVertexArrayVertexAttribDivisorEXT = nativecast(:(GLuint $vaobj, GLuint $index, GLuint $divisor), SDL_GL_GetProcAddress('glVertexArrayVertexAttribDivisorEXT')) or return False;
	&glVertexArrayVertexAttribFormatEXT = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLint $size, GLenum $type, GLboolean $normalized, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexArrayVertexAttribFormatEXT')) or return False;
	&glVertexArrayVertexAttribIFormatEXT = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLint $size, GLenum $type, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexArrayVertexAttribIFormatEXT')) or return False;
	&glVertexArrayVertexAttribIOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLuint $index, GLint $size, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayVertexAttribIOffsetEXT')) or return False;
	&glVertexArrayVertexAttribLFormatEXT = nativecast(:(GLuint $vaobj, GLuint $attribindex, GLint $size, GLenum $type, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexArrayVertexAttribLFormatEXT')) or return False;
	&glVertexArrayVertexAttribLOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLuint $index, GLint $size, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayVertexAttribLOffsetEXT')) or return False;
	&glVertexArrayVertexAttribOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLuint $index, GLint $size, GLenum $type, GLboolean $normalized, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayVertexAttribOffsetEXT')) or return False;
	&glVertexArrayVertexBindingDivisorEXT = nativecast(:(GLuint $vaobj, GLuint $bindingindex, GLuint $divisor), SDL_GL_GetProcAddress('glVertexArrayVertexBindingDivisorEXT')) or return False;
	&glVertexArrayVertexBuffer = nativecast(:(GLuint $vaobj, GLuint $bindingindex, GLuint $buffer, GLintptr $offset, GLsizei $stride), SDL_GL_GetProcAddress('glVertexArrayVertexBuffer')) or return False;
	&glVertexArrayVertexBuffers = nativecast(:(GLuint $vaobj, GLuint $first, GLsizei $count, CArray[GLuint] $buffers, CArray[GLintptr] $offsets, CArray[GLsizei] $strides), SDL_GL_GetProcAddress('glVertexArrayVertexBuffers')) or return False;
	&glVertexArrayVertexOffsetEXT = nativecast(:(GLuint $vaobj, GLuint $buffer, GLint $size, GLenum $type, GLsizei $stride, GLintptr $offset), SDL_GL_GetProcAddress('glVertexArrayVertexOffsetEXT')) or return False;
	&glVertexAttrib1d = nativecast(:(GLuint $index, GLdouble $x), SDL_GL_GetProcAddress('glVertexAttrib1d')) or return False;
	&glVertexAttrib1dARB = nativecast(:(GLuint $index, GLdouble $x), SDL_GL_GetProcAddress('glVertexAttrib1dARB')) or return False;
	&glVertexAttrib1dNV = nativecast(:(GLuint $index, GLdouble $x), SDL_GL_GetProcAddress('glVertexAttrib1dNV')) or return False;
	&glVertexAttrib1dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib1dv')) or return False;
	&glVertexAttrib1dvARB = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib1dvARB')) or return False;
	&glVertexAttrib1dvNV = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib1dvNV')) or return False;
	&glVertexAttrib1f = nativecast(:(GLuint $index, GLfloat $x), SDL_GL_GetProcAddress('glVertexAttrib1f')) or return False;
	&glVertexAttrib1fARB = nativecast(:(GLuint $index, GLfloat $x), SDL_GL_GetProcAddress('glVertexAttrib1fARB')) or return False;
	&glVertexAttrib1fNV = nativecast(:(GLuint $index, GLfloat $x), SDL_GL_GetProcAddress('glVertexAttrib1fNV')) or return False;
	&glVertexAttrib1fv = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib1fv')) or return False;
	&glVertexAttrib1fvARB = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib1fvARB')) or return False;
	&glVertexAttrib1fvNV = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib1fvNV')) or return False;
	&glVertexAttrib1hNV = nativecast(:(GLuint $index, GLhalfNV $x), SDL_GL_GetProcAddress('glVertexAttrib1hNV')) or return False;
	&glVertexAttrib1hvNV = nativecast(:(GLuint $index, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttrib1hvNV')) or return False;
	&glVertexAttrib1s = nativecast(:(GLuint $index, GLshort $x), SDL_GL_GetProcAddress('glVertexAttrib1s')) or return False;
	&glVertexAttrib1sARB = nativecast(:(GLuint $index, GLshort $x), SDL_GL_GetProcAddress('glVertexAttrib1sARB')) or return False;
	&glVertexAttrib1sNV = nativecast(:(GLuint $index, GLshort $x), SDL_GL_GetProcAddress('glVertexAttrib1sNV')) or return False;
	&glVertexAttrib1sv = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib1sv')) or return False;
	&glVertexAttrib1svARB = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib1svARB')) or return False;
	&glVertexAttrib1svNV = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib1svNV')) or return False;
	&glVertexAttrib2d = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glVertexAttrib2d')) or return False;
	&glVertexAttrib2dARB = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glVertexAttrib2dARB')) or return False;
	&glVertexAttrib2dNV = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glVertexAttrib2dNV')) or return False;
	&glVertexAttrib2dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib2dv')) or return False;
	&glVertexAttrib2dvARB = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib2dvARB')) or return False;
	&glVertexAttrib2dvNV = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib2dvNV')) or return False;
	&glVertexAttrib2f = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glVertexAttrib2f')) or return False;
	&glVertexAttrib2fARB = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glVertexAttrib2fARB')) or return False;
	&glVertexAttrib2fNV = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glVertexAttrib2fNV')) or return False;
	&glVertexAttrib2fv = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib2fv')) or return False;
	&glVertexAttrib2fvARB = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib2fvARB')) or return False;
	&glVertexAttrib2fvNV = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib2fvNV')) or return False;
	&glVertexAttrib2hNV = nativecast(:(GLuint $index, GLhalfNV $x, GLhalfNV $y), SDL_GL_GetProcAddress('glVertexAttrib2hNV')) or return False;
	&glVertexAttrib2hvNV = nativecast(:(GLuint $index, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttrib2hvNV')) or return False;
	&glVertexAttrib2s = nativecast(:(GLuint $index, GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glVertexAttrib2s')) or return False;
	&glVertexAttrib2sARB = nativecast(:(GLuint $index, GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glVertexAttrib2sARB')) or return False;
	&glVertexAttrib2sNV = nativecast(:(GLuint $index, GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glVertexAttrib2sNV')) or return False;
	&glVertexAttrib2sv = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib2sv')) or return False;
	&glVertexAttrib2svARB = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib2svARB')) or return False;
	&glVertexAttrib2svNV = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib2svNV')) or return False;
	&glVertexAttrib3d = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glVertexAttrib3d')) or return False;
	&glVertexAttrib3dARB = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glVertexAttrib3dARB')) or return False;
	&glVertexAttrib3dNV = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glVertexAttrib3dNV')) or return False;
	&glVertexAttrib3dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib3dv')) or return False;
	&glVertexAttrib3dvARB = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib3dvARB')) or return False;
	&glVertexAttrib3dvNV = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib3dvNV')) or return False;
	&glVertexAttrib3f = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glVertexAttrib3f')) or return False;
	&glVertexAttrib3fARB = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glVertexAttrib3fARB')) or return False;
	&glVertexAttrib3fNV = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glVertexAttrib3fNV')) or return False;
	&glVertexAttrib3fv = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib3fv')) or return False;
	&glVertexAttrib3fvARB = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib3fvARB')) or return False;
	&glVertexAttrib3fvNV = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib3fvNV')) or return False;
	&glVertexAttrib3hNV = nativecast(:(GLuint $index, GLhalfNV $x, GLhalfNV $y, GLhalfNV $z), SDL_GL_GetProcAddress('glVertexAttrib3hNV')) or return False;
	&glVertexAttrib3hvNV = nativecast(:(GLuint $index, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttrib3hvNV')) or return False;
	&glVertexAttrib3s = nativecast(:(GLuint $index, GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glVertexAttrib3s')) or return False;
	&glVertexAttrib3sARB = nativecast(:(GLuint $index, GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glVertexAttrib3sARB')) or return False;
	&glVertexAttrib3sNV = nativecast(:(GLuint $index, GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glVertexAttrib3sNV')) or return False;
	&glVertexAttrib3sv = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib3sv')) or return False;
	&glVertexAttrib3svARB = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib3svARB')) or return False;
	&glVertexAttrib3svNV = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib3svNV')) or return False;
	&glVertexAttrib4Nbv = nativecast(:(GLuint $index, CArray[GLbyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4Nbv')) or return False;
	&glVertexAttrib4NbvARB = nativecast(:(GLuint $index, CArray[GLbyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4NbvARB')) or return False;
	&glVertexAttrib4Niv = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttrib4Niv')) or return False;
	&glVertexAttrib4NivARB = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttrib4NivARB')) or return False;
	&glVertexAttrib4Nsv = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib4Nsv')) or return False;
	&glVertexAttrib4NsvARB = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib4NsvARB')) or return False;
	&glVertexAttrib4Nub = nativecast(:(GLuint $index, GLubyte $x, GLubyte $y, GLubyte $z, GLubyte $w), SDL_GL_GetProcAddress('glVertexAttrib4Nub')) or return False;
	&glVertexAttrib4NubARB = nativecast(:(GLuint $index, GLubyte $x, GLubyte $y, GLubyte $z, GLubyte $w), SDL_GL_GetProcAddress('glVertexAttrib4NubARB')) or return False;
	&glVertexAttrib4Nubv = nativecast(:(GLuint $index, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4Nubv')) or return False;
	&glVertexAttrib4NubvARB = nativecast(:(GLuint $index, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4NubvARB')) or return False;
	&glVertexAttrib4Nuiv = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttrib4Nuiv')) or return False;
	&glVertexAttrib4NuivARB = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttrib4NuivARB')) or return False;
	&glVertexAttrib4Nusv = nativecast(:(GLuint $index, CArray[GLushort] $v), SDL_GL_GetProcAddress('glVertexAttrib4Nusv')) or return False;
	&glVertexAttrib4NusvARB = nativecast(:(GLuint $index, CArray[GLushort] $v), SDL_GL_GetProcAddress('glVertexAttrib4NusvARB')) or return False;
	&glVertexAttrib4bv = nativecast(:(GLuint $index, CArray[GLbyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4bv')) or return False;
	&glVertexAttrib4bvARB = nativecast(:(GLuint $index, CArray[GLbyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4bvARB')) or return False;
	&glVertexAttrib4d = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glVertexAttrib4d')) or return False;
	&glVertexAttrib4dARB = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glVertexAttrib4dARB')) or return False;
	&glVertexAttrib4dNV = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glVertexAttrib4dNV')) or return False;
	&glVertexAttrib4dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib4dv')) or return False;
	&glVertexAttrib4dvARB = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib4dvARB')) or return False;
	&glVertexAttrib4dvNV = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttrib4dvNV')) or return False;
	&glVertexAttrib4f = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glVertexAttrib4f')) or return False;
	&glVertexAttrib4fARB = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glVertexAttrib4fARB')) or return False;
	&glVertexAttrib4fNV = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glVertexAttrib4fNV')) or return False;
	&glVertexAttrib4fv = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib4fv')) or return False;
	&glVertexAttrib4fvARB = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib4fvARB')) or return False;
	&glVertexAttrib4fvNV = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttrib4fvNV')) or return False;
	&glVertexAttrib4hNV = nativecast(:(GLuint $index, GLhalfNV $x, GLhalfNV $y, GLhalfNV $z, GLhalfNV $w), SDL_GL_GetProcAddress('glVertexAttrib4hNV')) or return False;
	&glVertexAttrib4hvNV = nativecast(:(GLuint $index, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttrib4hvNV')) or return False;
	&glVertexAttrib4iv = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttrib4iv')) or return False;
	&glVertexAttrib4ivARB = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttrib4ivARB')) or return False;
	&glVertexAttrib4s = nativecast(:(GLuint $index, GLshort $x, GLshort $y, GLshort $z, GLshort $w), SDL_GL_GetProcAddress('glVertexAttrib4s')) or return False;
	&glVertexAttrib4sARB = nativecast(:(GLuint $index, GLshort $x, GLshort $y, GLshort $z, GLshort $w), SDL_GL_GetProcAddress('glVertexAttrib4sARB')) or return False;
	&glVertexAttrib4sNV = nativecast(:(GLuint $index, GLshort $x, GLshort $y, GLshort $z, GLshort $w), SDL_GL_GetProcAddress('glVertexAttrib4sNV')) or return False;
	&glVertexAttrib4sv = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib4sv')) or return False;
	&glVertexAttrib4svARB = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib4svARB')) or return False;
	&glVertexAttrib4svNV = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttrib4svNV')) or return False;
	&glVertexAttrib4ubNV = nativecast(:(GLuint $index, GLubyte $x, GLubyte $y, GLubyte $z, GLubyte $w), SDL_GL_GetProcAddress('glVertexAttrib4ubNV')) or return False;
	&glVertexAttrib4ubv = nativecast(:(GLuint $index, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4ubv')) or return False;
	&glVertexAttrib4ubvARB = nativecast(:(GLuint $index, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4ubvARB')) or return False;
	&glVertexAttrib4ubvNV = nativecast(:(GLuint $index, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttrib4ubvNV')) or return False;
	&glVertexAttrib4uiv = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttrib4uiv')) or return False;
	&glVertexAttrib4uivARB = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttrib4uivARB')) or return False;
	&glVertexAttrib4usv = nativecast(:(GLuint $index, CArray[GLushort] $v), SDL_GL_GetProcAddress('glVertexAttrib4usv')) or return False;
	&glVertexAttrib4usvARB = nativecast(:(GLuint $index, CArray[GLushort] $v), SDL_GL_GetProcAddress('glVertexAttrib4usvARB')) or return False;
	&glVertexAttribArrayObjectATI = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLboolean $normalized, GLsizei $stride, GLuint $buffer, GLuint $offset), SDL_GL_GetProcAddress('glVertexAttribArrayObjectATI')) or return False;
	&glVertexAttribBinding = nativecast(:(GLuint $attribindex, GLuint $bindingindex), SDL_GL_GetProcAddress('glVertexAttribBinding')) or return False;
	&glVertexAttribDivisor = nativecast(:(GLuint $index, GLuint $divisor), SDL_GL_GetProcAddress('glVertexAttribDivisor')) or return False;
	&glVertexAttribDivisorANGLE = nativecast(:(GLuint $index, GLuint $divisor), SDL_GL_GetProcAddress('glVertexAttribDivisorANGLE')) or return False;
	&glVertexAttribDivisorARB = nativecast(:(GLuint $index, GLuint $divisor), SDL_GL_GetProcAddress('glVertexAttribDivisorARB')) or return False;
	&glVertexAttribDivisorEXT = nativecast(:(GLuint $index, GLuint $divisor), SDL_GL_GetProcAddress('glVertexAttribDivisorEXT')) or return False;
	&glVertexAttribDivisorNV = nativecast(:(GLuint $index, GLuint $divisor), SDL_GL_GetProcAddress('glVertexAttribDivisorNV')) or return False;
	&glVertexAttribFormat = nativecast(:(GLuint $attribindex, GLint $size, GLenum $type, GLboolean $normalized, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexAttribFormat')) or return False;
	&glVertexAttribFormatNV = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLboolean $normalized, GLsizei $stride), SDL_GL_GetProcAddress('glVertexAttribFormatNV')) or return False;
	&glVertexAttribI1i = nativecast(:(GLuint $index, GLint $x), SDL_GL_GetProcAddress('glVertexAttribI1i')) or return False;
	&glVertexAttribI1iEXT = nativecast(:(GLuint $index, GLint $x), SDL_GL_GetProcAddress('glVertexAttribI1iEXT')) or return False;
	&glVertexAttribI1iv = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI1iv')) or return False;
	&glVertexAttribI1ivEXT = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI1ivEXT')) or return False;
	&glVertexAttribI1ui = nativecast(:(GLuint $index, GLuint $x), SDL_GL_GetProcAddress('glVertexAttribI1ui')) or return False;
	&glVertexAttribI1uiEXT = nativecast(:(GLuint $index, GLuint $x), SDL_GL_GetProcAddress('glVertexAttribI1uiEXT')) or return False;
	&glVertexAttribI1uiv = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI1uiv')) or return False;
	&glVertexAttribI1uivEXT = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI1uivEXT')) or return False;
	&glVertexAttribI2i = nativecast(:(GLuint $index, GLint $x, GLint $y), SDL_GL_GetProcAddress('glVertexAttribI2i')) or return False;
	&glVertexAttribI2iEXT = nativecast(:(GLuint $index, GLint $x, GLint $y), SDL_GL_GetProcAddress('glVertexAttribI2iEXT')) or return False;
	&glVertexAttribI2iv = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI2iv')) or return False;
	&glVertexAttribI2ivEXT = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI2ivEXT')) or return False;
	&glVertexAttribI2ui = nativecast(:(GLuint $index, GLuint $x, GLuint $y), SDL_GL_GetProcAddress('glVertexAttribI2ui')) or return False;
	&glVertexAttribI2uiEXT = nativecast(:(GLuint $index, GLuint $x, GLuint $y), SDL_GL_GetProcAddress('glVertexAttribI2uiEXT')) or return False;
	&glVertexAttribI2uiv = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI2uiv')) or return False;
	&glVertexAttribI2uivEXT = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI2uivEXT')) or return False;
	&glVertexAttribI3i = nativecast(:(GLuint $index, GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glVertexAttribI3i')) or return False;
	&glVertexAttribI3iEXT = nativecast(:(GLuint $index, GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glVertexAttribI3iEXT')) or return False;
	&glVertexAttribI3iv = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI3iv')) or return False;
	&glVertexAttribI3ivEXT = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI3ivEXT')) or return False;
	&glVertexAttribI3ui = nativecast(:(GLuint $index, GLuint $x, GLuint $y, GLuint $z), SDL_GL_GetProcAddress('glVertexAttribI3ui')) or return False;
	&glVertexAttribI3uiEXT = nativecast(:(GLuint $index, GLuint $x, GLuint $y, GLuint $z), SDL_GL_GetProcAddress('glVertexAttribI3uiEXT')) or return False;
	&glVertexAttribI3uiv = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI3uiv')) or return False;
	&glVertexAttribI3uivEXT = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI3uivEXT')) or return False;
	&glVertexAttribI4bv = nativecast(:(GLuint $index, CArray[GLbyte] $v), SDL_GL_GetProcAddress('glVertexAttribI4bv')) or return False;
	&glVertexAttribI4bvEXT = nativecast(:(GLuint $index, CArray[GLbyte] $v), SDL_GL_GetProcAddress('glVertexAttribI4bvEXT')) or return False;
	&glVertexAttribI4i = nativecast(:(GLuint $index, GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glVertexAttribI4i')) or return False;
	&glVertexAttribI4iEXT = nativecast(:(GLuint $index, GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glVertexAttribI4iEXT')) or return False;
	&glVertexAttribI4iv = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI4iv')) or return False;
	&glVertexAttribI4ivEXT = nativecast(:(GLuint $index, CArray[GLint] $v), SDL_GL_GetProcAddress('glVertexAttribI4ivEXT')) or return False;
	&glVertexAttribI4sv = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttribI4sv')) or return False;
	&glVertexAttribI4svEXT = nativecast(:(GLuint $index, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttribI4svEXT')) or return False;
	&glVertexAttribI4ubv = nativecast(:(GLuint $index, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttribI4ubv')) or return False;
	&glVertexAttribI4ubvEXT = nativecast(:(GLuint $index, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttribI4ubvEXT')) or return False;
	&glVertexAttribI4ui = nativecast(:(GLuint $index, GLuint $x, GLuint $y, GLuint $z, GLuint $w), SDL_GL_GetProcAddress('glVertexAttribI4ui')) or return False;
	&glVertexAttribI4uiEXT = nativecast(:(GLuint $index, GLuint $x, GLuint $y, GLuint $z, GLuint $w), SDL_GL_GetProcAddress('glVertexAttribI4uiEXT')) or return False;
	&glVertexAttribI4uiv = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI4uiv')) or return False;
	&glVertexAttribI4uivEXT = nativecast(:(GLuint $index, CArray[GLuint] $v), SDL_GL_GetProcAddress('glVertexAttribI4uivEXT')) or return False;
	&glVertexAttribI4usv = nativecast(:(GLuint $index, CArray[GLushort] $v), SDL_GL_GetProcAddress('glVertexAttribI4usv')) or return False;
	&glVertexAttribI4usvEXT = nativecast(:(GLuint $index, CArray[GLushort] $v), SDL_GL_GetProcAddress('glVertexAttribI4usvEXT')) or return False;
	&glVertexAttribIFormat = nativecast(:(GLuint $attribindex, GLint $size, GLenum $type, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexAttribIFormat')) or return False;
	&glVertexAttribIFormatNV = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glVertexAttribIFormatNV')) or return False;
	&glVertexAttribIPointer = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexAttribIPointer')) or return False;
	&glVertexAttribIPointerEXT = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexAttribIPointerEXT')) or return False;
	&glVertexAttribL1d = nativecast(:(GLuint $index, GLdouble $x), SDL_GL_GetProcAddress('glVertexAttribL1d')) or return False;
	&glVertexAttribL1dEXT = nativecast(:(GLuint $index, GLdouble $x), SDL_GL_GetProcAddress('glVertexAttribL1dEXT')) or return False;
	&glVertexAttribL1dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL1dv')) or return False;
	&glVertexAttribL1dvEXT = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL1dvEXT')) or return False;
	&glVertexAttribL1i64NV = nativecast(:(GLuint $index, GLint64EXT $x), SDL_GL_GetProcAddress('glVertexAttribL1i64NV')) or return False;
	&glVertexAttribL1i64vNV = nativecast(:(GLuint $index, CArray[GLint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL1i64vNV')) or return False;
	&glVertexAttribL1ui64ARB = nativecast(:(GLuint $index, GLuint64EXT $x), SDL_GL_GetProcAddress('glVertexAttribL1ui64ARB')) or return False;
	&glVertexAttribL1ui64NV = nativecast(:(GLuint $index, GLuint64EXT $x), SDL_GL_GetProcAddress('glVertexAttribL1ui64NV')) or return False;
	&glVertexAttribL1ui64vARB = nativecast(:(GLuint $index, CArray[GLuint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL1ui64vARB')) or return False;
	&glVertexAttribL1ui64vNV = nativecast(:(GLuint $index, CArray[GLuint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL1ui64vNV')) or return False;
	&glVertexAttribL2d = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glVertexAttribL2d')) or return False;
	&glVertexAttribL2dEXT = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glVertexAttribL2dEXT')) or return False;
	&glVertexAttribL2dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL2dv')) or return False;
	&glVertexAttribL2dvEXT = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL2dvEXT')) or return False;
	&glVertexAttribL2i64NV = nativecast(:(GLuint $index, GLint64EXT $x, GLint64EXT $y), SDL_GL_GetProcAddress('glVertexAttribL2i64NV')) or return False;
	&glVertexAttribL2i64vNV = nativecast(:(GLuint $index, CArray[GLint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL2i64vNV')) or return False;
	&glVertexAttribL2ui64NV = nativecast(:(GLuint $index, GLuint64EXT $x, GLuint64EXT $y), SDL_GL_GetProcAddress('glVertexAttribL2ui64NV')) or return False;
	&glVertexAttribL2ui64vNV = nativecast(:(GLuint $index, CArray[GLuint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL2ui64vNV')) or return False;
	&glVertexAttribL3d = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glVertexAttribL3d')) or return False;
	&glVertexAttribL3dEXT = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glVertexAttribL3dEXT')) or return False;
	&glVertexAttribL3dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL3dv')) or return False;
	&glVertexAttribL3dvEXT = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL3dvEXT')) or return False;
	&glVertexAttribL3i64NV = nativecast(:(GLuint $index, GLint64EXT $x, GLint64EXT $y, GLint64EXT $z), SDL_GL_GetProcAddress('glVertexAttribL3i64NV')) or return False;
	&glVertexAttribL3i64vNV = nativecast(:(GLuint $index, CArray[GLint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL3i64vNV')) or return False;
	&glVertexAttribL3ui64NV = nativecast(:(GLuint $index, GLuint64EXT $x, GLuint64EXT $y, GLuint64EXT $z), SDL_GL_GetProcAddress('glVertexAttribL3ui64NV')) or return False;
	&glVertexAttribL3ui64vNV = nativecast(:(GLuint $index, CArray[GLuint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL3ui64vNV')) or return False;
	&glVertexAttribL4d = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glVertexAttribL4d')) or return False;
	&glVertexAttribL4dEXT = nativecast(:(GLuint $index, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glVertexAttribL4dEXT')) or return False;
	&glVertexAttribL4dv = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL4dv')) or return False;
	&glVertexAttribL4dvEXT = nativecast(:(GLuint $index, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribL4dvEXT')) or return False;
	&glVertexAttribL4i64NV = nativecast(:(GLuint $index, GLint64EXT $x, GLint64EXT $y, GLint64EXT $z, GLint64EXT $w), SDL_GL_GetProcAddress('glVertexAttribL4i64NV')) or return False;
	&glVertexAttribL4i64vNV = nativecast(:(GLuint $index, CArray[GLint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL4i64vNV')) or return False;
	&glVertexAttribL4ui64NV = nativecast(:(GLuint $index, GLuint64EXT $x, GLuint64EXT $y, GLuint64EXT $z, GLuint64EXT $w), SDL_GL_GetProcAddress('glVertexAttribL4ui64NV')) or return False;
	&glVertexAttribL4ui64vNV = nativecast(:(GLuint $index, CArray[GLuint64EXT] $v), SDL_GL_GetProcAddress('glVertexAttribL4ui64vNV')) or return False;
	&glVertexAttribLFormat = nativecast(:(GLuint $attribindex, GLint $size, GLenum $type, GLuint $relativeoffset), SDL_GL_GetProcAddress('glVertexAttribLFormat')) or return False;
	&glVertexAttribLFormatNV = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glVertexAttribLFormatNV')) or return False;
	&glVertexAttribLPointer = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexAttribLPointer')) or return False;
	&glVertexAttribLPointerEXT = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexAttribLPointerEXT')) or return False;
	&glVertexAttribP1ui = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, GLuint $value), SDL_GL_GetProcAddress('glVertexAttribP1ui')) or return False;
	&glVertexAttribP1uiv = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, CArray[GLuint] $value), SDL_GL_GetProcAddress('glVertexAttribP1uiv')) or return False;
	&glVertexAttribP2ui = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, GLuint $value), SDL_GL_GetProcAddress('glVertexAttribP2ui')) or return False;
	&glVertexAttribP2uiv = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, CArray[GLuint] $value), SDL_GL_GetProcAddress('glVertexAttribP2uiv')) or return False;
	&glVertexAttribP3ui = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, GLuint $value), SDL_GL_GetProcAddress('glVertexAttribP3ui')) or return False;
	&glVertexAttribP3uiv = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, CArray[GLuint] $value), SDL_GL_GetProcAddress('glVertexAttribP3uiv')) or return False;
	&glVertexAttribP4ui = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, GLuint $value), SDL_GL_GetProcAddress('glVertexAttribP4ui')) or return False;
	&glVertexAttribP4uiv = nativecast(:(GLuint $index, GLenum $type, GLboolean $normalized, CArray[GLuint] $value), SDL_GL_GetProcAddress('glVertexAttribP4uiv')) or return False;
	&glVertexAttribParameteriAMD = nativecast(:(GLuint $index, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glVertexAttribParameteriAMD')) or return False;
	&glVertexAttribPointer = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLboolean $normalized, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexAttribPointer')) or return False;
	&glVertexAttribPointerARB = nativecast(:(GLuint $index, GLint $size, GLenum $type, GLboolean $normalized, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexAttribPointerARB')) or return False;
	&glVertexAttribPointerNV = nativecast(:(GLuint $index, GLint $fsize, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexAttribPointerNV')) or return False;
	&glVertexAttribs1dvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribs1dvNV')) or return False;
	&glVertexAttribs1fvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttribs1fvNV')) or return False;
	&glVertexAttribs1hvNV = nativecast(:(GLuint $index, GLsizei $n, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttribs1hvNV')) or return False;
	&glVertexAttribs1svNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttribs1svNV')) or return False;
	&glVertexAttribs2dvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribs2dvNV')) or return False;
	&glVertexAttribs2fvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttribs2fvNV')) or return False;
	&glVertexAttribs2hvNV = nativecast(:(GLuint $index, GLsizei $n, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttribs2hvNV')) or return False;
	&glVertexAttribs2svNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttribs2svNV')) or return False;
	&glVertexAttribs3dvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribs3dvNV')) or return False;
	&glVertexAttribs3fvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttribs3fvNV')) or return False;
	&glVertexAttribs3hvNV = nativecast(:(GLuint $index, GLsizei $n, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttribs3hvNV')) or return False;
	&glVertexAttribs3svNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttribs3svNV')) or return False;
	&glVertexAttribs4dvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLdouble] $v), SDL_GL_GetProcAddress('glVertexAttribs4dvNV')) or return False;
	&glVertexAttribs4fvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glVertexAttribs4fvNV')) or return False;
	&glVertexAttribs4hvNV = nativecast(:(GLuint $index, GLsizei $n, CArray[GLhalfNV] $v), SDL_GL_GetProcAddress('glVertexAttribs4hvNV')) or return False;
	&glVertexAttribs4svNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLshort] $v), SDL_GL_GetProcAddress('glVertexAttribs4svNV')) or return False;
	&glVertexAttribs4ubvNV = nativecast(:(GLuint $index, GLsizei $count, CArray[GLubyte] $v), SDL_GL_GetProcAddress('glVertexAttribs4ubvNV')) or return False;
	&glVertexBindingDivisor = nativecast(:(GLuint $bindingindex, GLuint $divisor), SDL_GL_GetProcAddress('glVertexBindingDivisor')) or return False;
	&glVertexBlendARB = nativecast(:(GLint $count), SDL_GL_GetProcAddress('glVertexBlendARB')) or return False;
	&glVertexBlendEnvfATI = nativecast(:(GLenum $pname, GLfloat $param), SDL_GL_GetProcAddress('glVertexBlendEnvfATI')) or return False;
	&glVertexBlendEnviATI = nativecast(:(GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glVertexBlendEnviATI')) or return False;
	&glVertexFormatNV = nativecast(:(GLint $size, GLenum $type, GLsizei $stride), SDL_GL_GetProcAddress('glVertexFormatNV')) or return False;
	&glVertexP2ui = nativecast(:(GLenum $type, GLuint $value), SDL_GL_GetProcAddress('glVertexP2ui')) or return False;
	&glVertexP2uiv = nativecast(:(GLenum $type, CArray[GLuint] $value), SDL_GL_GetProcAddress('glVertexP2uiv')) or return False;
	&glVertexP3ui = nativecast(:(GLenum $type, GLuint $value), SDL_GL_GetProcAddress('glVertexP3ui')) or return False;
	&glVertexP3uiv = nativecast(:(GLenum $type, CArray[GLuint] $value), SDL_GL_GetProcAddress('glVertexP3uiv')) or return False;
	&glVertexP4ui = nativecast(:(GLenum $type, GLuint $value), SDL_GL_GetProcAddress('glVertexP4ui')) or return False;
	&glVertexP4uiv = nativecast(:(GLenum $type, CArray[GLuint] $value), SDL_GL_GetProcAddress('glVertexP4uiv')) or return False;
	&glVertexPointer = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexPointer')) or return False;
	&glVertexPointerEXT = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, GLsizei $count, Pointer $pointer), SDL_GL_GetProcAddress('glVertexPointerEXT')) or return False;
	&glVertexPointerListIBM = nativecast(:(GLint $size, GLenum $type, GLint $stride, CArray[Pointer] $pointer, GLint $ptrstride), SDL_GL_GetProcAddress('glVertexPointerListIBM')) or return False;
	&glVertexPointervINTEL = nativecast(:(GLint $size, GLenum $type, CArray[Pointer] $pointer), SDL_GL_GetProcAddress('glVertexPointervINTEL')) or return False;
	&glVertexStream1dATI = nativecast(:(GLenum $stream, GLdouble $x), SDL_GL_GetProcAddress('glVertexStream1dATI')) or return False;
	&glVertexStream1dvATI = nativecast(:(GLenum $stream, CArray[GLdouble] $coords), SDL_GL_GetProcAddress('glVertexStream1dvATI')) or return False;
	&glVertexStream1fATI = nativecast(:(GLenum $stream, GLfloat $x), SDL_GL_GetProcAddress('glVertexStream1fATI')) or return False;
	&glVertexStream1fvATI = nativecast(:(GLenum $stream, CArray[GLfloat] $coords), SDL_GL_GetProcAddress('glVertexStream1fvATI')) or return False;
	&glVertexStream1iATI = nativecast(:(GLenum $stream, GLint $x), SDL_GL_GetProcAddress('glVertexStream1iATI')) or return False;
	&glVertexStream1ivATI = nativecast(:(GLenum $stream, CArray[GLint] $coords), SDL_GL_GetProcAddress('glVertexStream1ivATI')) or return False;
	&glVertexStream1sATI = nativecast(:(GLenum $stream, GLshort $x), SDL_GL_GetProcAddress('glVertexStream1sATI')) or return False;
	&glVertexStream1svATI = nativecast(:(GLenum $stream, CArray[GLshort] $coords), SDL_GL_GetProcAddress('glVertexStream1svATI')) or return False;
	&glVertexStream2dATI = nativecast(:(GLenum $stream, GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glVertexStream2dATI')) or return False;
	&glVertexStream2dvATI = nativecast(:(GLenum $stream, CArray[GLdouble] $coords), SDL_GL_GetProcAddress('glVertexStream2dvATI')) or return False;
	&glVertexStream2fATI = nativecast(:(GLenum $stream, GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glVertexStream2fATI')) or return False;
	&glVertexStream2fvATI = nativecast(:(GLenum $stream, CArray[GLfloat] $coords), SDL_GL_GetProcAddress('glVertexStream2fvATI')) or return False;
	&glVertexStream2iATI = nativecast(:(GLenum $stream, GLint $x, GLint $y), SDL_GL_GetProcAddress('glVertexStream2iATI')) or return False;
	&glVertexStream2ivATI = nativecast(:(GLenum $stream, CArray[GLint] $coords), SDL_GL_GetProcAddress('glVertexStream2ivATI')) or return False;
	&glVertexStream2sATI = nativecast(:(GLenum $stream, GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glVertexStream2sATI')) or return False;
	&glVertexStream2svATI = nativecast(:(GLenum $stream, CArray[GLshort] $coords), SDL_GL_GetProcAddress('glVertexStream2svATI')) or return False;
	&glVertexStream3dATI = nativecast(:(GLenum $stream, GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glVertexStream3dATI')) or return False;
	&glVertexStream3dvATI = nativecast(:(GLenum $stream, CArray[GLdouble] $coords), SDL_GL_GetProcAddress('glVertexStream3dvATI')) or return False;
	&glVertexStream3fATI = nativecast(:(GLenum $stream, GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glVertexStream3fATI')) or return False;
	&glVertexStream3fvATI = nativecast(:(GLenum $stream, CArray[GLfloat] $coords), SDL_GL_GetProcAddress('glVertexStream3fvATI')) or return False;
	&glVertexStream3iATI = nativecast(:(GLenum $stream, GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glVertexStream3iATI')) or return False;
	&glVertexStream3ivATI = nativecast(:(GLenum $stream, CArray[GLint] $coords), SDL_GL_GetProcAddress('glVertexStream3ivATI')) or return False;
	&glVertexStream3sATI = nativecast(:(GLenum $stream, GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glVertexStream3sATI')) or return False;
	&glVertexStream3svATI = nativecast(:(GLenum $stream, CArray[GLshort] $coords), SDL_GL_GetProcAddress('glVertexStream3svATI')) or return False;
	&glVertexStream4dATI = nativecast(:(GLenum $stream, GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glVertexStream4dATI')) or return False;
	&glVertexStream4dvATI = nativecast(:(GLenum $stream, CArray[GLdouble] $coords), SDL_GL_GetProcAddress('glVertexStream4dvATI')) or return False;
	&glVertexStream4fATI = nativecast(:(GLenum $stream, GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glVertexStream4fATI')) or return False;
	&glVertexStream4fvATI = nativecast(:(GLenum $stream, CArray[GLfloat] $coords), SDL_GL_GetProcAddress('glVertexStream4fvATI')) or return False;
	&glVertexStream4iATI = nativecast(:(GLenum $stream, GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glVertexStream4iATI')) or return False;
	&glVertexStream4ivATI = nativecast(:(GLenum $stream, CArray[GLint] $coords), SDL_GL_GetProcAddress('glVertexStream4ivATI')) or return False;
	&glVertexStream4sATI = nativecast(:(GLenum $stream, GLshort $x, GLshort $y, GLshort $z, GLshort $w), SDL_GL_GetProcAddress('glVertexStream4sATI')) or return False;
	&glVertexStream4svATI = nativecast(:(GLenum $stream, CArray[GLshort] $coords), SDL_GL_GetProcAddress('glVertexStream4svATI')) or return False;
	&glVertexWeightPointerEXT = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glVertexWeightPointerEXT')) or return False;
	&glVertexWeightfEXT = nativecast(:(GLfloat $weight), SDL_GL_GetProcAddress('glVertexWeightfEXT')) or return False;
	&glVertexWeightfvEXT = nativecast(:(CArray[GLfloat] $weight), SDL_GL_GetProcAddress('glVertexWeightfvEXT')) or return False;
	&glVertexWeighthNV = nativecast(:(GLhalfNV $weight), SDL_GL_GetProcAddress('glVertexWeighthNV')) or return False;
	&glVertexWeighthvNV = nativecast(:(CArray[GLhalfNV] $weight), SDL_GL_GetProcAddress('glVertexWeighthvNV')) or return False;
	&glVideoCaptureNV = nativecast(:(GLuint $video_capture_slot, CArray[GLuint] $sequence_num, CArray[GLuint64EXT] $capture_time --> GLenum), SDL_GL_GetProcAddress('glVideoCaptureNV')) or return False;
	&glVideoCaptureStreamParameterdvNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $pname, CArray[GLdouble] $params), SDL_GL_GetProcAddress('glVideoCaptureStreamParameterdvNV')) or return False;
	&glVideoCaptureStreamParameterfvNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $pname, CArray[GLfloat] $params), SDL_GL_GetProcAddress('glVideoCaptureStreamParameterfvNV')) or return False;
	&glVideoCaptureStreamParameterivNV = nativecast(:(GLuint $video_capture_slot, GLuint $stream, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glVideoCaptureStreamParameterivNV')) or return False;
	&glViewport = nativecast(:(GLint $x, GLint $y, GLsizei $width, GLsizei $height), SDL_GL_GetProcAddress('glViewport')) or return False;
	&glViewportArrayv = nativecast(:(GLuint $first, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glViewportArrayv')) or return False;
	&glViewportArrayvNV = nativecast(:(GLuint $first, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glViewportArrayvNV')) or return False;
	&glViewportArrayvOES = nativecast(:(GLuint $first, GLsizei $count, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glViewportArrayvOES')) or return False;
	&glViewportIndexedf = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $w, GLfloat $h), SDL_GL_GetProcAddress('glViewportIndexedf')) or return False;
	&glViewportIndexedfOES = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $w, GLfloat $h), SDL_GL_GetProcAddress('glViewportIndexedfOES')) or return False;
	&glViewportIndexedfNV = nativecast(:(GLuint $index, GLfloat $x, GLfloat $y, GLfloat $w, GLfloat $h), SDL_GL_GetProcAddress('glViewportIndexedfNV')) or return False;
	&glViewportIndexedfv = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glViewportIndexedfv')) or return False;
	&glViewportIndexedfvOES = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glViewportIndexedfvOES')) or return False;
	&glViewportIndexedfvNV = nativecast(:(GLuint $index, CArray[GLfloat] $v), SDL_GL_GetProcAddress('glViewportIndexedfvNV')) or return False;
	&glViewportPositionWScaleNV = nativecast(:(GLuint $index, GLfloat $xcoeff, GLfloat $ycoeff), SDL_GL_GetProcAddress('glViewportPositionWScaleNV')) or return False;
	&glViewportSwizzleNV = nativecast(:(GLuint $index, GLenum $swizzlex, GLenum $swizzley, GLenum $swizzlez, GLenum $swizzlew), SDL_GL_GetProcAddress('glViewportSwizzleNV')) or return False;
	&glWaitSemaphoreEXT = nativecast(:(GLuint $semaphore, GLuint $numBufferBarriers, CArray[GLuint] $buffers, GLuint $numTextureBarriers, CArray[GLuint] $textures, CArray[GLenum] $srcLayouts), SDL_GL_GetProcAddress('glWaitSemaphoreEXT')) or return False;
	&glWaitSemaphoreui64NVX = nativecast(:(GLuint $waitGpu, GLsizei $fenceObjectCount, CArray[GLuint] $semaphoreArray, CArray[GLuint64] $fenceValueArray), SDL_GL_GetProcAddress('glWaitSemaphoreui64NVX')) or return False;
	&glWaitSync = nativecast(:(GLsync $sync, GLbitfield $flags, GLuint64 $timeout), SDL_GL_GetProcAddress('glWaitSync')) or return False;
	&glWaitSyncAPPLE = nativecast(:(GLsync $sync, GLbitfield $flags, GLuint64 $timeout), SDL_GL_GetProcAddress('glWaitSyncAPPLE')) or return False;
	&glWeightPathsNV = nativecast(:(GLuint $resultPath, GLsizei $numPaths, CArray[GLuint] $paths, CArray[GLfloat] $weights), SDL_GL_GetProcAddress('glWeightPathsNV')) or return False;
	&glWeightPointerARB = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glWeightPointerARB')) or return False;
	&glWeightPointerOES = nativecast(:(GLint $size, GLenum $type, GLsizei $stride, Pointer $pointer), SDL_GL_GetProcAddress('glWeightPointerOES')) or return False;
	&glWeightbvARB = nativecast(:(GLint $size, CArray[GLbyte] $weights), SDL_GL_GetProcAddress('glWeightbvARB')) or return False;
	&glWeightdvARB = nativecast(:(GLint $size, CArray[GLdouble] $weights), SDL_GL_GetProcAddress('glWeightdvARB')) or return False;
	&glWeightfvARB = nativecast(:(GLint $size, CArray[GLfloat] $weights), SDL_GL_GetProcAddress('glWeightfvARB')) or return False;
	&glWeightivARB = nativecast(:(GLint $size, CArray[GLint] $weights), SDL_GL_GetProcAddress('glWeightivARB')) or return False;
	&glWeightsvARB = nativecast(:(GLint $size, CArray[GLshort] $weights), SDL_GL_GetProcAddress('glWeightsvARB')) or return False;
	&glWeightubvARB = nativecast(:(GLint $size, CArray[GLubyte] $weights), SDL_GL_GetProcAddress('glWeightubvARB')) or return False;
	&glWeightuivARB = nativecast(:(GLint $size, CArray[GLuint] $weights), SDL_GL_GetProcAddress('glWeightuivARB')) or return False;
	&glWeightusvARB = nativecast(:(GLint $size, CArray[GLushort] $weights), SDL_GL_GetProcAddress('glWeightusvARB')) or return False;
	&glWindowPos2d = nativecast(:(GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glWindowPos2d')) or return False;
	&glWindowPos2dARB = nativecast(:(GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glWindowPos2dARB')) or return False;
	&glWindowPos2dMESA = nativecast(:(GLdouble $x, GLdouble $y), SDL_GL_GetProcAddress('glWindowPos2dMESA')) or return False;
	&glWindowPos2dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glWindowPos2dv')) or return False;
	&glWindowPos2dvARB = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glWindowPos2dvARB')) or return False;
	&glWindowPos2dvMESA = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glWindowPos2dvMESA')) or return False;
	&glWindowPos2f = nativecast(:(GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glWindowPos2f')) or return False;
	&glWindowPos2fARB = nativecast(:(GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glWindowPos2fARB')) or return False;
	&glWindowPos2fMESA = nativecast(:(GLfloat $x, GLfloat $y), SDL_GL_GetProcAddress('glWindowPos2fMESA')) or return False;
	&glWindowPos2fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glWindowPos2fv')) or return False;
	&glWindowPos2fvARB = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glWindowPos2fvARB')) or return False;
	&glWindowPos2fvMESA = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glWindowPos2fvMESA')) or return False;
	&glWindowPos2i = nativecast(:(GLint $x, GLint $y), SDL_GL_GetProcAddress('glWindowPos2i')) or return False;
	&glWindowPos2iARB = nativecast(:(GLint $x, GLint $y), SDL_GL_GetProcAddress('glWindowPos2iARB')) or return False;
	&glWindowPos2iMESA = nativecast(:(GLint $x, GLint $y), SDL_GL_GetProcAddress('glWindowPos2iMESA')) or return False;
	&glWindowPos2iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glWindowPos2iv')) or return False;
	&glWindowPos2ivARB = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glWindowPos2ivARB')) or return False;
	&glWindowPos2ivMESA = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glWindowPos2ivMESA')) or return False;
	&glWindowPos2s = nativecast(:(GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glWindowPos2s')) or return False;
	&glWindowPos2sARB = nativecast(:(GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glWindowPos2sARB')) or return False;
	&glWindowPos2sMESA = nativecast(:(GLshort $x, GLshort $y), SDL_GL_GetProcAddress('glWindowPos2sMESA')) or return False;
	&glWindowPos2sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glWindowPos2sv')) or return False;
	&glWindowPos2svARB = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glWindowPos2svARB')) or return False;
	&glWindowPos2svMESA = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glWindowPos2svMESA')) or return False;
	&glWindowPos3d = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glWindowPos3d')) or return False;
	&glWindowPos3dARB = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glWindowPos3dARB')) or return False;
	&glWindowPos3dMESA = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z), SDL_GL_GetProcAddress('glWindowPos3dMESA')) or return False;
	&glWindowPos3dv = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glWindowPos3dv')) or return False;
	&glWindowPos3dvARB = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glWindowPos3dvARB')) or return False;
	&glWindowPos3dvMESA = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glWindowPos3dvMESA')) or return False;
	&glWindowPos3f = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glWindowPos3f')) or return False;
	&glWindowPos3fARB = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glWindowPos3fARB')) or return False;
	&glWindowPos3fMESA = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z), SDL_GL_GetProcAddress('glWindowPos3fMESA')) or return False;
	&glWindowPos3fv = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glWindowPos3fv')) or return False;
	&glWindowPos3fvARB = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glWindowPos3fvARB')) or return False;
	&glWindowPos3fvMESA = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glWindowPos3fvMESA')) or return False;
	&glWindowPos3i = nativecast(:(GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glWindowPos3i')) or return False;
	&glWindowPos3iARB = nativecast(:(GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glWindowPos3iARB')) or return False;
	&glWindowPos3iMESA = nativecast(:(GLint $x, GLint $y, GLint $z), SDL_GL_GetProcAddress('glWindowPos3iMESA')) or return False;
	&glWindowPos3iv = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glWindowPos3iv')) or return False;
	&glWindowPos3ivARB = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glWindowPos3ivARB')) or return False;
	&glWindowPos3ivMESA = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glWindowPos3ivMESA')) or return False;
	&glWindowPos3s = nativecast(:(GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glWindowPos3s')) or return False;
	&glWindowPos3sARB = nativecast(:(GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glWindowPos3sARB')) or return False;
	&glWindowPos3sMESA = nativecast(:(GLshort $x, GLshort $y, GLshort $z), SDL_GL_GetProcAddress('glWindowPos3sMESA')) or return False;
	&glWindowPos3sv = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glWindowPos3sv')) or return False;
	&glWindowPos3svARB = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glWindowPos3svARB')) or return False;
	&glWindowPos3svMESA = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glWindowPos3svMESA')) or return False;
	&glWindowPos4dMESA = nativecast(:(GLdouble $x, GLdouble $y, GLdouble $z, GLdouble $w), SDL_GL_GetProcAddress('glWindowPos4dMESA')) or return False;
	&glWindowPos4dvMESA = nativecast(:(CArray[GLdouble] $v), SDL_GL_GetProcAddress('glWindowPos4dvMESA')) or return False;
	&glWindowPos4fMESA = nativecast(:(GLfloat $x, GLfloat $y, GLfloat $z, GLfloat $w), SDL_GL_GetProcAddress('glWindowPos4fMESA')) or return False;
	&glWindowPos4fvMESA = nativecast(:(CArray[GLfloat] $v), SDL_GL_GetProcAddress('glWindowPos4fvMESA')) or return False;
	&glWindowPos4iMESA = nativecast(:(GLint $x, GLint $y, GLint $z, GLint $w), SDL_GL_GetProcAddress('glWindowPos4iMESA')) or return False;
	&glWindowPos4ivMESA = nativecast(:(CArray[GLint] $v), SDL_GL_GetProcAddress('glWindowPos4ivMESA')) or return False;
	&glWindowPos4sMESA = nativecast(:(GLshort $x, GLshort $y, GLshort $z, GLshort $w), SDL_GL_GetProcAddress('glWindowPos4sMESA')) or return False;
	&glWindowPos4svMESA = nativecast(:(CArray[GLshort] $v), SDL_GL_GetProcAddress('glWindowPos4svMESA')) or return False;
	&glWindowRectanglesEXT = nativecast(:(GLenum $mode, GLsizei $count, CArray[GLint] $box), SDL_GL_GetProcAddress('glWindowRectanglesEXT')) or return False;
	&glWriteMaskEXT = nativecast(:(GLuint $res, GLuint $in, GLenum $outX, GLenum $outY, GLenum $outZ, GLenum $outW), SDL_GL_GetProcAddress('glWriteMaskEXT')) or return False;
	&glDrawVkImageNV = nativecast(:(GLuint64 $vkImage, GLuint $sampler, GLfloat $x0, GLfloat $y0, GLfloat $x1, GLfloat $y1, GLfloat $z, GLfloat $s0, GLfloat $t0, GLfloat $s1, GLfloat $t1), SDL_GL_GetProcAddress('glDrawVkImageNV')) or return False;
	&glWaitVkSemaphoreNV = nativecast(:(GLuint64 $vkSemaphore), SDL_GL_GetProcAddress('glWaitVkSemaphoreNV')) or return False;
	&glSignalVkSemaphoreNV = nativecast(:(GLuint64 $vkSemaphore), SDL_GL_GetProcAddress('glSignalVkSemaphoreNV')) or return False;
	&glSignalVkFenceNV = nativecast(:(GLuint64 $vkFence), SDL_GL_GetProcAddress('glSignalVkFenceNV')) or return False;
	&glFramebufferParameteriMESA = nativecast(:(GLenum $target, GLenum $pname, GLint $param), SDL_GL_GetProcAddress('glFramebufferParameteriMESA')) or return False;
	&glGetFramebufferParameterivMESA = nativecast(:(GLenum $target, GLenum $pname, CArray[GLint] $params), SDL_GL_GetProcAddress('glGetFramebufferParameterivMESA')) or return False;
}
